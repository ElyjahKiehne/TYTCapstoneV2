@page "/"
@using Antlr4.Runtime;
@using System.Text.Json;
@using Antlr4.Runtime.Tree;
@using Antlr4.Runtime.Tree.Xpath;
@using System.Text;
@inject IJSRuntime jsRuntime
@using Microsoft.AspNetCore.Components.Forms

@* <ASTNodeComponent Node="astRoot" /> *@

<InputFile OnChange="@HandleFileUpload" />
<button @onclick="RenderParseTree" disabled="@(!HasFileContent)">Render Parse Tree</button>

<div class="mt-3">
    @if (ErrorMessage != null)
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
</div>

<pre>
    @TreeString
</pre>

<div id="parseTree"></div>

@code {
    //private ASTNode? astRoot;
    private string? TreeString { get; set; }
    private TreeNode? TreeData { get; set; }

    private string? TreeStringJson { get; set; }
    private string? ErrorMessage { get; set; }
    private bool HasFileContent { get; set; }
    private string FileContent { get; set; } = string.Empty;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            ErrorMessage = null;
            var file = e.File;
            if (file.ContentType != "text/x-groovy" && !file.Name.EndsWith(".groovy"))
            {
                ErrorMessage = "Please upload a Groovy file (.groovy)";
                return;
            }

            using var reader = new StreamReader(file.OpenReadStream());
            FileContent = await reader.ReadToEndAsync();
            ParseGroovyCode(FileContent);
            HasFileContent = true;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing file: {ex.Message}";
            HasFileContent = false;
        }
    }

    private void ParseGroovyCode(string code)
    {
        try
        {
            AntlrInputStream inputStream = new AntlrInputStream(code);
            GroovyLexer lexer = new GroovyLexer(inputStream);
            CommonTokenStream tokenStream = new CommonTokenStream(lexer);
            GroovyParser parser = new GroovyParser(tokenStream);
            GroovyParser.CompilationUnitContext tree = parser.compilationUnit();

            TreeString = PrettyPrintTree(tree.ToStringTree(parser));

            ParseTreeJsonConverter converter = new ParseTreeJsonConverter();
            TreeNode rootNode = converter.ConvertToJson(tree, parser);

            TreeStringJson = JsonSerializer.Serialize(rootNode, new JsonSerializerOptions { WriteIndented = true });
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error parsing Groovy code: {ex.Message}";
        }
    }

    protected override void OnInitialized()
    {
        // Initialize with a simple example
        ParseGroovyCode(@"class HelloWorld {
            static void main(String[] args) {
                println 'Hello, World!'
            }
        }");
    }

    public async Task RenderParseTree()
    {
        await jsRuntime.InvokeVoidAsync("renderParseTree", JsonDocument.Parse(TreeStringJson).RootElement);
    }

    public static string PrettyPrintTree(string treeString)
    {
        var result = new StringBuilder();
        int indentLevel = 0;

        foreach (char c in treeString)
        {
            if (c == '(')
            {
                result.AppendLine();
                result.Append(new string(' ', indentLevel * 10));
                result.Append(c);
                indentLevel++;
                result.AppendLine();
                result.Append(new string(' ', indentLevel * 10));
            }
            else if (c == ')')
            {
                indentLevel--;
                result.AppendLine();
                result.Append(new string(' ', indentLevel * 10));
                result.Append(c);
            }
            else if (c == ' ')
            {
                result.AppendLine();
                result.Append(new string(' ', indentLevel * 10));
            }
            else
            {
                result.Append(c);
            }
        }

        return result.ToString();
    }
}