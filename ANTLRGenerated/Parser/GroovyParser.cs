//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GroovyParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

namespace TYTCapstone;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
public partial class GroovyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHEBANG_COMMENT=1, WS=2, LPAREN=3, RPAREN=4, LBRACK=5, RBRACK=6, LCURVE=7, 
		RCURVE=8, STRING=9, GSTRING_START=10, GSTRING_END=11, GSTRING_PART=12, 
		GSTRING_PATH_PART=13, ROLLBACK_ONE=14, DECIMAL=15, INTEGER=16, KW_CLASS=17, 
		KW_INTERFACE=18, KW_TRAIT=19, KW_ENUM=20, KW_PACKAGE=21, KW_IMPORT=22, 
		KW_EXTENDS=23, KW_IMPLEMENTS=24, KW_DEF=25, KW_NULL=26, KW_TRUE=27, KW_FALSE=28, 
		KW_NEW=29, KW_SUPER=30, KW_THIS=31, KW_IN=32, KW_FOR=33, KW_IF=34, KW_ELSE=35, 
		KW_DO=36, KW_WHILE=37, KW_SWITCH=38, KW_CASE=39, KW_DEFAULT=40, KW_CONTINUE=41, 
		KW_BREAK=42, KW_RETURN=43, KW_TRY=44, KW_CATCH=45, KW_FINALLY=46, KW_THROW=47, 
		KW_THROWS=48, KW_ASSERT=49, KW_CONST=50, KW_GOTO=51, RUSHIFT_ASSIGN=52, 
		RSHIFT_ASSIGN=53, LSHIFT_ASSIGN=54, SPACESHIP=55, ELVIS=56, SAFE_DOT=57, 
		STAR_DOT=58, ATTR_DOT=59, MEMBER_POINTER=60, LTE=61, GTE=62, CLOSURE_ARG_SEPARATOR=63, 
		DECREMENT=64, INCREMENT=65, POWER=66, LSHIFT=67, RANGE=68, ORANGE=69, 
		EQUAL=70, UNEQUAL=71, MATCH=72, FIND=73, AND=74, OR=75, PLUS_ASSIGN=76, 
		MINUS_ASSIGN=77, MULT_ASSIGN=78, DIV_ASSIGN=79, MOD_ASSIGN=80, BAND_ASSIGN=81, 
		XOR_ASSIGN=82, BOR_ASSIGN=83, SEMICOLON=84, DOT=85, COMMA=86, AT=87, ASSIGN=88, 
		LT=89, GT=90, COLON=91, BOR=92, NOT=93, BNOT=94, MULT=95, DIV=96, MOD=97, 
		PLUS=98, MINUS=99, BAND=100, XOR=101, QUESTION=102, ELLIPSIS=103, KW_AS=104, 
		KW_INSTANCEOF=105, BUILT_IN_TYPE=106, VISIBILITY_MODIFIER=107, KW_ABSTRACT=108, 
		KW_STATIC=109, KW_FINAL=110, KW_TRANSIENT=111, KW_NATIVE=112, KW_VOLATILE=113, 
		KW_SYNCHRONIZED=114, KW_STRICTFP=115, KW_THREADSAFE=116, IGNORE_NEWLINE=117, 
		NL=118, IDENTIFIER=119;
	public const int
		RULE_compilationUnit = 0, RULE_scriptPart = 1, RULE_packageDefinition = 2, 
		RULE_importStatement = 3, RULE_classDeclaration = 4, RULE_classMember = 5, 
		RULE_enumConstant = 6, RULE_classBody = 7, RULE_implementsClause = 8, 
		RULE_extendsClause = 9, RULE_methodDeclaration = 10, RULE_fieldDeclaration = 11, 
		RULE_declarationRule = 12, RULE_objectInitializer = 13, RULE_classInitializer = 14, 
		RULE_typeDeclaration = 15, RULE_annotationClause = 16, RULE_annotationElementPair = 17, 
		RULE_annotationElement = 18, RULE_genericDeclarationList = 19, RULE_genericsDeclarationElement = 20, 
		RULE_throwsClause = 21, RULE_argumentDeclarationList = 22, RULE_argumentDeclaration = 23, 
		RULE_blockStatement = 24, RULE_singleDeclaration = 25, RULE_tupleDeclaration = 26, 
		RULE_tupleVariableDeclaration = 27, RULE_newInstanceRule = 28, RULE_newArrayRule = 29, 
		RULE_statement = 30, RULE_blockStatementWithCurve = 31, RULE_statementBlock = 32, 
		RULE_tryBlock = 33, RULE_catchBlock = 34, RULE_finallyBlock = 35, RULE_caseStatement = 36, 
		RULE_pathExpression = 37, RULE_gstringPathExpression = 38, RULE_closureExpressionRule = 39, 
		RULE_gstringExpressionBody = 40, RULE_gstring = 41, RULE_annotationParameter = 42, 
		RULE_expression = 43, RULE_atomExpressionRule = 44, RULE_classConstantRule = 45, 
		RULE_argumentListRule = 46, RULE_callExpressionRule = 47, RULE_nonKwCallExpressionRule = 48, 
		RULE_callRule = 49, RULE_classNameExpression = 50, RULE_genericClassNameExpression = 51, 
		RULE_genericList = 52, RULE_genericListElement = 53, RULE_mapEntry = 54, 
		RULE_classModifier = 55, RULE_memberModifier = 56, RULE_argumentList = 57, 
		RULE_argument = 58, RULE_selectorName = 59, RULE_kwSelectorName = 60;
	public static readonly string[] ruleNames = {
		"compilationUnit", "scriptPart", "packageDefinition", "importStatement", 
		"classDeclaration", "classMember", "enumConstant", "classBody", "implementsClause", 
		"extendsClause", "methodDeclaration", "fieldDeclaration", "declarationRule", 
		"objectInitializer", "classInitializer", "typeDeclaration", "annotationClause", 
		"annotationElementPair", "annotationElement", "genericDeclarationList", 
		"genericsDeclarationElement", "throwsClause", "argumentDeclarationList", 
		"argumentDeclaration", "blockStatement", "singleDeclaration", "tupleDeclaration", 
		"tupleVariableDeclaration", "newInstanceRule", "newArrayRule", "statement", 
		"blockStatementWithCurve", "statementBlock", "tryBlock", "catchBlock", 
		"finallyBlock", "caseStatement", "pathExpression", "gstringPathExpression", 
		"closureExpressionRule", "gstringExpressionBody", "gstring", "annotationParameter", 
		"expression", "atomExpressionRule", "classConstantRule", "argumentListRule", 
		"callExpressionRule", "nonKwCallExpressionRule", "callRule", "classNameExpression", 
		"genericClassNameExpression", "genericList", "genericListElement", "mapEntry", 
		"classModifier", "memberModifier", "argumentList", "argument", "selectorName", 
		"kwSelectorName"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, "'\"'", 
		"'$'", null, null, null, null, "'class'", "'interface'", "'trait'", "'enum'", 
		"'package'", "'import'", "'extends'", "'implements'", "'def'", "'null'", 
		"'true'", "'false'", "'new'", "'super'", "'this'", "'in'", "'for'", "'if'", 
		"'else'", "'do'", "'while'", "'switch'", "'case'", "'default'", "'continue'", 
		"'break'", "'return'", "'try'", "'catch'", "'finally'", "'throw'", "'throws'", 
		"'assert'", "'const'", "'goto'", "'>>>='", "'>>='", "'<<='", "'<=>'", 
		"'?:'", "'?.'", "'*.'", "'.@'", "'.&'", "'<='", "'>='", "'->'", "'--'", 
		"'++'", "'**'", "'<<'", "'..'", "'..<'", "'=='", "'!='", "'==~'", "'=~'", 
		"'&&'", "'||'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", 
		"'|='", "';'", "'.'", "','", "'@'", "'='", "'<'", "'>'", "':'", "'|'", 
		"'!'", "'~'", "'*'", "'/'", "'%'", "'+'", "'-'", "'&'", "'^'", "'?'", 
		"'...'", "'as'", "'instanceof'", null, null, "'abstract'", "'static'", 
		"'final'", "'transient'", "'native'", "'volatile'", "'synchronized'", 
		"'strictfp'", "'threadsafe'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHEBANG_COMMENT", "WS", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
		"LCURVE", "RCURVE", "STRING", "GSTRING_START", "GSTRING_END", "GSTRING_PART", 
		"GSTRING_PATH_PART", "ROLLBACK_ONE", "DECIMAL", "INTEGER", "KW_CLASS", 
		"KW_INTERFACE", "KW_TRAIT", "KW_ENUM", "KW_PACKAGE", "KW_IMPORT", "KW_EXTENDS", 
		"KW_IMPLEMENTS", "KW_DEF", "KW_NULL", "KW_TRUE", "KW_FALSE", "KW_NEW", 
		"KW_SUPER", "KW_THIS", "KW_IN", "KW_FOR", "KW_IF", "KW_ELSE", "KW_DO", 
		"KW_WHILE", "KW_SWITCH", "KW_CASE", "KW_DEFAULT", "KW_CONTINUE", "KW_BREAK", 
		"KW_RETURN", "KW_TRY", "KW_CATCH", "KW_FINALLY", "KW_THROW", "KW_THROWS", 
		"KW_ASSERT", "KW_CONST", "KW_GOTO", "RUSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
		"LSHIFT_ASSIGN", "SPACESHIP", "ELVIS", "SAFE_DOT", "STAR_DOT", "ATTR_DOT", 
		"MEMBER_POINTER", "LTE", "GTE", "CLOSURE_ARG_SEPARATOR", "DECREMENT", 
		"INCREMENT", "POWER", "LSHIFT", "RANGE", "ORANGE", "EQUAL", "UNEQUAL", 
		"MATCH", "FIND", "AND", "OR", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "BAND_ASSIGN", "XOR_ASSIGN", "BOR_ASSIGN", 
		"SEMICOLON", "DOT", "COMMA", "AT", "ASSIGN", "LT", "GT", "COLON", "BOR", 
		"NOT", "BNOT", "MULT", "DIV", "MOD", "PLUS", "MINUS", "BAND", "XOR", "QUESTION", 
		"ELLIPSIS", "KW_AS", "KW_INSTANCEOF", "BUILT_IN_TYPE", "VISIBILITY_MODIFIER", 
		"KW_ABSTRACT", "KW_STATIC", "KW_FINAL", "KW_TRANSIENT", "KW_NATIVE", "KW_VOLATILE", 
		"KW_SYNCHRONIZED", "KW_STRICTFP", "KW_THREADSAFE", "IGNORE_NEWLINE", "NL", 
		"IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GroovyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GroovyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    private bool ellipsisEnabled = false;

	    private bool isEllipsisEnabled()
	    {
	        return ellipsisEnabled;
	    }

	    private void enableEllipsis()
	    {
	        ellipsisEnabled = true;
	    }

	    private void disableEllipsis()
	    {
	        ellipsisEnabled = false;
	    }

	    private static readonly HashSet<string> VISIBILITY_MODIFIER_SET = new HashSet<string>
	    {
	        "public",
	        "protected",
	        "private"
	    };

	    private const string VISIBILITY_MODIFIER_STR = "VISIBILITY_MODIFIER";

	    private static string createErrorMessageForStrictCheck(HashSet<string> s, string keyword)
	    {
	        if (VISIBILITY_MODIFIER_SET.Contains(keyword))
	        {
	            StringBuilder sb = new StringBuilder();
	            foreach (string m in s)
	            {
	                if (VISIBILITY_MODIFIER_SET.Contains(m))
	                {
	                    sb.Append(m + ", ");
	                }
	            }

	            sb.Append(keyword);
	            sb.Append(" are not allowed to duplicate or define at the same time.");
	            return sb.ToString();
	        }
	        else
	        {
	            return "Duplicated " + keyword + " is not allowed.";
	        }
	    }

	    private static void collectModifier(HashSet<string> s, string modifier)
	    {
	        s.Add(modifier);
	    }

	    private static bool checkModifierDuplication(HashSet<string> s, string modifier)
	    {
	        if (VISIBILITY_MODIFIER_SET.Contains(modifier))
	        {
	            modifier = VISIBILITY_MODIFIER_STR;

	            foreach (string mOriginal in s)
	            {
	                string m = VISIBILITY_MODIFIER_SET.Contains(mOriginal) ? VISIBILITY_MODIFIER_STR : mOriginal;

	                if (m.Equals(modifier))
	                {
	                    return true;
	                }
	            }

	            return false;
	        }
	        else
	        {
	            return s.Contains(modifier);
	        }
	    }

		public GroovyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GroovyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GroovyParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHEBANG_COMMENT() { return GetToken(GroovyParser.SHEBANG_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageDefinitionContext packageDefinition() {
			return GetRuleContext<PackageDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext[] classDeclaration() {
			return GetRuleContexts<ClassDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration(int i) {
			return GetRuleContext<ClassDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptPartContext[] scriptPart() {
			return GetRuleContexts<ScriptPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScriptPartContext scriptPart(int i) {
			return GetRuleContext<ScriptPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(GroovyParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(GroovyParser.SEMICOLON, i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 122;
				Match(SHEBANG_COMMENT);
				}
				break;
			}
			{
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 125;
					Match(NL);
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 131;
				packageDefinition();
				}
				break;
			}
			State = 137;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 134;
					_la = TokenStream.LA(1);
					if ( !(_la==SEMICOLON || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 148;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 140;
						importStatement();
						State = 141;
						_la = TokenStream.LA(1);
						if ( !(_la==SEMICOLON || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 143;
						classDeclaration();
						}
						break;
					case 3:
						{
						State = 144;
						scriptPart();
						State = 145;
						_la = TokenStream.LA(1);
						if ( !(_la==SEMICOLON || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 4:
						{
						State = 147;
						_la = TokenStream.LA(1);
						if ( !(_la==SEMICOLON || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 153;
					_la = TokenStream.LA(1);
					if ( !(_la==SEMICOLON || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 159;
				scriptPart();
				}
				break;
			}
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON || _la==NL) {
				{
				{
				State = 162;
				_la = TokenStream.LA(1);
				if ( !(_la==SEMICOLON || _la==NL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 168;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ScriptPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterScriptPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitScriptPart(this);
		}
	}

	[RuleVersion(0)]
	public ScriptPartContext scriptPart() {
		ScriptPartContext _localctx = new ScriptPartContext(Context, State);
		EnterRule(_localctx, 2, RULE_scriptPart);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				if (!( !GrammarPredicates.isInvalidMethodDeclaration(TokenStream) )) throw new FailedPredicateException(this, " !GrammarPredicates.isInvalidMethodDeclaration(InputStream) ");
				State = 171;
				methodDeclaration(null);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PACKAGE() { return GetToken(GroovyParser.KW_PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GroovyParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GroovyParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext[] annotationClause() {
			return GetRuleContexts<AnnotationClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext annotationClause(int i) {
			return GetRuleContext<AnnotationClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(GroovyParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(GroovyParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public PackageDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterPackageDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitPackageDefinition(this);
		}
	}

	[RuleVersion(0)]
	public PackageDefinitionContext packageDefinition() {
		PackageDefinitionContext _localctx = new PackageDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_packageDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 175;
				annotationClause();
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT || _la==NL) {
					{
					State = 178;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NL:
						{
						State = 176;
						Match(NL);
						}
						break;
					case AT:
						{
						State = 177;
						annotationClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 185;
			Match(KW_PACKAGE);
			{
			State = 186;
			Match(IDENTIFIER);
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 187;
					Match(DOT);
					State = 188;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPORT() { return GetToken(GroovyParser.KW_IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GroovyParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GroovyParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext[] annotationClause() {
			return GetRuleContexts<AnnotationClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext annotationClause(int i) {
			return GetRuleContext<AnnotationClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATIC() { return GetToken(GroovyParser.KW_STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(GroovyParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(GroovyParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(GroovyParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(GroovyParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_importStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 194;
				annotationClause();
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT || _la==NL) {
					{
					State = 197;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NL:
						{
						State = 195;
						Match(NL);
						}
						break;
					case AT:
						{
						State = 196;
						annotationClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 204;
			Match(KW_IMPORT);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_STATIC) {
				{
				State = 205;
				Match(KW_STATIC);
				}
			}

			{
			State = 208;
			Match(IDENTIFIER);
			State = 213;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 209;
					Match(DOT);
					State = 210;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 215;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 216;
				Match(DOT);
				State = 217;
				Match(MULT);
				}
			}

			}
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AS) {
				{
				State = 220;
				Match(KW_AS);
				State = 221;
				Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public HashSet<String> modifierSet = new HashSet<String>();
		public bool isEnum = false;
		public bool isInterface = false;
		public String className = null;
		public ClassModifierContext _classModifier;
		public IToken _IDENTIFIER;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(GroovyParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTERFACE() { return GetToken(GroovyParser.KW_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CLASS() { return GetToken(GroovyParser.KW_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRAIT() { return GetToken(GroovyParser.KW_TRAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENUM() { return GetToken(GroovyParser.KW_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsClauseContext implementsClause() {
			return GetRuleContext<ImplementsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext[] annotationClause() {
			return GetRuleContexts<AnnotationClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext annotationClause(int i) {
			return GetRuleContext<AnnotationClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericDeclarationListContext genericDeclarationList() {
			return GetRuleContext<GenericDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtendsClauseContext extendsClause() {
			return GetRuleContext<ExtendsClauseContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_classDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 229;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AT:
					{
					State = 224;
					annotationClause();
					}
					break;
				case VISIBILITY_MODIFIER:
				case KW_ABSTRACT:
				case KW_STATIC:
				case KW_FINAL:
				case KW_STRICTFP:
					{
					State = 225;
					_localctx._classModifier = classModifier();
					State = 226;
					if (!(!checkModifierDuplication(_localctx.modifierSet, (_localctx._classModifier!=null?TokenStream.GetText(_localctx._classModifier.Start,_localctx._classModifier.Stop):null)))) throw new FailedPredicateException(this, "!checkModifierDuplication($modifierSet, $classModifier.text)", createErrorMessageForStrictCheck(_localctx.modifierSet, (_localctx._classModifier!=null?TokenStream.GetText(_localctx._classModifier.Start,_localctx._classModifier.Stop):null)));
					collectModifier(_localctx.modifierSet, (_localctx._classModifier!=null?TokenStream.GetText(_localctx._classModifier.Start,_localctx._classModifier.Stop):null));
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 237;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NL:
							{
							State = 231;
							Match(NL);
							}
							break;
						case AT:
							{
							State = 232;
							annotationClause();
							}
							break;
						case VISIBILITY_MODIFIER:
						case KW_ABSTRACT:
						case KW_STATIC:
						case KW_FINAL:
						case KW_STRICTFP:
							{
							State = 233;
							_localctx._classModifier = classModifier();
							State = 234;
							if (!(!checkModifierDuplication(_localctx.modifierSet, (_localctx._classModifier!=null?TokenStream.GetText(_localctx._classModifier.Start,_localctx._classModifier.Stop):null)))) throw new FailedPredicateException(this, "!checkModifierDuplication($modifierSet, $classModifier.text)", createErrorMessageForStrictCheck(_localctx.modifierSet, (_localctx._classModifier!=null?TokenStream.GetText(_localctx._classModifier.Start,_localctx._classModifier.Stop):null)));
							collectModifier(_localctx.modifierSet, (_localctx._classModifier!=null?TokenStream.GetText(_localctx._classModifier.Start,_localctx._classModifier.Stop):null));
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 241;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				}
				break;
			}
			State = 252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				{
				State = 244;
				Match(AT);
				State = 245;
				Match(KW_INTERFACE);
				}
				break;
			case KW_CLASS:
				{
				State = 246;
				Match(KW_CLASS);
				}
				break;
			case KW_INTERFACE:
				{
				State = 247;
				Match(KW_INTERFACE);
				_localctx.isInterface = true;
				}
				break;
			case KW_TRAIT:
				{
				State = 249;
				Match(KW_TRAIT);
				}
				break;
			case KW_ENUM:
				{
				State = 250;
				Match(KW_ENUM);
				_localctx.isEnum = true;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 254;
			_localctx._IDENTIFIER = Match(IDENTIFIER);
			 _localctx.className =  (_localctx._IDENTIFIER!=null?_localctx._IDENTIFIER.Text:null); 
			State = 276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 256;
				if (!(!_localctx.isEnum)) throw new FailedPredicateException(this, "!$isEnum");
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 257;
					genericDeclarationList();
					}
				}

				State = 263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 260;
						Match(NL);
						}
						} 
					}
					State = 265;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_EXTENDS) {
					{
					State = 266;
					extendsClause(_localctx.isInterface);
					}
				}

				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 269;
						Match(NL);
						}
						} 
					}
					State = 274;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
				}
				}
				break;
			case 2:
				{
				}
				break;
			}
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IMPLEMENTS) {
				{
				State = 278;
				implementsClause();
				}
			}

			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 281;
				Match(NL);
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 287;
			classBody(_localctx.isEnum, _localctx.className);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberContext : ParserRuleContext {
		public String className;
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectInitializerContext objectInitializer() {
			return GetRuleContext<ObjectInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassInitializerContext classInitializer() {
			return GetRuleContext<ClassInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public ClassMemberContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ClassMemberContext(ParserRuleContext parent, int invokingState, String className)
			: base(parent, invokingState)
		{
			this.className = className;
		}
		public override int RuleIndex { get { return RULE_classMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClassMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClassMember(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberContext classMember(String className) {
		ClassMemberContext _localctx = new ClassMemberContext(Context, State, className);
		EnterRule(_localctx, 10, RULE_classMember);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289;
				methodDeclaration(_localctx.className);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				fieldDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 291;
				objectInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 292;
				classInitializer();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 293;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 12, RULE_enumConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(IDENTIFIER);
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 297;
				Match(LPAREN);
				State = 298;
				argumentList();
				State = 299;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public bool isEnum;
		public String className;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURVE() { return GetToken(GroovyParser.LCURVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURVE() { return GetToken(GroovyParser.RCURVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext[] classMember() {
			return GetRuleContexts<ClassMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext classMember(int i) {
			return GetRuleContext<ClassMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(GroovyParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(GroovyParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ClassBodyContext(ParserRuleContext parent, int invokingState, bool isEnum, String className)
			: base(parent, invokingState)
		{
			this.isEnum = isEnum;
			this.className = className;
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody(bool isEnum, String className) {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State, isEnum, className);
		EnterRule(_localctx, 14, RULE_classBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(LCURVE);
			State = 307;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 304;
					Match(NL);
					}
					} 
				}
				State = 309;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 310;
				if (!(_localctx.isEnum)) throw new FailedPredicateException(this, "$isEnum");
				State = 327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 311;
						enumConstant();
						State = 315;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 312;
							Match(NL);
							}
							}
							State = 317;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 318;
						Match(COMMA);
						State = 322;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 319;
							Match(NL);
							}
							}
							State = 324;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						} 
					}
					State = 329;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
				}
				State = 330;
				enumConstant();
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 331;
						Match(NL);
						}
						} 
					}
					State = 336;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				}
				State = 338;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 337;
					Match(COMMA);
					}
					break;
				}
				}
				break;
			case 2:
				{
				}
				break;
			}
			State = 350;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 348;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
					case 1:
						{
						State = 343;
						classMember(_localctx.className);
						State = 344;
						_la = TokenStream.LA(1);
						if ( !(_la==SEMICOLON || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 346;
						Match(NL);
						}
						break;
					case 3:
						{
						State = 347;
						Match(SEMICOLON);
						}
						break;
					}
					} 
				}
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 353;
				classMember(_localctx.className);
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMICOLON || _la==NL) {
					{
					{
					State = 354;
					_la = TokenStream.LA(1);
					if ( !(_la==SEMICOLON || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 359;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 362;
			Match(RCURVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPLEMENTS() { return GetToken(GroovyParser.KW_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext[] genericClassNameExpression() {
			return GetRuleContexts<GenericClassNameExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression(int i) {
			return GetRuleContext<GenericClassNameExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public ImplementsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterImplementsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitImplementsClause(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsClauseContext implementsClause() {
		ImplementsClauseContext _localctx = new ImplementsClauseContext(Context, State);
		EnterRule(_localctx, 16, RULE_implementsClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(KW_IMPLEMENTS);
			State = 368;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 365;
					Match(NL);
					}
					} 
				}
				State = 370;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			State = 371;
			genericClassNameExpression();
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 372;
				Match(COMMA);
				State = 376;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 373;
						Match(NL);
						}
						} 
					}
					State = 378;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				}
				State = 379;
				genericClassNameExpression();
				}
				}
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsClauseContext : ParserRuleContext {
		public bool isInterface;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTENDS() { return GetToken(GroovyParser.KW_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext[] genericClassNameExpression() {
			return GetRuleContexts<GenericClassNameExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression(int i) {
			return GetRuleContext<GenericClassNameExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public ExtendsClauseContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ExtendsClauseContext(ParserRuleContext parent, int invokingState, bool isInterface)
			: base(parent, invokingState)
		{
			this.isInterface = isInterface;
		}
		public override int RuleIndex { get { return RULE_extendsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitExtendsClause(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsClauseContext extendsClause(bool isInterface) {
		ExtendsClauseContext _localctx = new ExtendsClauseContext(Context, State, isInterface);
		EnterRule(_localctx, 18, RULE_extendsClause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(KW_EXTENDS);
			State = 389;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 386;
					Match(NL);
					}
					} 
				}
				State = 391;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 392;
			genericClassNameExpression();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 393;
				Match(COMMA);
				State = 397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 394;
						Match(NL);
						}
						} 
					}
					State = 399;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
				}
				State = 400;
				if (!(_localctx.isInterface)) throw new FailedPredicateException(this, "$isInterface", "Only interface allows multi-inheritance");
				State = 401;
				genericClassNameExpression();
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public String classNameParam;
		public HashSet<String> modifierAndDefSet = new HashSet<String>();
		public String className = null;
		public MemberModifierContext _memberModifier;
		public IToken _KW_DEF;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationListContext argumentDeclarationList() {
			return GetRuleContext<ArgumentDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GroovyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowsClauseContext throwsClause() {
			return GetRuleContext<ThrowsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFAULT() { return GetToken(GroovyParser.KW_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationParameterContext annotationParameter() {
			return GetRuleContext<AnnotationParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementWithCurveContext blockStatementWithCurve() {
			return GetRuleContext<BlockStatementWithCurveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifierContext[] memberModifier() {
			return GetRuleContexts<MemberModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifierContext memberModifier(int i) {
			return GetRuleContext<MemberModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext[] annotationClause() {
			return GetRuleContexts<AnnotationClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext annotationClause(int i) {
			return GetRuleContext<AnnotationClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_DEF() { return GetTokens(GroovyParser.KW_DEF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEF(int i) {
			return GetToken(GroovyParser.KW_DEF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericDeclarationListContext genericDeclarationList() {
			return GetRuleContext<GenericDeclarationListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState, String classNameParam)
			: base(parent, invokingState)
		{
			this.classNameParam = classNameParam;
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration(String classNameParam) {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State, classNameParam);
		EnterRule(_localctx, 20, RULE_methodDeclaration);

		    _localctx.className =  _localctx.classNameParam;

		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 415;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VISIBILITY_MODIFIER:
				case KW_ABSTRACT:
				case KW_STATIC:
				case KW_FINAL:
				case KW_TRANSIENT:
				case KW_NATIVE:
				case KW_VOLATILE:
				case KW_SYNCHRONIZED:
					{
					State = 407;
					_localctx._memberModifier = memberModifier();
					State = 408;
					if (!(!checkModifierDuplication(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null)))) throw new FailedPredicateException(this, "!checkModifierDuplication($modifierAndDefSet, $memberModifier.text)", createErrorMessageForStrictCheck(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null)));
					collectModifier(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null));
					}
					break;
				case AT:
					{
					State = 411;
					annotationClause();
					}
					break;
				case KW_DEF:
					{
					State = 412;
					_localctx._KW_DEF = Match(KW_DEF);
					State = 413;
					if (!(!_localctx.modifierAndDefSet.Contains((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null)))) throw new FailedPredicateException(this, "!$modifierAndDefSet.Contains($KW_DEF.text)", createErrorMessageForStrictCheck(_localctx.modifierAndDefSet, (_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null)));
					_localctx.modifierAndDefSet.Add((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null));
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 428;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 426;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case VISIBILITY_MODIFIER:
						case KW_ABSTRACT:
						case KW_STATIC:
						case KW_FINAL:
						case KW_TRANSIENT:
						case KW_NATIVE:
						case KW_VOLATILE:
						case KW_SYNCHRONIZED:
							{
							State = 417;
							_localctx._memberModifier = memberModifier();
							State = 418;
							if (!(!checkModifierDuplication(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null)))) throw new FailedPredicateException(this, "!checkModifierDuplication($modifierAndDefSet, $memberModifier.text)", createErrorMessageForStrictCheck(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null)));
							collectModifier(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null));
							}
							break;
						case AT:
							{
							State = 421;
							annotationClause();
							}
							break;
						case KW_DEF:
							{
							State = 422;
							_localctx._KW_DEF = Match(KW_DEF);
							State = 423;
							if (!(!_localctx.modifierAndDefSet.Contains((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null)))) throw new FailedPredicateException(this, "!$modifierAndDefSet.Contains($KW_DEF.text)", createErrorMessageForStrictCheck(_localctx.modifierAndDefSet, (_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null)));
							_localctx.modifierAndDefSet.Add((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null));
							}
							break;
						case NL:
							{
							State = 425;
							Match(NL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 430;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				}
				State = 435;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					{
					State = 431;
					genericDeclarationList();
					State = 432;
					genericClassNameExpression();
					}
					}
					break;
				case 2:
					{
					State = 434;
					typeDeclaration();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 437;
				genericClassNameExpression();
				}
				break;
			}
			State = 440;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 441;
			Match(LPAREN);
			State = 445;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 442;
					Match(NL);
					}
					} 
				}
				State = 447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			State = 448;
			argumentDeclarationList();
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 449;
				Match(NL);
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 455;
			Match(RPAREN);
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_THROWS) {
				{
				State = 456;
				throwsClause();
				}
			}

			State = 462;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_DEFAULT:
				{
				State = 459;
				Match(KW_DEFAULT);
				State = 460;
				annotationParameter();
				}
				break;
			case LCURVE:
				{
				State = 461;
				blockStatementWithCurve();
				}
				break;
			case Eof:
			case RCURVE:
			case SEMICOLON:
			case NL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public HashSet<String> modifierAndDefSet = new HashSet<String>();
		public MemberModifierContext _memberModifier;
		public IToken _KW_DEF;
		[System.Diagnostics.DebuggerNonUserCode] public SingleDeclarationContext[] singleDeclaration() {
			return GetRuleContexts<SingleDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleDeclarationContext singleDeclaration(int i) {
			return GetRuleContext<SingleDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifierContext[] memberModifier() {
			return GetRuleContexts<MemberModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberModifierContext memberModifier(int i) {
			return GetRuleContext<MemberModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext[] annotationClause() {
			return GetRuleContexts<AnnotationClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext annotationClause(int i) {
			return GetRuleContext<AnnotationClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_DEF() { return GetTokens(GroovyParser.KW_DEF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEF(int i) {
			return GetToken(GroovyParser.KW_DEF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_fieldDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 472;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VISIBILITY_MODIFIER:
				case KW_ABSTRACT:
				case KW_STATIC:
				case KW_FINAL:
				case KW_TRANSIENT:
				case KW_NATIVE:
				case KW_VOLATILE:
				case KW_SYNCHRONIZED:
					{
					State = 464;
					_localctx._memberModifier = memberModifier();
					State = 465;
					if (!(!checkModifierDuplication(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null)))) throw new FailedPredicateException(this, "!checkModifierDuplication($modifierAndDefSet, $memberModifier.text)", createErrorMessageForStrictCheck(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null)));
					collectModifier(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null));
					}
					break;
				case AT:
					{
					State = 468;
					annotationClause();
					}
					break;
				case KW_DEF:
					{
					State = 469;
					_localctx._KW_DEF = Match(KW_DEF);
					State = 470;
					if (!(!_localctx.modifierAndDefSet.Contains((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null)))) throw new FailedPredicateException(this, "!$modifierAndDefSet.Contains($KW_DEF.text)", createErrorMessageForStrictCheck(_localctx.modifierAndDefSet, (_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null)));
					_localctx.modifierAndDefSet.Add((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null));
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 485;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 483;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case VISIBILITY_MODIFIER:
						case KW_ABSTRACT:
						case KW_STATIC:
						case KW_FINAL:
						case KW_TRANSIENT:
						case KW_NATIVE:
						case KW_VOLATILE:
						case KW_SYNCHRONIZED:
							{
							State = 474;
							_localctx._memberModifier = memberModifier();
							State = 475;
							if (!(!checkModifierDuplication(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null)))) throw new FailedPredicateException(this, "!checkModifierDuplication($modifierAndDefSet, $memberModifier.text)", createErrorMessageForStrictCheck(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null)));
							collectModifier(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null));
							}
							break;
						case AT:
							{
							State = 478;
							annotationClause();
							}
							break;
						case KW_DEF:
							{
							State = 479;
							_localctx._KW_DEF = Match(KW_DEF);
							State = 480;
							if (!(!_localctx.modifierAndDefSet.Contains((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null)))) throw new FailedPredicateException(this, "!$modifierAndDefSet.Contains($KW_DEF.text)", createErrorMessageForStrictCheck(_localctx.modifierAndDefSet, (_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null)));
							_localctx.modifierAndDefSet.Add((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null));
							}
							break;
						case NL:
							{
							State = 482;
							Match(NL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 487;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
				}
				State = 489;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 488;
					genericClassNameExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 491;
				genericClassNameExpression();
				}
				break;
			}
			State = 494;
			singleDeclaration();
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 495;
				Match(COMMA);
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 496;
					Match(NL);
					}
					}
					State = 501;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 502;
				singleDeclaration();
				}
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEF() { return GetToken(GroovyParser.KW_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleDeclarationContext tupleDeclaration() {
			return GetRuleContext<TupleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext[] annotationClause() {
			return GetRuleContexts<AnnotationClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext annotationClause(int i) {
			return GetRuleContext<AnnotationClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FINAL() { return GetToken(GroovyParser.KW_FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public DeclarationRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterDeclarationRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitDeclarationRule(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationRuleContext declarationRule() {
		DeclarationRuleContext _localctx = new DeclarationRuleContext(Context, State);
		EnterRule(_localctx, 24, RULE_declarationRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 508;
				fieldDeclaration();
				}
				break;
			case 2:
				{
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 509;
					annotationClause();
					State = 513;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==NL) {
						{
						{
						State = 510;
						Match(NL);
						}
						}
						State = 515;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					State = 520;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_FINAL) {
					{
					State = 521;
					Match(KW_FINAL);
					}
				}

				State = 524;
				Match(KW_DEF);
				State = 525;
				tupleDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementWithCurveContext blockStatementWithCurve() {
			return GetRuleContext<BlockStatementWithCurveContext>(0);
		}
		public ObjectInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterObjectInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitObjectInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectInitializerContext objectInitializer() {
		ObjectInitializerContext _localctx = new ObjectInitializerContext(Context, State);
		EnterRule(_localctx, 26, RULE_objectInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			blockStatementWithCurve();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATIC() { return GetToken(GroovyParser.KW_STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementWithCurveContext blockStatementWithCurve() {
			return GetRuleContext<BlockStatementWithCurveContext>(0);
		}
		public ClassInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClassInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClassInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ClassInitializerContext classInitializer() {
		ClassInitializerContext _localctx = new ClassInitializerContext(Context, State);
		EnterRule(_localctx, 28, RULE_classInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			Match(KW_STATIC);
			State = 531;
			blockStatementWithCurve();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEF() { return GetToken(GroovyParser.KW_DEF, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 533;
				genericClassNameExpression();
				}
				break;
			case 2:
				{
				State = 534;
				Match(KW_DEF);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(GroovyParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationElementContext annotationElement() {
			return GetRuleContext<AnnotationElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationElementPairContext[] annotationElementPair() {
			return GetRuleContexts<AnnotationElementPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationElementPairContext annotationElementPair(int i) {
			return GetRuleContext<AnnotationElementPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public AnnotationClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationClause(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationClauseContext annotationClause() {
		AnnotationClauseContext _localctx = new AnnotationClauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_annotationClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(AT);
			State = 538;
			genericClassNameExpression();
			State = 552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 539;
				Match(LPAREN);
				State = 549;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					{
					State = 540;
					annotationElementPair();
					State = 545;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 541;
						Match(COMMA);
						State = 542;
						annotationElementPair();
						}
						}
						State = 547;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					}
					break;
				case 2:
					{
					State = 548;
					annotationElement();
					}
					break;
				}
				State = 551;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationElementPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GroovyParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationElementContext annotationElement() {
			return GetRuleContext<AnnotationElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public AnnotationElementPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationElementPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationElementPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationElementPair(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationElementPairContext annotationElementPair() {
		AnnotationElementPairContext _localctx = new AnnotationElementPairContext(Context, State);
		EnterRule(_localctx, 34, RULE_annotationElementPair);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(IDENTIFIER);
			State = 555;
			Match(ASSIGN);
			State = 559;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 556;
					Match(NL);
					}
					} 
				}
				State = 561;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			State = 562;
			annotationElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationParameterContext annotationParameter() {
			return GetRuleContext<AnnotationParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext annotationClause() {
			return GetRuleContext<AnnotationClauseContext>(0);
		}
		public AnnotationElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationElement(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationElementContext annotationElement() {
		AnnotationElementContext _localctx = new AnnotationElementContext(Context, State);
		EnterRule(_localctx, 36, RULE_annotationElement);
		try {
			State = 566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 564;
				annotationParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 565;
				annotationClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(GroovyParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericsDeclarationElementContext[] genericsDeclarationElement() {
			return GetRuleContexts<GenericsDeclarationElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericsDeclarationElementContext genericsDeclarationElement(int i) {
			return GetRuleContext<GenericsDeclarationElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(GroovyParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public GenericDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterGenericDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitGenericDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public GenericDeclarationListContext genericDeclarationList() {
		GenericDeclarationListContext _localctx = new GenericDeclarationListContext(Context, State);
		EnterRule(_localctx, 38, RULE_genericDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(LT);
			State = 569;
			genericsDeclarationElement();
			State = 574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 570;
				Match(COMMA);
				State = 571;
				genericsDeclarationElement();
				}
				}
				State = 576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 577;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericsDeclarationElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext[] genericClassNameExpression() {
			return GetRuleContexts<GenericClassNameExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression(int i) {
			return GetRuleContext<GenericClassNameExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTENDS() { return GetToken(GroovyParser.KW_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BAND() { return GetTokens(GroovyParser.BAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAND(int i) {
			return GetToken(GroovyParser.BAND, i);
		}
		public GenericsDeclarationElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericsDeclarationElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterGenericsDeclarationElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitGenericsDeclarationElement(this);
		}
	}

	[RuleVersion(0)]
	public GenericsDeclarationElementContext genericsDeclarationElement() {
		GenericsDeclarationElementContext _localctx = new GenericsDeclarationElementContext(Context, State);
		EnterRule(_localctx, 40, RULE_genericsDeclarationElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			genericClassNameExpression();
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_EXTENDS) {
				{
				State = 580;
				Match(KW_EXTENDS);
				State = 581;
				genericClassNameExpression();
				State = 586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BAND) {
					{
					{
					State = 582;
					Match(BAND);
					State = 583;
					genericClassNameExpression();
					}
					}
					State = 588;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THROWS() { return GetToken(GroovyParser.KW_THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameExpressionContext[] classNameExpression() {
			return GetRuleContexts<ClassNameExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameExpressionContext classNameExpression(int i) {
			return GetRuleContext<ClassNameExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public ThrowsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterThrowsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitThrowsClause(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsClauseContext throwsClause() {
		ThrowsClauseContext _localctx = new ThrowsClauseContext(Context, State);
		EnterRule(_localctx, 42, RULE_throwsClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(KW_THROWS);
			State = 592;
			classNameExpression();
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 593;
				Match(COMMA);
				State = 594;
				classNameExpression();
				}
				}
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationContext[] argumentDeclaration() {
			return GetRuleContexts<ArgumentDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationContext argumentDeclaration(int i) {
			return GetRuleContext<ArgumentDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public ArgumentDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterArgumentDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitArgumentDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDeclarationListContext argumentDeclarationList() {
		ArgumentDeclarationListContext _localctx = new ArgumentDeclarationListContext(Context, State);
		EnterRule(_localctx, 44, RULE_argumentDeclarationList);
		try {
			int _alt;
			State = 618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 610;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 600;
						argumentDeclaration();
						State = 601;
						Match(COMMA);
						State = 605;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 602;
								Match(NL);
								}
								} 
							}
							State = 607;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
						}
						}
						} 
					}
					State = 612;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
				}
				 enableEllipsis(); 
				State = 614;
				argumentDeclaration();
				 disableEllipsis(); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext[] annotationClause() {
			return GetRuleContexts<AnnotationClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationClauseContext annotationClause(int i) {
			return GetRuleContext<AnnotationClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FINAL() { return GetToken(GroovyParser.KW_FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GroovyParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public ArgumentDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterArgumentDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitArgumentDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentDeclarationContext argumentDeclaration() {
		ArgumentDeclarationContext _localctx = new ArgumentDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 620;
					annotationClause();
					}
					} 
				}
				State = 625;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			}
			State = 627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 626;
				Match(KW_FINAL);
				}
				break;
			}
			State = 630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 629;
				typeDeclaration();
				}
				break;
			}
			State = 632;
			Match(IDENTIFIER);
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 633;
				Match(ASSIGN);
				State = 637;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 634;
						Match(NL);
						}
						} 
					}
					State = 639;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
				}
				State = 640;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(GroovyParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(GroovyParser.SEMICOLON, i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 643;
						_la = TokenStream.LA(1);
						if ( !(_la==SEMICOLON || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 646;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 656;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 648;
						statement();
						State = 650;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 649;
								_la = TokenStream.LA(1);
								if ( !(_la==SEMICOLON || _la==NL) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 652;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						} 
					}
					State = 658;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
				}
				State = 660;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
				case 1:
					{
					State = 659;
					statement();
					}
					break;
				}
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMICOLON || _la==NL) {
					{
					{
					State = 662;
					_la = TokenStream.LA(1);
					if ( !(_la==SEMICOLON || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 667;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668;
				statement();
				State = 677;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 670;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 669;
								_la = TokenStream.LA(1);
								if ( !(_la==SEMICOLON || _la==NL) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 672;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 674;
						statement();
						}
						} 
					}
					State = 679;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
				}
				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMICOLON || _la==NL) {
					{
					{
					State = 680;
					_la = TokenStream.LA(1);
					if ( !(_la==SEMICOLON || _la==NL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 685;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GroovyParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public SingleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterSingleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitSingleDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SingleDeclarationContext singleDeclaration() {
		SingleDeclarationContext _localctx = new SingleDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_singleDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(IDENTIFIER);
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 689;
				Match(ASSIGN);
				State = 693;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 690;
						Match(NL);
						}
						} 
					}
					State = 695;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
				}
				State = 696;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleVariableDeclarationContext[] tupleVariableDeclaration() {
			return GetRuleContexts<TupleVariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleVariableDeclarationContext tupleVariableDeclaration(int i) {
			return GetRuleContext<TupleVariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GroovyParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public TupleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterTupleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitTupleDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TupleDeclarationContext tupleDeclaration() {
		TupleDeclarationContext _localctx = new TupleDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_tupleDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(LPAREN);
			State = 700;
			tupleVariableDeclaration();
			State = 705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 701;
				Match(COMMA);
				State = 702;
				tupleVariableDeclaration();
				}
				}
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 708;
			Match(RPAREN);
			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 709;
				Match(ASSIGN);
				State = 713;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 710;
						Match(NL);
						}
						} 
					}
					State = 715;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
				}
				State = 716;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		public TupleVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterTupleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitTupleVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TupleVariableDeclarationContext tupleVariableDeclaration() {
		TupleVariableDeclarationContext _localctx = new TupleVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_tupleVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 719;
				genericClassNameExpression();
				}
				break;
			}
			State = 722;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NEW() { return GetToken(GroovyParser.KW_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameExpressionContext classNameExpression() {
			return GetRuleContext<ClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(GroovyParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(GroovyParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewInstanceRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstanceRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterNewInstanceRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitNewInstanceRule(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceRuleContext newInstanceRule() {
		NewInstanceRuleContext _localctx = new NewInstanceRuleContext(Context, State);
		EnterRule(_localctx, 56, RULE_newInstanceRule);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			Match(KW_NEW);
			State = 731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 725;
				classNameExpression();
				State = 728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 726;
					Match(LT);
					State = 727;
					Match(GT);
					}
				}

				}
				break;
			case 2:
				{
				State = 730;
				genericClassNameExpression();
				}
				break;
			}
			{
			State = 733;
			Match(LPAREN);
			State = 737;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 734;
					Match(NL);
					}
					} 
				}
				State = 739;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
			}
			State = 741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 740;
				argumentList();
				}
				break;
			}
			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 743;
				Match(NL);
				}
				}
				State = 748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 749;
			Match(RPAREN);
			}
			State = 752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				{
				State = 751;
				classBody(false, null);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewArrayRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NEW() { return GetToken(GroovyParser.KW_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameExpressionContext classNameExpression() {
			return GetRuleContext<ClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(GroovyParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(GroovyParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(GroovyParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(GroovyParser.RBRACK, i);
		}
		public NewArrayRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newArrayRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterNewArrayRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitNewArrayRule(this);
		}
	}

	[RuleVersion(0)]
	public NewArrayRuleContext newArrayRule() {
		NewArrayRuleContext _localctx = new NewArrayRuleContext(Context, State);
		EnterRule(_localctx, 58, RULE_newArrayRule);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(KW_NEW);
			State = 755;
			classNameExpression();
			State = 760;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 756;
					Match(LBRACK);
					State = 757;
					expression(0);
					State = 758;
					Match(RBRACK);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 762;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewArrayStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewArrayRuleContext newArrayRule() {
			return GetRuleContext<NewArrayRuleContext>(0);
		}
		public NewArrayStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterNewArrayStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitNewArrayStatement(this);
		}
	}
	public partial class ThrowStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THROW() { return GetToken(GroovyParser.KW_THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}
	public partial class ForColonStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(GroovyParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GroovyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public ForColonStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterForColonStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitForColonStatement(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(GroovyParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE() { return GetToken(GroovyParser.KW_ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RETURN() { return GetToken(GroovyParser.KW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}
	public partial class SwitchStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SWITCH() { return GetToken(GroovyParser.KW_SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURVE() { return GetToken(GroovyParser.LCURVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURVE() { return GetToken(GroovyParser.RCURVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFAULT() { return GetToken(GroovyParser.KW_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GroovyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(GroovyParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(GroovyParser.SEMICOLON, i);
		}
		public SwitchStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}
	public partial class SynchronizedStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SYNCHRONIZED() { return GetToken(GroovyParser.KW_SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public SynchronizedStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterSynchronizedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitSynchronizedStatement(this);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationRuleContext declarationRule() {
			return GetRuleContext<DeclarationRuleContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHILE() { return GetToken(GroovyParser.KW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class ControlStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONTINUE() { return GetToken(GroovyParser.KW_CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BREAK() { return GetToken(GroovyParser.KW_BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		public ControlStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterControlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitControlStatement(this);
		}
	}
	public partial class NewInstanceStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceRuleContext newInstanceRule() {
			return GetRuleContext<NewInstanceRuleContext>(0);
		}
		public NewInstanceStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterNewInstanceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitNewInstanceStatement(this);
		}
	}
	public partial class AssertStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ASSERT() { return GetToken(GroovyParser.KW_ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GroovyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GroovyParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public AssertStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
	}
	public partial class TryCatchFinallyStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public TryBlockContext tryBlock() {
			return GetRuleContext<TryBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchBlockContext[] catchBlock() {
			return GetRuleContexts<CatchBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchBlockContext catchBlock(int i) {
			return GetRuleContext<CatchBlockContext>(i);
		}
		public TryCatchFinallyStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterTryCatchFinallyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitTryCatchFinallyStatement(this);
		}
	}
	public partial class LabeledStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GroovyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public LabeledStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
	}
	public partial class ClassicForStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(GroovyParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(GroovyParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(GroovyParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationRuleContext declarationRule() {
			return GetRuleContext<DeclarationRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public ClassicForStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClassicForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClassicForStatement(this);
		}
	}
	public partial class ForInStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(GroovyParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(GroovyParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public ForInStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitForInStatement(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 949;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 764;
				declarationRule();
				}
				break;
			case 2:
				_localctx = new NewArrayStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 765;
				newArrayRule();
				}
				break;
			case 3:
				_localctx = new NewInstanceStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 766;
				newInstanceRule();
				}
				break;
			case 4:
				_localctx = new ClassicForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 767;
				Match(KW_FOR);
				State = 768;
				Match(LPAREN);
				State = 771;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 769;
					declarationRule();
					}
					break;
				case 2:
					{
					State = 770;
					expression(0);
					}
					break;
				}
				State = 773;
				Match(SEMICOLON);
				State = 775;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 774;
					expression(0);
					}
					break;
				}
				State = 777;
				Match(SEMICOLON);
				State = 779;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 778;
					expression(0);
					}
					break;
				}
				State = 781;
				Match(RPAREN);
				State = 785;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 782;
						Match(NL);
						}
						} 
					}
					State = 787;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
				}
				State = 788;
				statementBlock();
				}
				break;
			case 5:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 789;
				Match(KW_FOR);
				State = 790;
				Match(LPAREN);
				State = 792;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
				case 1:
					{
					State = 791;
					typeDeclaration();
					}
					break;
				}
				State = 794;
				Match(IDENTIFIER);
				State = 795;
				Match(KW_IN);
				State = 796;
				expression(0);
				State = 797;
				Match(RPAREN);
				State = 801;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 798;
						Match(NL);
						}
						} 
					}
					State = 803;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
				}
				State = 804;
				statementBlock();
				}
				break;
			case 6:
				_localctx = new ForColonStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 806;
				Match(KW_FOR);
				State = 807;
				Match(LPAREN);
				State = 808;
				typeDeclaration();
				State = 809;
				Match(IDENTIFIER);
				State = 810;
				Match(COLON);
				State = 811;
				expression(0);
				State = 812;
				Match(RPAREN);
				State = 816;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 813;
						Match(NL);
						}
						} 
					}
					State = 818;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
				}
				State = 819;
				statementBlock();
				}
				break;
			case 7:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 821;
				Match(KW_IF);
				State = 822;
				Match(LPAREN);
				State = 823;
				expression(0);
				State = 824;
				Match(RPAREN);
				State = 828;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 825;
						Match(NL);
						}
						} 
					}
					State = 830;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
				}
				State = 831;
				statementBlock();
				State = 835;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 832;
						Match(NL);
						}
						} 
					}
					State = 837;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
				}
				State = 846;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
				case 1:
					{
					State = 838;
					Match(KW_ELSE);
					State = 842;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 839;
							Match(NL);
							}
							} 
						}
						State = 844;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
					}
					State = 845;
					statementBlock();
					}
					break;
				}
				}
				break;
			case 8:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 848;
				Match(KW_WHILE);
				State = 849;
				Match(LPAREN);
				State = 850;
				expression(0);
				State = 851;
				Match(RPAREN);
				State = 855;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 852;
						Match(NL);
						}
						} 
					}
					State = 857;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
				}
				State = 858;
				statementBlock();
				}
				break;
			case 9:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 860;
				Match(KW_SWITCH);
				State = 861;
				Match(LPAREN);
				State = 862;
				expression(0);
				State = 863;
				Match(RPAREN);
				State = 867;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 864;
					Match(NL);
					}
					}
					State = 869;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 870;
				Match(LCURVE);
				{
				State = 875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==KW_CASE || _la==NL) {
					{
					State = 873;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case KW_CASE:
						{
						State = 871;
						caseStatement();
						}
						break;
					case NL:
						{
						State = 872;
						Match(NL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 877;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_DEFAULT) {
					{
					State = 878;
					Match(KW_DEFAULT);
					State = 879;
					Match(COLON);
					State = 885;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							State = 885;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
							case 1:
								{
								State = 880;
								statement();
								State = 881;
								_la = TokenStream.LA(1);
								if ( !(_la==SEMICOLON || _la==NL) ) {
								ErrorHandler.RecoverInline(this);
								}
								else {
									ErrorHandler.ReportMatch(this);
								    Consume();
								}
								}
								break;
							case 2:
								{
								State = 883;
								Match(SEMICOLON);
								}
								break;
							case 3:
								{
								State = 884;
								Match(NL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 887;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
				}

				}
				State = 891;
				Match(RCURVE);
				}
				break;
			case 10:
				_localctx = new TryCatchFinallyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 893;
				tryBlock();
				State = 903;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_CATCH:
					{
					{
					State = 895;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 894;
						catchBlock();
						}
						}
						State = 897;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==KW_CATCH );
					State = 900;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==KW_FINALLY) {
						{
						State = 899;
						finallyBlock();
						}
					}

					}
					}
					break;
				case KW_FINALLY:
					{
					State = 902;
					finallyBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				_localctx = new ControlStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 905;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_CONTINUE || _la==KW_BREAK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 906;
					Match(IDENTIFIER);
					}
				}

				}
				break;
			case 12:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 909;
				Match(KW_RETURN);
				State = 911;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
				case 1:
					{
					State = 910;
					expression(0);
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 913;
				Match(KW_THROW);
				State = 914;
				expression(0);
				}
				break;
			case 14:
				_localctx = new AssertStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 915;
				Match(KW_ASSERT);
				State = 916;
				expression(0);
				State = 925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==COLON) {
					{
					State = 917;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==COLON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 921;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 918;
							Match(NL);
							}
							} 
						}
						State = 923;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
					}
					State = 924;
					expression(0);
					}
				}

				}
				break;
			case 15:
				_localctx = new SynchronizedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 927;
				Match(KW_SYNCHRONIZED);
				State = 928;
				Match(LPAREN);
				State = 929;
				expression(0);
				State = 930;
				Match(RPAREN);
				State = 934;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 931;
						Match(NL);
						}
						} 
					}
					State = 936;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
				}
				State = 937;
				statementBlock();
				}
				break;
			case 16:
				_localctx = new LabeledStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 939;
				Match(IDENTIFIER);
				State = 940;
				Match(COLON);
				State = 944;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 941;
						Match(NL);
						}
						} 
					}
					State = 946;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
				}
				State = 947;
				statementBlock();
				}
				break;
			case 17:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 948;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementWithCurveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURVE() { return GetToken(GroovyParser.LCURVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURVE() { return GetToken(GroovyParser.RCURVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public BlockStatementWithCurveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatementWithCurve; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterBlockStatementWithCurve(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitBlockStatementWithCurve(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementWithCurveContext blockStatementWithCurve() {
		BlockStatementWithCurveContext _localctx = new BlockStatementWithCurveContext(Context, State);
		EnterRule(_localctx, 62, RULE_blockStatementWithCurve);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 951;
			Match(LCURVE);
			State = 953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 952;
				blockStatement();
				}
				break;
			}
			State = 955;
			Match(RCURVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementWithCurveContext blockStatementWithCurve() {
			return GetRuleContext<BlockStatementWithCurveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_statementBlock);
		try {
			State = 959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 957;
				blockStatementWithCurve();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 958;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRY() { return GetToken(GroovyParser.KW_TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementWithCurveContext blockStatementWithCurve() {
			return GetRuleContext<BlockStatementWithCurveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public TryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterTryBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitTryBlock(this);
		}
	}

	[RuleVersion(0)]
	public TryBlockContext tryBlock() {
		TryBlockContext _localctx = new TryBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_tryBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			Match(KW_TRY);
			State = 965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 962;
				Match(NL);
				}
				}
				State = 967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 968;
			blockStatementWithCurve();
			State = 972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 969;
				Match(NL);
				}
				}
				State = 974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CATCH() { return GetToken(GroovyParser.KW_CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementWithCurveContext blockStatementWithCurve() {
			return GetRuleContext<BlockStatementWithCurveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameExpressionContext[] classNameExpression() {
			return GetRuleContexts<ClassNameExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameExpressionContext classNameExpression(int i) {
			return GetRuleContext<ClassNameExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOR() { return GetTokens(GroovyParser.BOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR(int i) {
			return GetToken(GroovyParser.BOR, i);
		}
		public CatchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterCatchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitCatchBlock(this);
		}
	}

	[RuleVersion(0)]
	public CatchBlockContext catchBlock() {
		CatchBlockContext _localctx = new CatchBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_catchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 975;
			Match(KW_CATCH);
			State = 979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 976;
				Match(NL);
				}
				}
				State = 981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 982;
			Match(LPAREN);
			State = 994;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				{
				State = 983;
				classNameExpression();
				State = 988;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BOR) {
					{
					{
					State = 984;
					Match(BOR);
					State = 985;
					classNameExpression();
					}
					}
					State = 990;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 991;
				Match(IDENTIFIER);
				}
				}
				break;
			case 2:
				{
				State = 993;
				Match(IDENTIFIER);
				}
				break;
			}
			State = 996;
			Match(RPAREN);
			State = 1000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 997;
				Match(NL);
				}
				}
				State = 1002;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1003;
			blockStatementWithCurve();
			State = 1007;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1004;
					Match(NL);
					}
					} 
				}
				State = 1009;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FINALLY() { return GetToken(GroovyParser.KW_FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementWithCurveContext blockStatementWithCurve() {
			return GetRuleContext<BlockStatementWithCurveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public FinallyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterFinallyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitFinallyBlock(this);
		}
	}

	[RuleVersion(0)]
	public FinallyBlockContext finallyBlock() {
		FinallyBlockContext _localctx = new FinallyBlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_finallyBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010;
			Match(KW_FINALLY);
			State = 1014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1011;
				Match(NL);
				}
				}
				State = 1016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1017;
			blockStatementWithCurve();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASE() { return GetToken(GroovyParser.KW_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GroovyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(GroovyParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(GroovyParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1019;
			Match(KW_CASE);
			State = 1020;
			expression(0);
			State = 1021;
			Match(COLON);
			State = 1029;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 1027;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
					case 1:
						{
						State = 1022;
						statement();
						State = 1023;
						_la = TokenStream.LA(1);
						if ( !(_la==SEMICOLON || _la==NL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 1025;
						Match(SEMICOLON);
						}
						break;
					case 3:
						{
						State = 1026;
						Match(NL);
						}
						break;
					}
					} 
				}
				State = 1031;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GroovyParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GroovyParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(GroovyParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(GroovyParser.DOT, i);
		}
		public PathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitPathExpression(this);
		}
	}

	[RuleVersion(0)]
	public PathExpressionContext pathExpression() {
		PathExpressionContext _localctx = new PathExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_pathExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1032;
					Match(IDENTIFIER);
					State = 1033;
					Match(DOT);
					}
					} 
				}
				State = 1038;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			}
			State = 1039;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GstringPathExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GSTRING_PATH_PART() { return GetTokens(GroovyParser.GSTRING_PATH_PART); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GSTRING_PATH_PART(int i) {
			return GetToken(GroovyParser.GSTRING_PATH_PART, i);
		}
		public GstringPathExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gstringPathExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterGstringPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitGstringPathExpression(this);
		}
	}

	[RuleVersion(0)]
	public GstringPathExpressionContext gstringPathExpression() {
		GstringPathExpressionContext _localctx = new GstringPathExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_gstringPathExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041;
			Match(IDENTIFIER);
			State = 1045;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==GSTRING_PATH_PART) {
				{
				{
				State = 1042;
				Match(GSTRING_PATH_PART);
				}
				}
				State = 1047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureExpressionRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURVE() { return GetToken(GroovyParser.LCURVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURVE() { return GetToken(GroovyParser.RCURVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentDeclarationListContext argumentDeclarationList() {
			return GetRuleContext<ArgumentDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSURE_ARG_SEPARATOR() { return GetToken(GroovyParser.CLOSURE_ARG_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public ClosureExpressionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureExpressionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClosureExpressionRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClosureExpressionRule(this);
		}
	}

	[RuleVersion(0)]
	public ClosureExpressionRuleContext closureExpressionRule() {
		ClosureExpressionRuleContext _localctx = new ClosureExpressionRuleContext(Context, State);
		EnterRule(_localctx, 78, RULE_closureExpressionRule);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			Match(LCURVE);
			State = 1052;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,154,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1049;
					Match(NL);
					}
					} 
				}
				State = 1054;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,154,Context);
			}
			State = 1069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				{
				State = 1055;
				argumentDeclarationList();
				State = 1059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1056;
					Match(NL);
					}
					}
					State = 1061;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1062;
				Match(CLOSURE_ARG_SEPARATOR);
				State = 1066;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1063;
						Match(NL);
						}
						} 
					}
					State = 1068;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
				}
				}
				break;
			}
			State = 1072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				{
				State = 1071;
				blockStatement();
				}
				break;
			}
			State = 1074;
			Match(RCURVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GstringExpressionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GstringPathExpressionContext gstringPathExpression() {
			return GetRuleContext<GstringPathExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURVE() { return GetToken(GroovyParser.LCURVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURVE() { return GetToken(GroovyParser.RCURVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClosureExpressionRuleContext closureExpressionRule() {
			return GetRuleContext<ClosureExpressionRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GstringExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gstringExpressionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterGstringExpressionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitGstringExpressionBody(this);
		}
	}

	[RuleVersion(0)]
	public GstringExpressionBodyContext gstringExpressionBody() {
		GstringExpressionBodyContext _localctx = new GstringExpressionBodyContext(Context, State);
		EnterRule(_localctx, 80, RULE_gstringExpressionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				{
				State = 1076;
				gstringPathExpression();
				}
				break;
			case 2:
				{
				State = 1077;
				Match(LCURVE);
				State = 1079;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
				case 1:
					{
					State = 1078;
					expression(0);
					}
					break;
				}
				State = 1081;
				Match(RCURVE);
				}
				break;
			case 3:
				{
				State = 1082;
				closureExpressionRule();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GSTRING_START() { return GetToken(GroovyParser.GSTRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GstringExpressionBodyContext[] gstringExpressionBody() {
			return GetRuleContexts<GstringExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GstringExpressionBodyContext gstringExpressionBody(int i) {
			return GetRuleContext<GstringExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GSTRING_END() { return GetToken(GroovyParser.GSTRING_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GSTRING_PART() { return GetTokens(GroovyParser.GSTRING_PART); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GSTRING_PART(int i) {
			return GetToken(GroovyParser.GSTRING_PART, i);
		}
		public GstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterGstring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitGstring(this);
		}
	}

	[RuleVersion(0)]
	public GstringContext gstring() {
		GstringContext _localctx = new GstringContext(Context, State);
		EnterRule(_localctx, 82, RULE_gstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1085;
			Match(GSTRING_START);
			State = 1086;
			gstringExpressionBody();
			State = 1091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==GSTRING_PART) {
				{
				{
				State = 1087;
				Match(GSTRING_PART);
				State = 1088;
				gstringExpressionBody();
				}
				}
				State = 1093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1094;
			Match(GSTRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationParameterContext : ParserRuleContext {
		public AnnotationParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationParameter; } }
	 
		public AnnotationParameterContext() { }
		public virtual void CopyFrom(AnnotationParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnnotationParamClassConstantExpressionContext : AnnotationParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassConstantRuleContext classConstantRule() {
			return GetRuleContext<ClassConstantRuleContext>(0);
		}
		public AnnotationParamClassConstantExpressionContext(AnnotationParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamClassConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamClassConstantExpression(this);
		}
	}
	public partial class AnnotationParamStringExpressionContext : AnnotationParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GroovyParser.STRING, 0); }
		public AnnotationParamStringExpressionContext(AnnotationParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamStringExpression(this);
		}
	}
	public partial class AnnotationParamNullExpressionContext : AnnotationParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULL() { return GetToken(GroovyParser.KW_NULL, 0); }
		public AnnotationParamNullExpressionContext(AnnotationParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamNullExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamNullExpression(this);
		}
	}
	public partial class AnnotationParamArrayExpressionContext : AnnotationParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(GroovyParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(GroovyParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationParameterContext[] annotationParameter() {
			return GetRuleContexts<AnnotationParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationParameterContext annotationParameter(int i) {
			return GetRuleContext<AnnotationParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public AnnotationParamArrayExpressionContext(AnnotationParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamArrayExpression(this);
		}
	}
	public partial class AnnotationParamBoolExpressionContext : AnnotationParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUE() { return GetToken(GroovyParser.KW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FALSE() { return GetToken(GroovyParser.KW_FALSE, 0); }
		public AnnotationParamBoolExpressionContext(AnnotationParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamBoolExpression(this);
		}
	}
	public partial class AnnotationParamIntegerExpressionContext : AnnotationParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(GroovyParser.INTEGER, 0); }
		public AnnotationParamIntegerExpressionContext(AnnotationParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamIntegerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamIntegerExpression(this);
		}
	}
	public partial class AnnotationParamClosureExpressionContext : AnnotationParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClosureExpressionRuleContext closureExpressionRule() {
			return GetRuleContext<ClosureExpressionRuleContext>(0);
		}
		public AnnotationParamClosureExpressionContext(AnnotationParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamClosureExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamClosureExpression(this);
		}
	}
	public partial class AnnotationParamPathExpressionContext : AnnotationParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathExpressionContext pathExpression() {
			return GetRuleContext<PathExpressionContext>(0);
		}
		public AnnotationParamPathExpressionContext(AnnotationParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamPathExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamPathExpression(this);
		}
	}
	public partial class AnnotationParamDecimalExpressionContext : AnnotationParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(GroovyParser.DECIMAL, 0); }
		public AnnotationParamDecimalExpressionContext(AnnotationParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamDecimalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamDecimalExpression(this);
		}
	}
	public partial class AnnotationParamClassExpressionContext : AnnotationParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		public AnnotationParamClassExpressionContext(AnnotationParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAnnotationParamClassExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAnnotationParamClassExpression(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationParameterContext annotationParameter() {
		AnnotationParameterContext _localctx = new AnnotationParameterContext(Context, State);
		EnterRule(_localctx, 84, RULE_annotationParameter);
		int _la;
		try {
			State = 1117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				_localctx = new AnnotationParamArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1096;
				Match(LBRACK);
				State = 1105;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
				case 1:
					{
					State = 1097;
					annotationParameter();
					State = 1102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1098;
						Match(COMMA);
						State = 1099;
						annotationParameter();
						}
						}
						State = 1104;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 1107;
				Match(RBRACK);
				}
				break;
			case 2:
				_localctx = new AnnotationParamClassConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1108;
				classConstantRule();
				}
				break;
			case 3:
				_localctx = new AnnotationParamPathExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1109;
				pathExpression();
				}
				break;
			case 4:
				_localctx = new AnnotationParamClassExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1110;
				genericClassNameExpression();
				}
				break;
			case 5:
				_localctx = new AnnotationParamStringExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1111;
				Match(STRING);
				}
				break;
			case 6:
				_localctx = new AnnotationParamDecimalExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1112;
				Match(DECIMAL);
				}
				break;
			case 7:
				_localctx = new AnnotationParamIntegerExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1113;
				Match(INTEGER);
				}
				break;
			case 8:
				_localctx = new AnnotationParamNullExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1114;
				Match(KW_NULL);
				}
				break;
			case 9:
				_localctx = new AnnotationParamBoolExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1115;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				_localctx = new AnnotationParamClosureExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1116;
				closureExpressionRule();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CmdExpressionContext : ExpressionContext {
		public NonKwCallExpressionRuleContext n;
		public IToken op;
		public CallExpressionRuleContext c;
		[System.Diagnostics.DebuggerNonUserCode] public NonKwCallExpressionRuleContext[] nonKwCallExpressionRule() {
			return GetRuleContexts<NonKwCallExpressionRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonKwCallExpressionRuleContext nonKwCallExpressionRule(int i) {
			return GetRuleContext<NonKwCallExpressionRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GroovyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GstringContext gstring() {
			return GetRuleContext<GstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallExpressionRuleContext callExpressionRule() {
			return GetRuleContext<CallExpressionRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GroovyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAFE_DOT() { return GetToken(GroovyParser.SAFE_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR_DOT() { return GetToken(GroovyParser.STAR_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericDeclarationListContext genericDeclarationList() {
			return GetRuleContext<GenericDeclarationListContext>(0);
		}
		public CmdExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterCmdExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitCmdExpression(this);
		}
	}
	public partial class SpreadExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(GroovyParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpreadExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterSpreadExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitSpreadExpression(this);
		}
	}
	public partial class ParenthesisExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		public ParenthesisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GroovyParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GroovyParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GroovyParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(GroovyParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(GroovyParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGN() { return GetToken(GroovyParser.MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(GroovyParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(GroovyParser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAND_ASSIGN() { return GetToken(GroovyParser.BAND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(GroovyParser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR_ASSIGN() { return GetToken(GroovyParser.BOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT_ASSIGN() { return GetToken(GroovyParser.LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT_ASSIGN() { return GetToken(GroovyParser.RSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUSHIFT_ASSIGN() { return GetToken(GroovyParser.RUSHIFT_ASSIGN, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class SuperExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUPER() { return GetToken(GroovyParser.KW_SUPER, 0); }
		public SuperExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
	}
	public partial class ConstructorCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THIS() { return GetToken(GroovyParser.KW_THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUPER() { return GetToken(GroovyParser.KW_SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterConstructorCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitConstructorCallExpression(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(GroovyParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(GroovyParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(GroovyParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(GroovyParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GroovyParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GroovyParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(GroovyParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORANGE() { return GetToken(GroovyParser.ORANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(GroovyParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(GroovyParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(GroovyParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(GroovyParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(GroovyParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(GroovyParser.LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(GroovyParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(GroovyParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNEQUAL() { return GetToken(GroovyParser.UNEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACESHIP() { return GetToken(GroovyParser.SPACESHIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIND() { return GetToken(GroovyParser.FIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(GroovyParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAND() { return GetToken(GroovyParser.BAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(GroovyParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOR() { return GetToken(GroovyParser.BOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(GroovyParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GroovyParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(GroovyParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INSTANCEOF() { return GetToken(GroovyParser.KW_INSTANCEOF, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallRuleContext callRule() {
			return GetRuleContext<CallRuleContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
	}
	public partial class PrefixExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(GroovyParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(GroovyParser.INCREMENT, 0); }
		public PrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterPrefixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitPrefixExpression(this);
		}
	}
	public partial class FieldAccessExpressionContext : ExpressionContext {
		public ExpressionContext e;
		public IToken op;
		public ExpressionContext mne;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GroovyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAFE_DOT() { return GetToken(GroovyParser.SAFE_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR_DOT() { return GetToken(GroovyParser.STAR_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTR_DOT() { return GetToken(GroovyParser.ATTR_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_POINTER() { return GetToken(GroovyParser.MEMBER_POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorNameContext selectorName() {
			return GetRuleContext<SelectorNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GroovyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GstringContext gstring() {
			return GetRuleContext<GstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public FieldAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterFieldAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitFieldAccessExpression(this);
		}
	}
	public partial class AtomExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomExpressionRuleContext atomExpressionRule() {
			return GetRuleContext<AtomExpressionRuleContext>(0);
		}
		public AtomExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterAtomExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitAtomExpression(this);
		}
	}
	public partial class ThisExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THIS() { return GetToken(GroovyParser.KW_THIS, 0); }
		public ThisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}
	public partial class IndexExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(GroovyParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(GroovyParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public IndexExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitIndexExpression(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(GroovyParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNOT() { return GetToken(GroovyParser.BNOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GroovyParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GroovyParser.MINUS, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(GroovyParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GroovyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELVIS() { return GetToken(GroovyParser.ELVIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class PostfixExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(GroovyParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(GroovyParser.INCREMENT, 0); }
		public PostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				{
				_localctx = new AtomExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1120;
				atomExpressionRule();
				}
				break;
			case 2:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1121;
				Match(KW_THIS);
				}
				break;
			case 3:
				{
				_localctx = new SuperExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1122;
				Match(KW_SUPER);
				}
				break;
			case 4:
				{
				_localctx = new ConstructorCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1123;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_SUPER || _la==KW_THIS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1124;
				Match(LPAREN);
				State = 1126;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
				case 1:
					{
					State = 1125;
					argumentList();
					}
					break;
				}
				State = 1128;
				Match(RPAREN);
				}
				break;
			case 5:
				{
				_localctx = new SpreadExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1129;
				Match(MULT);
				State = 1130;
				expression(29);
				}
				break;
			case 6:
				{
				_localctx = new CmdExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1131;
				((CmdExpressionContext)_localctx).n = nonKwCallExpressionRule();
				State = 1135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1132;
						nonKwCallExpressionRule();
						}
						} 
					}
					State = 1137;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,166,Context);
				}
				State = 1141;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
				case 1:
					{
					State = 1138;
					Match(IDENTIFIER);
					}
					break;
				case 2:
					{
					State = 1139;
					Match(STRING);
					}
					break;
				case 3:
					{
					State = 1140;
					gstring();
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new CallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1143;
				callRule();
				}
				break;
			case 8:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1144;
				Match(LPAREN);
				State = 1145;
				genericClassNameExpression();
				State = 1146;
				Match(RPAREN);
				State = 1147;
				expression(23);
				}
				break;
			case 9:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1149;
				Match(LPAREN);
				State = 1150;
				expression(0);
				State = 1151;
				Match(RPAREN);
				}
				break;
			case 10:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1153;
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==BNOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1154;
				expression(21);
				}
				break;
			case 11:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1155;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1156;
				expression(19);
				}
				break;
			case 12:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1157;
				_la = TokenStream.LA(1);
				if ( !(_la==DECREMENT || _la==INCREMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1158;
				expression(18);
				}
				break;
			case 13:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1159;
				Match(LPAREN);
				State = 1160;
				Match(IDENTIFIER);
				State = 1165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1161;
					Match(COMMA);
					State = 1162;
					Match(IDENTIFIER);
					}
					}
					State = 1167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1168;
				Match(RPAREN);
				State = 1169;
				Match(ASSIGN);
				State = 1173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1170;
						Match(NL);
						}
						} 
					}
					State = 1175;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
				}
				State = 1176;
				expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1438;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1436;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1179;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1180;
						Match(POWER);
						State = 1184;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1181;
								Match(NL);
								}
								} 
							}
							State = 1186;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
						}
						State = 1187;
						expression(21);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1188;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1189;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & 7L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1193;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1190;
								Match(NL);
								}
								} 
							}
							State = 1195;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
						}
						State = 1196;
						expression(18);
						}
						break;
					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1197;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1198;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1202;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1199;
								Match(NL);
								}
								} 
							}
							State = 1204;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
						}
						State = 1205;
						expression(17);
						}
						break;
					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1206;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1207;
						_la = TokenStream.LA(1);
						if ( !(_la==RANGE || _la==ORANGE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1211;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1208;
								Match(NL);
								}
								} 
							}
							State = 1213;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
						}
						State = 1214;
						expression(16);
						}
						break;
					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1215;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1222;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
						case 1:
							{
							State = 1216;
							Match(LSHIFT);
							}
							break;
						case 2:
							{
							State = 1217;
							Match(GT);
							State = 1218;
							Match(GT);
							}
							break;
						case 3:
							{
							State = 1219;
							Match(GT);
							State = 1220;
							Match(GT);
							State = 1221;
							Match(GT);
							}
							break;
						}
						State = 1227;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1224;
								Match(NL);
								}
								} 
							}
							State = 1229;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
						}
						State = 1230;
						expression(15);
						}
						break;
					case 6:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1231;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1232;
						Match(KW_IN);
						State = 1236;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1233;
								Match(NL);
								}
								} 
							}
							State = 1238;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
						}
						State = 1239;
						expression(14);
						}
						break;
					case 7:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1240;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1241;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 805306371L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1245;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1242;
								Match(NL);
								}
								} 
							}
							State = 1247;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
						}
						State = 1248;
						expression(12);
						}
						break;
					case 8:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1249;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1250;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 98305L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1254;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1251;
								Match(NL);
								}
								} 
							}
							State = 1256;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
						}
						State = 1257;
						expression(11);
						}
						break;
					case 9:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1258;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1259;
						_la = TokenStream.LA(1);
						if ( !(_la==MATCH || _la==FIND) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1263;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1260;
								Match(NL);
								}
								} 
							}
							State = 1265;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
						}
						State = 1266;
						expression(10);
						}
						break;
					case 10:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1267;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1268;
						Match(BAND);
						State = 1272;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1269;
								Match(NL);
								}
								} 
							}
							State = 1274;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
						}
						State = 1275;
						expression(9);
						}
						break;
					case 11:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1276;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1277;
						Match(XOR);
						State = 1281;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1278;
								Match(NL);
								}
								} 
							}
							State = 1283;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,182,Context);
						}
						State = 1284;
						expression(8);
						}
						break;
					case 12:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1285;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1286;
						Match(BOR);
						State = 1290;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1287;
								Match(NL);
								}
								} 
							}
							State = 1292;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
						}
						State = 1293;
						expression(7);
						}
						break;
					case 13:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1294;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1298;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 1295;
							Match(NL);
							}
							}
							State = 1300;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1301;
						Match(AND);
						State = 1305;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1302;
								Match(NL);
								}
								} 
							}
							State = 1307;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
						}
						State = 1308;
						expression(6);
						}
						break;
					case 14:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1309;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1313;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 1310;
							Match(NL);
							}
							}
							State = 1315;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1316;
						Match(OR);
						State = 1320;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,187,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1317;
								Match(NL);
								}
								} 
							}
							State = 1322;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,187,Context);
						}
						State = 1323;
						expression(5);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1324;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1328;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 1325;
							Match(NL);
							}
							}
							State = 1330;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1348;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case QUESTION:
							{
							State = 1331;
							Match(QUESTION);
							State = 1335;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
							while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
								if ( _alt==1 ) {
									{
									{
									State = 1332;
									Match(NL);
									}
									} 
								}
								State = 1337;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
							}
							State = 1338;
							expression(0);
							State = 1342;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==NL) {
								{
								{
								State = 1339;
								Match(NL);
								}
								}
								State = 1344;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 1345;
							Match(COLON);
							}
							break;
						case ELVIS:
							{
							State = 1347;
							Match(ELVIS);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 1353;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,192,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1350;
								Match(NL);
								}
								} 
							}
							State = 1355;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,192,Context);
						}
						State = 1356;
						expression(3);
						}
						break;
					case 16:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1357;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1358;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 72997666823L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1362;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1359;
								Match(NL);
								}
								} 
							}
							State = 1364;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
						}
						State = 1365;
						expression(2);
						}
						break;
					case 17:
						{
						_localctx = new FieldAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((FieldAccessExpressionContext)_localctx).e = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1366;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1370;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 1367;
							Match(NL);
							}
							}
							State = 1372;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1373;
						((FieldAccessExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 268435471L) != 0)) ) {
							((FieldAccessExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1381;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case KW_CLASS:
						case KW_INTERFACE:
						case KW_TRAIT:
						case KW_ENUM:
						case KW_PACKAGE:
						case KW_IMPORT:
						case KW_EXTENDS:
						case KW_IMPLEMENTS:
						case KW_DEF:
						case KW_NULL:
						case KW_TRUE:
						case KW_FALSE:
						case KW_NEW:
						case KW_SUPER:
						case KW_THIS:
						case KW_IN:
						case KW_FOR:
						case KW_IF:
						case KW_ELSE:
						case KW_DO:
						case KW_WHILE:
						case KW_SWITCH:
						case KW_CASE:
						case KW_DEFAULT:
						case KW_CONTINUE:
						case KW_BREAK:
						case KW_RETURN:
						case KW_TRY:
						case KW_CATCH:
						case KW_FINALLY:
						case KW_THROW:
						case KW_THROWS:
						case KW_ASSERT:
						case KW_CONST:
						case KW_GOTO:
						case KW_AS:
						case KW_INSTANCEOF:
						case BUILT_IN_TYPE:
						case VISIBILITY_MODIFIER:
						case KW_ABSTRACT:
						case KW_STATIC:
						case KW_FINAL:
						case KW_TRANSIENT:
						case KW_NATIVE:
						case KW_VOLATILE:
						case KW_SYNCHRONIZED:
						case KW_STRICTFP:
						case KW_THREADSAFE:
						case IDENTIFIER:
							{
							State = 1374;
							selectorName();
							}
							break;
						case STRING:
							{
							State = 1375;
							Match(STRING);
							}
							break;
						case GSTRING_START:
							{
							State = 1376;
							gstring();
							}
							break;
						case LPAREN:
							{
							State = 1377;
							Match(LPAREN);
							State = 1378;
							((FieldAccessExpressionContext)_localctx).mne = expression(0);
							State = 1379;
							Match(RPAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 18:
						{
						_localctx = new PostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1383;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1384;
						_la = TokenStream.LA(1);
						if ( !(_la==DECREMENT || _la==INCREMENT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 19:
						{
						_localctx = new IndexExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1385;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1386;
						Match(LBRACK);
						State = 1395;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
						case 1:
							{
							State = 1387;
							expression(0);
							State = 1392;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 1388;
								Match(COMMA);
								State = 1389;
								expression(0);
								}
								}
								State = 1394;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
							break;
						}
						State = 1397;
						Match(RBRACK);
						}
						break;
					case 20:
						{
						_localctx = new CmdExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1398;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1402;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 1399;
							Match(NL);
							}
							}
							State = 1404;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1405;
						((CmdExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 268435459L) != 0)) ) {
							((CmdExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1409;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,199,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1406;
								Match(NL);
								}
								} 
							}
							State = 1411;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,199,Context);
						}
						State = 1413;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
						case 1:
							{
							State = 1412;
							genericDeclarationList();
							}
							break;
						}
						State = 1415;
						((CmdExpressionContext)_localctx).c = callExpressionRule();
						State = 1419;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,201,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1416;
								nonKwCallExpressionRule();
								}
								} 
							}
							State = 1421;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,201,Context);
						}
						State = 1425;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
						case 1:
							{
							State = 1422;
							Match(IDENTIFIER);
							}
							break;
						case 2:
							{
							State = 1423;
							Match(STRING);
							}
							break;
						case 3:
							{
							State = 1424;
							gstring();
							}
							break;
						}
						}
						break;
					case 21:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1427;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1428;
						_la = TokenStream.LA(1);
						if ( !(_la==KW_AS || _la==KW_INSTANCEOF) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1432;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1429;
								Match(NL);
								}
								} 
							}
							State = 1434;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
						}
						State = 1435;
						genericClassNameExpression();
						}
						break;
					}
					} 
				}
				State = 1440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,205,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomExpressionRuleContext : ParserRuleContext {
		public AtomExpressionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomExpressionRule; } }
	 
		public AtomExpressionRuleContext() { }
		public virtual void CopyFrom(AtomExpressionRuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GstringExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GstringContext gstring() {
			return GetRuleContext<GstringContext>(0);
		}
		public GstringExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterGstringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitGstringExpression(this);
		}
	}
	public partial class ListConstructorContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(GroovyParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(GroovyParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public ListConstructorContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterListConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitListConstructor(this);
		}
	}
	public partial class ConstantExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GroovyParser.STRING, 0); }
		public ConstantExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
	}
	public partial class BoolExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUE() { return GetToken(GroovyParser.KW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FALSE() { return GetToken(GroovyParser.KW_FALSE, 0); }
		public BoolExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
	}
	public partial class ConstantDecimalExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(GroovyParser.DECIMAL, 0); }
		public ConstantDecimalExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterConstantDecimalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitConstantDecimalExpression(this);
		}
	}
	public partial class NewInstanceExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceRuleContext newInstanceRule() {
			return GetRuleContext<NewInstanceRuleContext>(0);
		}
		public NewInstanceExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitNewInstanceExpression(this);
		}
	}
	public partial class VariableExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		public VariableExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
	}
	public partial class ClassConstantExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassConstantRuleContext classConstantRule() {
			return GetRuleContext<ClassConstantRuleContext>(0);
		}
		public ClassConstantExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClassConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClassConstantExpression(this);
		}
	}
	public partial class NullExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULL() { return GetToken(GroovyParser.KW_NULL, 0); }
		public NullExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterNullExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitNullExpression(this);
		}
	}
	public partial class ClosureExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClosureExpressionRuleContext closureExpressionRule() {
			return GetRuleContext<ClosureExpressionRuleContext>(0);
		}
		public ClosureExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}
	public partial class MapConstructorContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(GroovyParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(GroovyParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GroovyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapEntryContext[] mapEntry() {
			return GetRuleContexts<MapEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapEntryContext mapEntry(int i) {
			return GetRuleContext<MapEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public MapConstructorContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterMapConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitMapConstructor(this);
		}
	}
	public partial class NewArrayExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewArrayRuleContext newArrayRule() {
			return GetRuleContext<NewArrayRuleContext>(0);
		}
		public NewArrayExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterNewArrayExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitNewArrayExpression(this);
		}
	}
	public partial class ConstantIntegerExpressionContext : AtomExpressionRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(GroovyParser.INTEGER, 0); }
		public ConstantIntegerExpressionContext(AtomExpressionRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterConstantIntegerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitConstantIntegerExpression(this);
		}
	}

	[RuleVersion(0)]
	public AtomExpressionRuleContext atomExpressionRule() {
		AtomExpressionRuleContext _localctx = new AtomExpressionRuleContext(Context, State);
		EnterRule(_localctx, 88, RULE_atomExpressionRule);
		int _la;
		try {
			int _alt;
			State = 1549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				_localctx = new ConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1441;
				Match(STRING);
				}
				break;
			case 2:
				_localctx = new GstringExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1442;
				gstring();
				}
				break;
			case 3:
				_localctx = new ConstantDecimalExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1443;
				Match(DECIMAL);
				}
				break;
			case 4:
				_localctx = new ConstantIntegerExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1444;
				Match(INTEGER);
				}
				break;
			case 5:
				_localctx = new NullExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1445;
				Match(KW_NULL);
				}
				break;
			case 6:
				_localctx = new BoolExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1446;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 7:
				_localctx = new VariableExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1447;
				Match(IDENTIFIER);
				}
				break;
			case 8:
				_localctx = new ClassConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1448;
				classConstantRule();
				}
				break;
			case 9:
				_localctx = new ClosureExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1449;
				closureExpressionRule();
				}
				break;
			case 10:
				_localctx = new ListConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1450;
				Match(LBRACK);
				State = 1454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1451;
						Match(NL);
						}
						} 
					}
					State = 1456;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,206,Context);
				}
				State = 1486;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
				case 1:
					{
					State = 1457;
					expression(0);
					State = 1480;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1461;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==NL) {
								{
								{
								State = 1458;
								Match(NL);
								}
								}
								State = 1463;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 1464;
							Match(COMMA);
							State = 1468;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
							while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
								if ( _alt==1 ) {
									{
									{
									State = 1465;
									Match(NL);
									}
									} 
								}
								State = 1470;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
							}
							State = 1471;
							expression(0);
							State = 1475;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,209,Context);
							while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
								if ( _alt==1 ) {
									{
									{
									State = 1472;
									Match(NL);
									}
									} 
								}
								State = 1477;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream,209,Context);
							}
							}
							} 
						}
						State = 1482;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
					}
					State = 1484;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1483;
						Match(COMMA);
						}
					}

					}
					break;
				}
				State = 1491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1488;
					Match(NL);
					}
					}
					State = 1493;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1494;
				Match(RBRACK);
				}
				break;
			case 11:
				_localctx = new MapConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1495;
				Match(LBRACK);
				State = 1499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1496;
					Match(NL);
					}
					}
					State = 1501;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1538;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COLON:
					{
					State = 1502;
					Match(COLON);
					State = 1506;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,215,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1503;
							Match(NL);
							}
							} 
						}
						State = 1508;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,215,Context);
					}
					}
					break;
				case LPAREN:
				case STRING:
				case GSTRING_START:
				case DECIMAL:
				case INTEGER:
				case KW_CLASS:
				case KW_INTERFACE:
				case KW_TRAIT:
				case KW_ENUM:
				case KW_PACKAGE:
				case KW_IMPORT:
				case KW_EXTENDS:
				case KW_IMPLEMENTS:
				case KW_DEF:
				case KW_NULL:
				case KW_TRUE:
				case KW_FALSE:
				case KW_NEW:
				case KW_SUPER:
				case KW_THIS:
				case KW_IN:
				case KW_FOR:
				case KW_IF:
				case KW_ELSE:
				case KW_DO:
				case KW_WHILE:
				case KW_SWITCH:
				case KW_CASE:
				case KW_DEFAULT:
				case KW_CONTINUE:
				case KW_BREAK:
				case KW_RETURN:
				case KW_TRY:
				case KW_CATCH:
				case KW_FINALLY:
				case KW_THROW:
				case KW_THROWS:
				case KW_ASSERT:
				case KW_CONST:
				case KW_GOTO:
				case MULT:
				case KW_AS:
				case KW_INSTANCEOF:
				case BUILT_IN_TYPE:
				case VISIBILITY_MODIFIER:
				case KW_ABSTRACT:
				case KW_STATIC:
				case KW_FINAL:
				case KW_TRANSIENT:
				case KW_NATIVE:
				case KW_VOLATILE:
				case KW_SYNCHRONIZED:
				case KW_STRICTFP:
				case KW_THREADSAFE:
				case IDENTIFIER:
					{
					{
					State = 1509;
					mapEntry();
					State = 1532;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,219,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1513;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==NL) {
								{
								{
								State = 1510;
								Match(NL);
								}
								}
								State = 1515;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 1516;
							Match(COMMA);
							State = 1520;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==NL) {
								{
								{
								State = 1517;
								Match(NL);
								}
								}
								State = 1522;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 1523;
							mapEntry();
							State = 1527;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,218,Context);
							while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
								if ( _alt==1 ) {
									{
									{
									State = 1524;
									Match(NL);
									}
									} 
								}
								State = 1529;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream,218,Context);
							}
							}
							} 
						}
						State = 1534;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,219,Context);
					}
					}
					State = 1536;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1535;
						Match(COMMA);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1540;
					Match(NL);
					}
					}
					State = 1545;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1546;
				Match(RBRACK);
				}
				break;
			case 12:
				_localctx = new NewArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1547;
				newArrayRule();
				}
				break;
			case 13:
				_localctx = new NewInstanceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1548;
				newInstanceRule();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassConstantRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameExpressionContext classNameExpression() {
			return GetRuleContext<ClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GroovyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CLASS() { return GetToken(GroovyParser.KW_CLASS, 0); }
		public ClassConstantRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classConstantRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClassConstantRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClassConstantRule(this);
		}
	}

	[RuleVersion(0)]
	public ClassConstantRuleContext classConstantRule() {
		ClassConstantRuleContext _localctx = new ClassConstantRuleContext(Context, State);
		EnterRule(_localctx, 90, RULE_classConstantRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1551;
			classNameExpression();
			State = 1554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				{
				State = 1552;
				Match(DOT);
				State = 1553;
				Match(KW_CLASS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosureExpressionRuleContext[] closureExpressionRule() {
			return GetRuleContexts<ClosureExpressionRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosureExpressionRuleContext closureExpressionRule(int i) {
			return GetRuleContext<ClosureExpressionRuleContext>(i);
		}
		public ArgumentListRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentListRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterArgumentListRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitArgumentListRule(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListRuleContext argumentListRule() {
		ArgumentListRuleContext _localctx = new ArgumentListRuleContext(Context, State);
		EnterRule(_localctx, 92, RULE_argumentListRule);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1556;
			Match(LPAREN);
			State = 1560;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1557;
					Match(NL);
					}
					} 
				}
				State = 1562;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			}
			State = 1564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,226,Context) ) {
			case 1:
				{
				State = 1563;
				argumentList();
				}
				break;
			}
			State = 1569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 1566;
				Match(NL);
				}
				}
				State = 1571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1572;
			Match(RPAREN);
			State = 1576;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,228,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1573;
					closureExpressionRule();
					}
					} 
				}
				State = 1578;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,228,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallExpressionRuleContext : ParserRuleContext {
		public ExpressionContext mne;
		[System.Diagnostics.DebuggerNonUserCode] public SelectorNameContext selectorName() {
			return GetRuleContext<SelectorNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GroovyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GstringContext gstring() {
			return GetRuleContext<GstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListRuleContext[] argumentListRule() {
			return GetRuleContexts<ArgumentListRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListRuleContext argumentListRule(int i) {
			return GetRuleContext<ArgumentListRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callExpressionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterCallExpressionRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitCallExpressionRule(this);
		}
	}

	[RuleVersion(0)]
	public CallExpressionRuleContext callExpressionRule() {
		CallExpressionRuleContext _localctx = new CallExpressionRuleContext(Context, State);
		EnterRule(_localctx, 94, RULE_callExpressionRule);
		try {
			int _alt;
			State = 1604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1586;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_CLASS:
				case KW_INTERFACE:
				case KW_TRAIT:
				case KW_ENUM:
				case KW_PACKAGE:
				case KW_IMPORT:
				case KW_EXTENDS:
				case KW_IMPLEMENTS:
				case KW_DEF:
				case KW_NULL:
				case KW_TRUE:
				case KW_FALSE:
				case KW_NEW:
				case KW_SUPER:
				case KW_THIS:
				case KW_IN:
				case KW_FOR:
				case KW_IF:
				case KW_ELSE:
				case KW_DO:
				case KW_WHILE:
				case KW_SWITCH:
				case KW_CASE:
				case KW_DEFAULT:
				case KW_CONTINUE:
				case KW_BREAK:
				case KW_RETURN:
				case KW_TRY:
				case KW_CATCH:
				case KW_FINALLY:
				case KW_THROW:
				case KW_THROWS:
				case KW_ASSERT:
				case KW_CONST:
				case KW_GOTO:
				case KW_AS:
				case KW_INSTANCEOF:
				case BUILT_IN_TYPE:
				case VISIBILITY_MODIFIER:
				case KW_ABSTRACT:
				case KW_STATIC:
				case KW_FINAL:
				case KW_TRANSIENT:
				case KW_NATIVE:
				case KW_VOLATILE:
				case KW_SYNCHRONIZED:
				case KW_STRICTFP:
				case KW_THREADSAFE:
				case IDENTIFIER:
					{
					State = 1579;
					selectorName();
					}
					break;
				case STRING:
					{
					State = 1580;
					Match(STRING);
					}
					break;
				case GSTRING_START:
					{
					State = 1581;
					gstring();
					}
					break;
				case LPAREN:
					{
					State = 1582;
					Match(LPAREN);
					State = 1583;
					_localctx.mne = expression(0);
					State = 1584;
					Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1589;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1588;
						argumentListRule();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1591;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,230,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1593;
				if (!( !GrammarPredicates.isFollowedByLPAREN(TokenStream) )) throw new FailedPredicateException(this, " !GrammarPredicates.isFollowedByLPAREN(InputStream) ");
				State = 1601;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_CLASS:
				case KW_INTERFACE:
				case KW_TRAIT:
				case KW_ENUM:
				case KW_PACKAGE:
				case KW_IMPORT:
				case KW_EXTENDS:
				case KW_IMPLEMENTS:
				case KW_DEF:
				case KW_NULL:
				case KW_TRUE:
				case KW_FALSE:
				case KW_NEW:
				case KW_SUPER:
				case KW_THIS:
				case KW_IN:
				case KW_FOR:
				case KW_IF:
				case KW_ELSE:
				case KW_DO:
				case KW_WHILE:
				case KW_SWITCH:
				case KW_CASE:
				case KW_DEFAULT:
				case KW_CONTINUE:
				case KW_BREAK:
				case KW_RETURN:
				case KW_TRY:
				case KW_CATCH:
				case KW_FINALLY:
				case KW_THROW:
				case KW_THROWS:
				case KW_ASSERT:
				case KW_CONST:
				case KW_GOTO:
				case KW_AS:
				case KW_INSTANCEOF:
				case BUILT_IN_TYPE:
				case VISIBILITY_MODIFIER:
				case KW_ABSTRACT:
				case KW_STATIC:
				case KW_FINAL:
				case KW_TRANSIENT:
				case KW_NATIVE:
				case KW_VOLATILE:
				case KW_SYNCHRONIZED:
				case KW_STRICTFP:
				case KW_THREADSAFE:
				case IDENTIFIER:
					{
					State = 1594;
					selectorName();
					}
					break;
				case STRING:
					{
					State = 1595;
					Match(STRING);
					}
					break;
				case GSTRING_START:
					{
					State = 1596;
					gstring();
					}
					break;
				case LPAREN:
					{
					State = 1597;
					Match(LPAREN);
					State = 1598;
					_localctx.mne = expression(0);
					State = 1599;
					Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1603;
				argumentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonKwCallExpressionRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GroovyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GstringContext gstring() {
			return GetRuleContext<GstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListRuleContext[] argumentListRule() {
			return GetRuleContexts<ArgumentListRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListRuleContext argumentListRule(int i) {
			return GetRuleContext<ArgumentListRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NonKwCallExpressionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonKwCallExpressionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterNonKwCallExpressionRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitNonKwCallExpressionRule(this);
		}
	}

	[RuleVersion(0)]
	public NonKwCallExpressionRuleContext nonKwCallExpressionRule() {
		NonKwCallExpressionRuleContext _localctx = new NonKwCallExpressionRuleContext(Context, State);
		EnterRule(_localctx, 96, RULE_nonKwCallExpressionRule);
		try {
			int _alt;
			State = 1623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1609;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 1606;
					Match(IDENTIFIER);
					}
					break;
				case STRING:
					{
					State = 1607;
					Match(STRING);
					}
					break;
				case GSTRING_START:
					{
					State = 1608;
					gstring();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1612;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1611;
						argumentListRule();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1614;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,234,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1616;
				if (!( !GrammarPredicates.isFollowedByLPAREN(TokenStream) )) throw new FailedPredicateException(this, " !GrammarPredicates.isFollowedByLPAREN(InputStream) ");
				State = 1620;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 1617;
					Match(IDENTIFIER);
					}
					break;
				case STRING:
					{
					State = 1618;
					Match(STRING);
					}
					break;
				case GSTRING_START:
					{
					State = 1619;
					gstring();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1622;
				argumentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallRuleContext : ParserRuleContext {
		public AtomExpressionRuleContext a;
		public ClosureExpressionRuleContext c;
		public ExpressionContext mne;
		[System.Diagnostics.DebuggerNonUserCode] public AtomExpressionRuleContext atomExpressionRule() {
			return GetRuleContext<AtomExpressionRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListRuleContext[] argumentListRule() {
			return GetRuleContexts<ArgumentListRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListRuleContext argumentListRule(int i) {
			return GetRuleContext<ArgumentListRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosureExpressionRuleContext closureExpressionRule() {
			return GetRuleContext<ClosureExpressionRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterCallRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitCallRule(this);
		}
	}

	[RuleVersion(0)]
	public CallRuleContext callRule() {
		CallRuleContext _localctx = new CallRuleContext(Context, State);
		EnterRule(_localctx, 98, RULE_callRule);
		try {
			int _alt;
			State = 1644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1625;
				_localctx.a = atomExpressionRule();
				State = 1627;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1626;
						argumentListRule();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1629;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,237,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1631;
				if (!( !GrammarPredicates.isFollowedByLPAREN(TokenStream) )) throw new FailedPredicateException(this, " !GrammarPredicates.isFollowedByLPAREN(InputStream) ");
				{
				State = 1632;
				_localctx.c = closureExpressionRule();
				}
				State = 1633;
				argumentList();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1635;
				if (!( !GrammarPredicates.isClassName(TokenStream, 2)     )) throw new FailedPredicateException(this, " !GrammarPredicates.isClassName(InputStream, 2)     ");
				State = 1636;
				Match(LPAREN);
				State = 1637;
				_localctx.mne = expression(0);
				State = 1638;
				Match(RPAREN);
				State = 1640;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1639;
						argumentListRule();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1642;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,238,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILT_IN_TYPE() { return GetToken(GroovyParser.BUILT_IN_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PathExpressionContext pathExpression() {
			return GetRuleContext<PathExpressionContext>(0);
		}
		public ClassNameExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classNameExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClassNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClassNameExpression(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameExpressionContext classNameExpression() {
		ClassNameExpressionContext _localctx = new ClassNameExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_classNameExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646;
			if (!( GrammarPredicates.isClassName(TokenStream) )) throw new FailedPredicateException(this, " GrammarPredicates.isClassName(InputStream) ");
			State = 1649;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BUILT_IN_TYPE:
				{
				State = 1647;
				Match(BUILT_IN_TYPE);
				}
				break;
			case IDENTIFIER:
				{
				State = 1648;
				pathExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericClassNameExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameExpressionContext classNameExpression() {
			return GetRuleContext<ClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericListContext genericList() {
			return GetRuleContext<GenericListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(GroovyParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(GroovyParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(GroovyParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(GroovyParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(GroovyParser.ELLIPSIS, 0); }
		public GenericClassNameExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericClassNameExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterGenericClassNameExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitGenericClassNameExpression(this);
		}
	}

	[RuleVersion(0)]
	public GenericClassNameExpressionContext genericClassNameExpression() {
		GenericClassNameExpressionContext _localctx = new GenericClassNameExpressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_genericClassNameExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1651;
			classNameExpression();
			State = 1653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 1652;
				genericList();
				}
				break;
			}
			State = 1659;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1655;
					Match(LBRACK);
					State = 1656;
					Match(RBRACK);
					}
					} 
				}
				State = 1661;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			}
			State = 1664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				{
				State = 1662;
				Match(ELLIPSIS);
				State = 1663;
				if (!( isEllipsisEnabled() )) throw new FailedPredicateException(this, " isEllipsisEnabled() ",  "The var-arg only be allowed to appear as the last parameter" );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(GroovyParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericListElementContext[] genericListElement() {
			return GetRuleContexts<GenericListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericListElementContext genericListElement(int i) {
			return GetRuleContext<GenericListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(GroovyParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		public GenericListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterGenericList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitGenericList(this);
		}
	}

	[RuleVersion(0)]
	public GenericListContext genericList() {
		GenericListContext _localctx = new GenericListContext(Context, State);
		EnterRule(_localctx, 104, RULE_genericList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1666;
			Match(LT);
			State = 1667;
			genericListElement();
			State = 1672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1668;
				Match(COMMA);
				State = 1669;
				genericListElement();
				}
				}
				State = 1674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1675;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericListElementContext : ParserRuleContext {
		public GenericListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericListElement; } }
	 
		public GenericListElementContext() { }
		public virtual void CopyFrom(GenericListElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GenericsWildcardElementContext : GenericListElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(GroovyParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTENDS() { return GetToken(GroovyParser.KW_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUPER() { return GetToken(GroovyParser.KW_SUPER, 0); }
		public GenericsWildcardElementContext(GenericListElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterGenericsWildcardElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitGenericsWildcardElement(this);
		}
	}
	public partial class GenericsConcreteElementContext : GenericListElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericClassNameExpressionContext genericClassNameExpression() {
			return GetRuleContext<GenericClassNameExpressionContext>(0);
		}
		public GenericsConcreteElementContext(GenericListElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterGenericsConcreteElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitGenericsConcreteElement(this);
		}
	}

	[RuleVersion(0)]
	public GenericListElementContext genericListElement() {
		GenericListElementContext _localctx = new GenericListElementContext(Context, State);
		EnterRule(_localctx, 106, RULE_genericListElement);
		try {
			State = 1685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
			case 1:
				_localctx = new GenericsConcreteElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1677;
				genericClassNameExpression();
				}
				break;
			case 2:
				_localctx = new GenericsWildcardElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1678;
				Match(QUESTION);
				State = 1683;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_EXTENDS:
					{
					State = 1679;
					Match(KW_EXTENDS);
					State = 1680;
					genericClassNameExpression();
					}
					break;
				case KW_SUPER:
					{
					State = 1681;
					Match(KW_SUPER);
					State = 1682;
					genericClassNameExpression();
					}
					break;
				case COMMA:
				case GT:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GroovyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GroovyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GstringContext gstring() {
			return GetRuleContext<GstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectorNameContext selectorName() {
			return GetRuleContext<SelectorNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GroovyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GroovyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(GroovyParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(GroovyParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(GroovyParser.INTEGER, 0); }
		public MapEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterMapEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitMapEntry(this);
		}
	}

	[RuleVersion(0)]
	public MapEntryContext mapEntry() {
		MapEntryContext _localctx = new MapEntryContext(Context, State);
		EnterRule(_localctx, 108, RULE_mapEntry);
		try {
			State = 1713;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1687;
				Match(STRING);
				State = 1688;
				Match(COLON);
				State = 1689;
				expression(0);
				}
				break;
			case GSTRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1690;
				gstring();
				State = 1691;
				Match(COLON);
				State = 1692;
				expression(0);
				}
				break;
			case KW_CLASS:
			case KW_INTERFACE:
			case KW_TRAIT:
			case KW_ENUM:
			case KW_PACKAGE:
			case KW_IMPORT:
			case KW_EXTENDS:
			case KW_IMPLEMENTS:
			case KW_DEF:
			case KW_NULL:
			case KW_TRUE:
			case KW_FALSE:
			case KW_NEW:
			case KW_SUPER:
			case KW_THIS:
			case KW_IN:
			case KW_FOR:
			case KW_IF:
			case KW_ELSE:
			case KW_DO:
			case KW_WHILE:
			case KW_SWITCH:
			case KW_CASE:
			case KW_DEFAULT:
			case KW_CONTINUE:
			case KW_BREAK:
			case KW_RETURN:
			case KW_TRY:
			case KW_CATCH:
			case KW_FINALLY:
			case KW_THROW:
			case KW_THROWS:
			case KW_ASSERT:
			case KW_CONST:
			case KW_GOTO:
			case KW_AS:
			case KW_INSTANCEOF:
			case BUILT_IN_TYPE:
			case VISIBILITY_MODIFIER:
			case KW_ABSTRACT:
			case KW_STATIC:
			case KW_FINAL:
			case KW_TRANSIENT:
			case KW_NATIVE:
			case KW_VOLATILE:
			case KW_SYNCHRONIZED:
			case KW_STRICTFP:
			case KW_THREADSAFE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1694;
				selectorName();
				State = 1695;
				Match(COLON);
				State = 1696;
				expression(0);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1698;
				Match(LPAREN);
				State = 1699;
				expression(0);
				State = 1700;
				Match(RPAREN);
				State = 1701;
				Match(COLON);
				State = 1702;
				expression(0);
				}
				break;
			case MULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1704;
				Match(MULT);
				State = 1705;
				Match(COLON);
				State = 1706;
				expression(0);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1707;
				Match(DECIMAL);
				State = 1708;
				Match(COLON);
				State = 1709;
				expression(0);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1710;
				Match(INTEGER);
				State = 1711;
				Match(COLON);
				State = 1712;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBILITY_MODIFIER() { return GetToken(GroovyParser.VISIBILITY_MODIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATIC() { return GetToken(GroovyParser.KW_STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABSTRACT() { return GetToken(GroovyParser.KW_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FINAL() { return GetToken(GroovyParser.KW_FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRICTFP() { return GetToken(GroovyParser.KW_STRICTFP, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 110, RULE_classModifier);
		int _la;
		try {
			State = 1719;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VISIBILITY_MODIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1715;
				Match(VISIBILITY_MODIFIER);
				}
				break;
			case KW_STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1716;
				Match(KW_STATIC);
				}
				break;
			case KW_ABSTRACT:
			case KW_FINAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1717;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_ABSTRACT || _la==KW_FINAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case KW_STRICTFP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1718;
				Match(KW_STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBILITY_MODIFIER() { return GetToken(GroovyParser.VISIBILITY_MODIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATIC() { return GetToken(GroovyParser.KW_STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABSTRACT() { return GetToken(GroovyParser.KW_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FINAL() { return GetToken(GroovyParser.KW_FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NATIVE() { return GetToken(GroovyParser.KW_NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SYNCHRONIZED() { return GetToken(GroovyParser.KW_SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRANSIENT() { return GetToken(GroovyParser.KW_TRANSIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VOLATILE() { return GetToken(GroovyParser.KW_VOLATILE, 0); }
		public MemberModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterMemberModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitMemberModifier(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifierContext memberModifier() {
		MemberModifierContext _localctx = new MemberModifierContext(Context, State);
		EnterRule(_localctx, 112, RULE_memberModifier);
		int _la;
		try {
			State = 1728;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VISIBILITY_MODIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1721;
				Match(VISIBILITY_MODIFIER);
				}
				break;
			case KW_STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1722;
				Match(KW_STATIC);
				}
				break;
			case KW_ABSTRACT:
			case KW_FINAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1723;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_ABSTRACT || _la==KW_FINAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case KW_NATIVE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1724;
				Match(KW_NATIVE);
				}
				break;
			case KW_SYNCHRONIZED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1725;
				Match(KW_SYNCHRONIZED);
				}
				break;
			case KW_TRANSIENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1726;
				Match(KW_TRANSIENT);
				}
				break;
			case KW_VOLATILE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1727;
				Match(KW_VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosureExpressionRuleContext[] closureExpressionRule() {
			return GetRuleContexts<ClosureExpressionRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosureExpressionRuleContext closureExpressionRule(int i) {
			return GetRuleContext<ClosureExpressionRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GroovyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GroovyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(GroovyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(GroovyParser.NL, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 114, RULE_argumentList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				{
				State = 1731;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1730;
						closureExpressionRule();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1733;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 1735;
				argument();
				State = 1752;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1739;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NL) {
							{
							{
							State = 1736;
							Match(NL);
							}
							}
							State = 1741;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1742;
						Match(COMMA);
						State = 1746;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 1743;
								Match(NL);
								}
								} 
							}
							State = 1748;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
						}
						State = 1749;
						argument();
						}
						} 
					}
					State = 1754;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapEntryContext mapEntry() {
			return GetRuleContext<MapEntryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 116, RULE_argument);
		try {
			State = 1759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1757;
				mapEntry();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1758;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GroovyParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KwSelectorNameContext kwSelectorName() {
			return GetRuleContext<KwSelectorNameContext>(0);
		}
		public SelectorNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterSelectorName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitSelectorName(this);
		}
	}

	[RuleVersion(0)]
	public SelectorNameContext selectorName() {
		SelectorNameContext _localctx = new SelectorNameContext(Context, State);
		EnterRule(_localctx, 118, RULE_selectorName);
		try {
			State = 1763;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1761;
				Match(IDENTIFIER);
				}
				break;
			case KW_CLASS:
			case KW_INTERFACE:
			case KW_TRAIT:
			case KW_ENUM:
			case KW_PACKAGE:
			case KW_IMPORT:
			case KW_EXTENDS:
			case KW_IMPLEMENTS:
			case KW_DEF:
			case KW_NULL:
			case KW_TRUE:
			case KW_FALSE:
			case KW_NEW:
			case KW_SUPER:
			case KW_THIS:
			case KW_IN:
			case KW_FOR:
			case KW_IF:
			case KW_ELSE:
			case KW_DO:
			case KW_WHILE:
			case KW_SWITCH:
			case KW_CASE:
			case KW_DEFAULT:
			case KW_CONTINUE:
			case KW_BREAK:
			case KW_RETURN:
			case KW_TRY:
			case KW_CATCH:
			case KW_FINALLY:
			case KW_THROW:
			case KW_THROWS:
			case KW_ASSERT:
			case KW_CONST:
			case KW_GOTO:
			case KW_AS:
			case KW_INSTANCEOF:
			case BUILT_IN_TYPE:
			case VISIBILITY_MODIFIER:
			case KW_ABSTRACT:
			case KW_STATIC:
			case KW_FINAL:
			case KW_TRANSIENT:
			case KW_NATIVE:
			case KW_VOLATILE:
			case KW_SYNCHRONIZED:
			case KW_STRICTFP:
			case KW_THREADSAFE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1762;
				kwSelectorName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwSelectorNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABSTRACT() { return GetToken(GroovyParser.KW_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(GroovyParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ASSERT() { return GetToken(GroovyParser.KW_ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BREAK() { return GetToken(GroovyParser.KW_BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASE() { return GetToken(GroovyParser.KW_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CATCH() { return GetToken(GroovyParser.KW_CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CLASS() { return GetToken(GroovyParser.KW_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONST() { return GetToken(GroovyParser.KW_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONTINUE() { return GetToken(GroovyParser.KW_CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEF() { return GetToken(GroovyParser.KW_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFAULT() { return GetToken(GroovyParser.KW_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DO() { return GetToken(GroovyParser.KW_DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE() { return GetToken(GroovyParser.KW_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENUM() { return GetToken(GroovyParser.KW_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTENDS() { return GetToken(GroovyParser.KW_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FALSE() { return GetToken(GroovyParser.KW_FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FINAL() { return GetToken(GroovyParser.KW_FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FINALLY() { return GetToken(GroovyParser.KW_FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(GroovyParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GOTO() { return GetToken(GroovyParser.KW_GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(GroovyParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPLEMENTS() { return GetToken(GroovyParser.KW_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPORT() { return GetToken(GroovyParser.KW_IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(GroovyParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INSTANCEOF() { return GetToken(GroovyParser.KW_INSTANCEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTERFACE() { return GetToken(GroovyParser.KW_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NATIVE() { return GetToken(GroovyParser.KW_NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NEW() { return GetToken(GroovyParser.KW_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULL() { return GetToken(GroovyParser.KW_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PACKAGE() { return GetToken(GroovyParser.KW_PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RETURN() { return GetToken(GroovyParser.KW_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATIC() { return GetToken(GroovyParser.KW_STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRICTFP() { return GetToken(GroovyParser.KW_STRICTFP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUPER() { return GetToken(GroovyParser.KW_SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SWITCH() { return GetToken(GroovyParser.KW_SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SYNCHRONIZED() { return GetToken(GroovyParser.KW_SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THIS() { return GetToken(GroovyParser.KW_THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THREADSAFE() { return GetToken(GroovyParser.KW_THREADSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THROW() { return GetToken(GroovyParser.KW_THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THROWS() { return GetToken(GroovyParser.KW_THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRANSIENT() { return GetToken(GroovyParser.KW_TRANSIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRAIT() { return GetToken(GroovyParser.KW_TRAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUE() { return GetToken(GroovyParser.KW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRY() { return GetToken(GroovyParser.KW_TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VOLATILE() { return GetToken(GroovyParser.KW_VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHILE() { return GetToken(GroovyParser.KW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUILT_IN_TYPE() { return GetToken(GroovyParser.BUILT_IN_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBILITY_MODIFIER() { return GetToken(GroovyParser.VISIBILITY_MODIFIER, 0); }
		public KwSelectorNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwSelectorName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.EnterKwSelectorName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGroovyParserListener typedListener = listener as IGroovyParserListener;
			if (typedListener != null) typedListener.ExitKwSelectorName(this);
		}
	}

	[RuleVersion(0)]
	public KwSelectorNameContext kwSelectorName() {
		KwSelectorNameContext _localctx = new KwSelectorNameContext(Context, State);
		EnterRule(_localctx, 120, RULE_kwSelectorName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4503599627239424L) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & 8191L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return scriptPart_sempred((ScriptPartContext)_localctx, predIndex);
		case 4: return classDeclaration_sempred((ClassDeclarationContext)_localctx, predIndex);
		case 7: return classBody_sempred((ClassBodyContext)_localctx, predIndex);
		case 9: return extendsClause_sempred((ExtendsClauseContext)_localctx, predIndex);
		case 10: return methodDeclaration_sempred((MethodDeclarationContext)_localctx, predIndex);
		case 11: return fieldDeclaration_sempred((FieldDeclarationContext)_localctx, predIndex);
		case 43: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 47: return callExpressionRule_sempred((CallExpressionRuleContext)_localctx, predIndex);
		case 48: return nonKwCallExpressionRule_sempred((NonKwCallExpressionRuleContext)_localctx, predIndex);
		case 49: return callRule_sempred((CallRuleContext)_localctx, predIndex);
		case 50: return classNameExpression_sempred((ClassNameExpressionContext)_localctx, predIndex);
		case 51: return genericClassNameExpression_sempred((GenericClassNameExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool scriptPart_sempred(ScriptPartContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  !GrammarPredicates.isInvalidMethodDeclaration(TokenStream) ;
		}
		return true;
	}
	private bool classDeclaration_sempred(ClassDeclarationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return !checkModifierDuplication(_localctx.modifierSet, (_localctx._classModifier!=null?TokenStream.GetText(_localctx._classModifier.Start,_localctx._classModifier.Stop):null));
		case 2: return !checkModifierDuplication(_localctx.modifierSet, (_localctx._classModifier!=null?TokenStream.GetText(_localctx._classModifier.Start,_localctx._classModifier.Stop):null));
		case 3: return !_localctx.isEnum;
		}
		return true;
	}
	private bool classBody_sempred(ClassBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return _localctx.isEnum;
		}
		return true;
	}
	private bool extendsClause_sempred(ExtendsClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return _localctx.isInterface;
		}
		return true;
	}
	private bool methodDeclaration_sempred(MethodDeclarationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return !checkModifierDuplication(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null));
		case 7: return !_localctx.modifierAndDefSet.Contains((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null));
		case 8: return !checkModifierDuplication(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null));
		case 9: return !_localctx.modifierAndDefSet.Contains((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null));
		}
		return true;
	}
	private bool fieldDeclaration_sempred(FieldDeclarationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return !checkModifierDuplication(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null));
		case 11: return !_localctx.modifierAndDefSet.Contains((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null));
		case 12: return !checkModifierDuplication(_localctx.modifierAndDefSet, (_localctx._memberModifier!=null?TokenStream.GetText(_localctx._memberModifier.Start,_localctx._memberModifier.Stop):null));
		case 13: return !_localctx.modifierAndDefSet.Contains((_localctx._KW_DEF!=null?_localctx._KW_DEF.Text:null));
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 20);
		case 15: return Precpred(Context, 17);
		case 16: return Precpred(Context, 16);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 14);
		case 19: return Precpred(Context, 13);
		case 20: return Precpred(Context, 11);
		case 21: return Precpred(Context, 10);
		case 22: return Precpred(Context, 9);
		case 23: return Precpred(Context, 8);
		case 24: return Precpred(Context, 7);
		case 25: return Precpred(Context, 6);
		case 26: return Precpred(Context, 5);
		case 27: return Precpred(Context, 4);
		case 28: return Precpred(Context, 3);
		case 29: return Precpred(Context, 2);
		case 30: return Precpred(Context, 30);
		case 31: return Precpred(Context, 28);
		case 32: return Precpred(Context, 27);
		case 33: return Precpred(Context, 26);
		case 34: return Precpred(Context, 12);
		}
		return true;
	}
	private bool callExpressionRule_sempred(CallExpressionRuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return  !GrammarPredicates.isFollowedByLPAREN(TokenStream) ;
		}
		return true;
	}
	private bool nonKwCallExpressionRule_sempred(NonKwCallExpressionRuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return  !GrammarPredicates.isFollowedByLPAREN(TokenStream) ;
		}
		return true;
	}
	private bool callRule_sempred(CallRuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return  !GrammarPredicates.isFollowedByLPAREN(TokenStream) ;
		case 38: return  !GrammarPredicates.isClassName(TokenStream, 2)     ;
		}
		return true;
	}
	private bool classNameExpression_sempred(ClassNameExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return  GrammarPredicates.isClassName(TokenStream) ;
		}
		return true;
	}
	private bool genericClassNameExpression_sempred(GenericClassNameExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return  isEllipsisEnabled() ;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,119,1768,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,1,0,3,0,124,8,0,1,0,5,0,127,8,
		0,10,0,12,0,130,9,0,1,0,3,0,133,8,0,1,0,5,0,136,8,0,10,0,12,0,139,9,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,149,8,0,10,0,12,0,152,9,0,1,0,5,0,
		155,8,0,10,0,12,0,158,9,0,1,0,3,0,161,8,0,1,0,5,0,164,8,0,10,0,12,0,167,
		9,0,1,0,1,0,1,1,1,1,1,1,3,1,174,8,1,1,2,1,2,1,2,5,2,179,8,2,10,2,12,2,
		182,9,2,3,2,184,8,2,1,2,1,2,1,2,1,2,5,2,190,8,2,10,2,12,2,193,9,2,1,3,
		1,3,1,3,5,3,198,8,3,10,3,12,3,201,9,3,3,3,203,8,3,1,3,1,3,3,3,207,8,3,
		1,3,1,3,1,3,5,3,212,8,3,10,3,12,3,215,9,3,1,3,1,3,3,3,219,8,3,1,3,1,3,
		3,3,223,8,3,1,4,1,4,1,4,1,4,1,4,3,4,230,8,4,1,4,1,4,1,4,1,4,1,4,1,4,5,
		4,238,8,4,10,4,12,4,241,9,4,3,4,243,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,3,4,253,8,4,1,4,1,4,1,4,1,4,3,4,259,8,4,1,4,5,4,262,8,4,10,4,12,4,265,
		9,4,1,4,3,4,268,8,4,1,4,5,4,271,8,4,10,4,12,4,274,9,4,1,4,3,4,277,8,4,
		1,4,3,4,280,8,4,1,4,5,4,283,8,4,10,4,12,4,286,9,4,1,4,1,4,1,5,1,5,1,5,
		1,5,1,5,3,5,295,8,5,1,6,1,6,1,6,1,6,1,6,3,6,302,8,6,1,7,1,7,5,7,306,8,
		7,10,7,12,7,309,9,7,1,7,1,7,1,7,5,7,314,8,7,10,7,12,7,317,9,7,1,7,1,7,
		5,7,321,8,7,10,7,12,7,324,9,7,5,7,326,8,7,10,7,12,7,329,9,7,1,7,1,7,5,
		7,333,8,7,10,7,12,7,336,9,7,1,7,3,7,339,8,7,1,7,3,7,342,8,7,1,7,1,7,1,
		7,1,7,1,7,5,7,349,8,7,10,7,12,7,352,9,7,1,7,1,7,5,7,356,8,7,10,7,12,7,
		359,9,7,3,7,361,8,7,1,7,1,7,1,8,1,8,5,8,367,8,8,10,8,12,8,370,9,8,1,8,
		1,8,1,8,5,8,375,8,8,10,8,12,8,378,9,8,1,8,5,8,381,8,8,10,8,12,8,384,9,
		8,1,9,1,9,5,9,388,8,9,10,9,12,9,391,9,9,1,9,1,9,1,9,5,9,396,8,9,10,9,12,
		9,399,9,9,1,9,1,9,5,9,403,8,9,10,9,12,9,406,9,9,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,3,10,416,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,5,10,427,8,10,10,10,12,10,430,9,10,1,10,1,10,1,10,1,10,3,10,436,8,
		10,1,10,3,10,439,8,10,1,10,1,10,1,10,5,10,444,8,10,10,10,12,10,447,9,10,
		1,10,1,10,5,10,451,8,10,10,10,12,10,454,9,10,1,10,1,10,3,10,458,8,10,1,
		10,1,10,1,10,3,10,463,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,
		473,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,484,8,11,10,
		11,12,11,487,9,11,1,11,3,11,490,8,11,1,11,3,11,493,8,11,1,11,1,11,1,11,
		5,11,498,8,11,10,11,12,11,501,9,11,1,11,5,11,504,8,11,10,11,12,11,507,
		9,11,1,12,1,12,1,12,5,12,512,8,12,10,12,12,12,515,9,12,5,12,517,8,12,10,
		12,12,12,520,9,12,1,12,3,12,523,8,12,1,12,1,12,3,12,527,8,12,1,13,1,13,
		1,14,1,14,1,14,1,15,1,15,3,15,536,8,15,1,16,1,16,1,16,1,16,1,16,1,16,5,
		16,544,8,16,10,16,12,16,547,9,16,1,16,3,16,550,8,16,1,16,3,16,553,8,16,
		1,17,1,17,1,17,5,17,558,8,17,10,17,12,17,561,9,17,1,17,1,17,1,18,1,18,
		3,18,567,8,18,1,19,1,19,1,19,1,19,5,19,573,8,19,10,19,12,19,576,9,19,1,
		19,1,19,1,20,1,20,1,20,1,20,1,20,5,20,585,8,20,10,20,12,20,588,9,20,3,
		20,590,8,20,1,21,1,21,1,21,1,21,5,21,596,8,21,10,21,12,21,599,9,21,1,22,
		1,22,1,22,5,22,604,8,22,10,22,12,22,607,9,22,5,22,609,8,22,10,22,12,22,
		612,9,22,1,22,1,22,1,22,1,22,1,22,3,22,619,8,22,1,23,5,23,622,8,23,10,
		23,12,23,625,9,23,1,23,3,23,628,8,23,1,23,3,23,631,8,23,1,23,1,23,1,23,
		5,23,636,8,23,10,23,12,23,639,9,23,1,23,3,23,642,8,23,1,24,4,24,645,8,
		24,11,24,12,24,646,1,24,1,24,4,24,651,8,24,11,24,12,24,652,5,24,655,8,
		24,10,24,12,24,658,9,24,1,24,3,24,661,8,24,1,24,5,24,664,8,24,10,24,12,
		24,667,9,24,1,24,1,24,4,24,671,8,24,11,24,12,24,672,1,24,5,24,676,8,24,
		10,24,12,24,679,9,24,1,24,5,24,682,8,24,10,24,12,24,685,9,24,3,24,687,
		8,24,1,25,1,25,1,25,5,25,692,8,25,10,25,12,25,695,9,25,1,25,3,25,698,8,
		25,1,26,1,26,1,26,1,26,5,26,704,8,26,10,26,12,26,707,9,26,1,26,1,26,1,
		26,5,26,712,8,26,10,26,12,26,715,9,26,1,26,3,26,718,8,26,1,27,3,27,721,
		8,27,1,27,1,27,1,28,1,28,1,28,1,28,3,28,729,8,28,1,28,3,28,732,8,28,1,
		28,1,28,5,28,736,8,28,10,28,12,28,739,9,28,1,28,3,28,742,8,28,1,28,5,28,
		745,8,28,10,28,12,28,748,9,28,1,28,1,28,1,28,3,28,753,8,28,1,29,1,29,1,
		29,1,29,1,29,1,29,4,29,761,8,29,11,29,12,29,762,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,3,30,772,8,30,1,30,1,30,3,30,776,8,30,1,30,1,30,3,30,780,
		8,30,1,30,1,30,5,30,784,8,30,10,30,12,30,787,9,30,1,30,1,30,1,30,1,30,
		3,30,793,8,30,1,30,1,30,1,30,1,30,1,30,5,30,800,8,30,10,30,12,30,803,9,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,815,8,30,10,
		30,12,30,818,9,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,827,8,30,10,
		30,12,30,830,9,30,1,30,1,30,5,30,834,8,30,10,30,12,30,837,9,30,1,30,1,
		30,5,30,841,8,30,10,30,12,30,844,9,30,1,30,3,30,847,8,30,1,30,1,30,1,30,
		1,30,1,30,5,30,854,8,30,10,30,12,30,857,9,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,5,30,866,8,30,10,30,12,30,869,9,30,1,30,1,30,1,30,5,30,874,8,
		30,10,30,12,30,877,9,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,4,30,886,8,
		30,11,30,12,30,887,3,30,890,8,30,1,30,1,30,1,30,1,30,4,30,896,8,30,11,
		30,12,30,897,1,30,3,30,901,8,30,1,30,3,30,904,8,30,1,30,1,30,3,30,908,
		8,30,1,30,1,30,3,30,912,8,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,920,8,
		30,10,30,12,30,923,9,30,1,30,3,30,926,8,30,1,30,1,30,1,30,1,30,1,30,5,
		30,933,8,30,10,30,12,30,936,9,30,1,30,1,30,1,30,1,30,1,30,5,30,943,8,30,
		10,30,12,30,946,9,30,1,30,1,30,3,30,950,8,30,1,31,1,31,3,31,954,8,31,1,
		31,1,31,1,32,1,32,3,32,960,8,32,1,33,1,33,5,33,964,8,33,10,33,12,33,967,
		9,33,1,33,1,33,5,33,971,8,33,10,33,12,33,974,9,33,1,34,1,34,5,34,978,8,
		34,10,34,12,34,981,9,34,1,34,1,34,1,34,1,34,5,34,987,8,34,10,34,12,34,
		990,9,34,1,34,1,34,1,34,3,34,995,8,34,1,34,1,34,5,34,999,8,34,10,34,12,
		34,1002,9,34,1,34,1,34,5,34,1006,8,34,10,34,12,34,1009,9,34,1,35,1,35,
		5,35,1013,8,35,10,35,12,35,1016,9,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,5,36,1028,8,36,10,36,12,36,1031,9,36,1,37,1,37,5,37,1035,
		8,37,10,37,12,37,1038,9,37,1,37,1,37,1,38,1,38,5,38,1044,8,38,10,38,12,
		38,1047,9,38,1,39,1,39,5,39,1051,8,39,10,39,12,39,1054,9,39,1,39,1,39,
		5,39,1058,8,39,10,39,12,39,1061,9,39,1,39,1,39,5,39,1065,8,39,10,39,12,
		39,1068,9,39,3,39,1070,8,39,1,39,3,39,1073,8,39,1,39,1,39,1,40,1,40,1,
		40,3,40,1080,8,40,1,40,1,40,3,40,1084,8,40,1,41,1,41,1,41,1,41,5,41,1090,
		8,41,10,41,12,41,1093,9,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,1101,8,42,
		10,42,12,42,1104,9,42,3,42,1106,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,3,42,1118,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,
		1127,8,43,1,43,1,43,1,43,1,43,1,43,5,43,1134,8,43,10,43,12,43,1137,9,43,
		1,43,1,43,1,43,3,43,1142,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,1164,
		8,43,10,43,12,43,1167,9,43,1,43,1,43,1,43,5,43,1172,8,43,10,43,12,43,1175,
		9,43,1,43,3,43,1178,8,43,1,43,1,43,1,43,5,43,1183,8,43,10,43,12,43,1186,
		9,43,1,43,1,43,1,43,1,43,5,43,1192,8,43,10,43,12,43,1195,9,43,1,43,1,43,
		1,43,1,43,5,43,1201,8,43,10,43,12,43,1204,9,43,1,43,1,43,1,43,1,43,5,43,
		1210,8,43,10,43,12,43,1213,9,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		3,43,1223,8,43,1,43,5,43,1226,8,43,10,43,12,43,1229,9,43,1,43,1,43,1,43,
		1,43,5,43,1235,8,43,10,43,12,43,1238,9,43,1,43,1,43,1,43,1,43,5,43,1244,
		8,43,10,43,12,43,1247,9,43,1,43,1,43,1,43,1,43,5,43,1253,8,43,10,43,12,
		43,1256,9,43,1,43,1,43,1,43,1,43,5,43,1262,8,43,10,43,12,43,1265,9,43,
		1,43,1,43,1,43,1,43,5,43,1271,8,43,10,43,12,43,1274,9,43,1,43,1,43,1,43,
		1,43,5,43,1280,8,43,10,43,12,43,1283,9,43,1,43,1,43,1,43,1,43,5,43,1289,
		8,43,10,43,12,43,1292,9,43,1,43,1,43,1,43,5,43,1297,8,43,10,43,12,43,1300,
		9,43,1,43,1,43,5,43,1304,8,43,10,43,12,43,1307,9,43,1,43,1,43,1,43,5,43,
		1312,8,43,10,43,12,43,1315,9,43,1,43,1,43,5,43,1319,8,43,10,43,12,43,1322,
		9,43,1,43,1,43,1,43,5,43,1327,8,43,10,43,12,43,1330,9,43,1,43,1,43,5,43,
		1334,8,43,10,43,12,43,1337,9,43,1,43,1,43,5,43,1341,8,43,10,43,12,43,1344,
		9,43,1,43,1,43,1,43,3,43,1349,8,43,1,43,5,43,1352,8,43,10,43,12,43,1355,
		9,43,1,43,1,43,1,43,1,43,5,43,1361,8,43,10,43,12,43,1364,9,43,1,43,1,43,
		1,43,5,43,1369,8,43,10,43,12,43,1372,9,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,3,43,1382,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,1391,
		8,43,10,43,12,43,1394,9,43,3,43,1396,8,43,1,43,1,43,1,43,5,43,1401,8,43,
		10,43,12,43,1404,9,43,1,43,1,43,5,43,1408,8,43,10,43,12,43,1411,9,43,1,
		43,3,43,1414,8,43,1,43,1,43,5,43,1418,8,43,10,43,12,43,1421,9,43,1,43,
		1,43,1,43,3,43,1426,8,43,1,43,1,43,1,43,5,43,1431,8,43,10,43,12,43,1434,
		9,43,1,43,5,43,1437,8,43,10,43,12,43,1440,9,43,1,44,1,44,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,1,44,1,44,5,44,1453,8,44,10,44,12,44,1456,9,44,1,44,
		1,44,5,44,1460,8,44,10,44,12,44,1463,9,44,1,44,1,44,5,44,1467,8,44,10,
		44,12,44,1470,9,44,1,44,1,44,5,44,1474,8,44,10,44,12,44,1477,9,44,5,44,
		1479,8,44,10,44,12,44,1482,9,44,1,44,3,44,1485,8,44,3,44,1487,8,44,1,44,
		5,44,1490,8,44,10,44,12,44,1493,9,44,1,44,1,44,1,44,5,44,1498,8,44,10,
		44,12,44,1501,9,44,1,44,1,44,5,44,1505,8,44,10,44,12,44,1508,9,44,1,44,
		1,44,5,44,1512,8,44,10,44,12,44,1515,9,44,1,44,1,44,5,44,1519,8,44,10,
		44,12,44,1522,9,44,1,44,1,44,5,44,1526,8,44,10,44,12,44,1529,9,44,5,44,
		1531,8,44,10,44,12,44,1534,9,44,1,44,3,44,1537,8,44,3,44,1539,8,44,1,44,
		5,44,1542,8,44,10,44,12,44,1545,9,44,1,44,1,44,1,44,3,44,1550,8,44,1,45,
		1,45,1,45,3,45,1555,8,45,1,46,1,46,5,46,1559,8,46,10,46,12,46,1562,9,46,
		1,46,3,46,1565,8,46,1,46,5,46,1568,8,46,10,46,12,46,1571,9,46,1,46,1,46,
		5,46,1575,8,46,10,46,12,46,1578,9,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
		3,47,1587,8,47,1,47,4,47,1590,8,47,11,47,12,47,1591,1,47,1,47,1,47,1,47,
		1,47,1,47,1,47,1,47,3,47,1602,8,47,1,47,3,47,1605,8,47,1,48,1,48,1,48,
		3,48,1610,8,48,1,48,4,48,1613,8,48,11,48,12,48,1614,1,48,1,48,1,48,1,48,
		3,48,1621,8,48,1,48,3,48,1624,8,48,1,49,1,49,4,49,1628,8,49,11,49,12,49,
		1629,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,4,49,1641,8,49,11,49,
		12,49,1642,3,49,1645,8,49,1,50,1,50,1,50,3,50,1650,8,50,1,51,1,51,3,51,
		1654,8,51,1,51,1,51,5,51,1658,8,51,10,51,12,51,1661,9,51,1,51,1,51,3,51,
		1665,8,51,1,52,1,52,1,52,1,52,5,52,1671,8,52,10,52,12,52,1674,9,52,1,52,
		1,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1684,8,53,3,53,1686,8,53,1,54,
		1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
		1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1714,8,54,
		1,55,1,55,1,55,1,55,3,55,1720,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
		3,56,1729,8,56,1,57,4,57,1732,8,57,11,57,12,57,1733,1,57,1,57,5,57,1738,
		8,57,10,57,12,57,1741,9,57,1,57,1,57,5,57,1745,8,57,10,57,12,57,1748,9,
		57,1,57,5,57,1751,8,57,10,57,12,57,1754,9,57,3,57,1756,8,57,1,58,1,58,
		3,58,1760,8,58,1,59,1,59,3,59,1764,8,59,1,60,1,60,1,60,0,1,86,61,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,0,20,2,0,84,84,118,118,2,0,9,9,
		119,119,1,0,41,42,2,0,86,86,91,91,1,0,27,28,1,0,30,31,1,0,93,94,1,0,98,
		99,1,0,64,65,1,0,95,97,1,0,68,69,2,0,61,62,89,90,2,0,55,55,70,71,1,0,72,
		73,3,0,52,54,76,83,88,88,2,0,57,60,85,85,2,0,57,58,85,85,1,0,104,105,2,
		0,108,108,110,110,2,0,17,51,104,116,2078,0,123,1,0,0,0,2,173,1,0,0,0,4,
		183,1,0,0,0,6,202,1,0,0,0,8,242,1,0,0,0,10,294,1,0,0,0,12,296,1,0,0,0,
		14,303,1,0,0,0,16,364,1,0,0,0,18,385,1,0,0,0,20,438,1,0,0,0,22,492,1,0,
		0,0,24,526,1,0,0,0,26,528,1,0,0,0,28,530,1,0,0,0,30,535,1,0,0,0,32,537,
		1,0,0,0,34,554,1,0,0,0,36,566,1,0,0,0,38,568,1,0,0,0,40,579,1,0,0,0,42,
		591,1,0,0,0,44,618,1,0,0,0,46,623,1,0,0,0,48,686,1,0,0,0,50,688,1,0,0,
		0,52,699,1,0,0,0,54,720,1,0,0,0,56,724,1,0,0,0,58,754,1,0,0,0,60,949,1,
		0,0,0,62,951,1,0,0,0,64,959,1,0,0,0,66,961,1,0,0,0,68,975,1,0,0,0,70,1010,
		1,0,0,0,72,1019,1,0,0,0,74,1036,1,0,0,0,76,1041,1,0,0,0,78,1048,1,0,0,
		0,80,1083,1,0,0,0,82,1085,1,0,0,0,84,1117,1,0,0,0,86,1177,1,0,0,0,88,1549,
		1,0,0,0,90,1551,1,0,0,0,92,1556,1,0,0,0,94,1604,1,0,0,0,96,1623,1,0,0,
		0,98,1644,1,0,0,0,100,1646,1,0,0,0,102,1651,1,0,0,0,104,1666,1,0,0,0,106,
		1685,1,0,0,0,108,1713,1,0,0,0,110,1719,1,0,0,0,112,1728,1,0,0,0,114,1755,
		1,0,0,0,116,1759,1,0,0,0,118,1763,1,0,0,0,120,1765,1,0,0,0,122,124,5,1,
		0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,128,1,0,0,0,125,127,5,118,0,0,
		126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,132,
		1,0,0,0,130,128,1,0,0,0,131,133,3,4,2,0,132,131,1,0,0,0,132,133,1,0,0,
		0,133,137,1,0,0,0,134,136,7,0,0,0,135,134,1,0,0,0,136,139,1,0,0,0,137,
		135,1,0,0,0,137,138,1,0,0,0,138,150,1,0,0,0,139,137,1,0,0,0,140,141,3,
		6,3,0,141,142,7,0,0,0,142,149,1,0,0,0,143,149,3,8,4,0,144,145,3,2,1,0,
		145,146,7,0,0,0,146,149,1,0,0,0,147,149,7,0,0,0,148,140,1,0,0,0,148,143,
		1,0,0,0,148,144,1,0,0,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,
		0,150,151,1,0,0,0,151,156,1,0,0,0,152,150,1,0,0,0,153,155,7,0,0,0,154,
		153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,160,1,
		0,0,0,158,156,1,0,0,0,159,161,3,2,1,0,160,159,1,0,0,0,160,161,1,0,0,0,
		161,165,1,0,0,0,162,164,7,0,0,0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,
		1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,165,1,0,0,0,168,169,5,0,0,
		1,169,1,1,0,0,0,170,171,4,1,0,0,171,174,3,20,10,0,172,174,3,60,30,0,173,
		170,1,0,0,0,173,172,1,0,0,0,174,3,1,0,0,0,175,180,3,32,16,0,176,179,5,
		118,0,0,177,179,3,32,16,0,178,176,1,0,0,0,178,177,1,0,0,0,179,182,1,0,
		0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,183,
		175,1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,186,5,21,0,0,186,191,5,
		119,0,0,187,188,5,85,0,0,188,190,5,119,0,0,189,187,1,0,0,0,190,193,1,0,
		0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,5,1,0,0,0,193,191,1,0,0,0,194,
		199,3,32,16,0,195,198,5,118,0,0,196,198,3,32,16,0,197,195,1,0,0,0,197,
		196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,203,1,
		0,0,0,201,199,1,0,0,0,202,194,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,
		204,206,5,22,0,0,205,207,5,109,0,0,206,205,1,0,0,0,206,207,1,0,0,0,207,
		208,1,0,0,0,208,213,5,119,0,0,209,210,5,85,0,0,210,212,5,119,0,0,211,209,
		1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,218,1,0,0,
		0,215,213,1,0,0,0,216,217,5,85,0,0,217,219,5,95,0,0,218,216,1,0,0,0,218,
		219,1,0,0,0,219,222,1,0,0,0,220,221,5,104,0,0,221,223,5,119,0,0,222,220,
		1,0,0,0,222,223,1,0,0,0,223,7,1,0,0,0,224,230,3,32,16,0,225,226,3,110,
		55,0,226,227,4,4,1,1,227,228,6,4,-1,0,228,230,1,0,0,0,229,224,1,0,0,0,
		229,225,1,0,0,0,230,239,1,0,0,0,231,238,5,118,0,0,232,238,3,32,16,0,233,
		234,3,110,55,0,234,235,4,4,2,1,235,236,6,4,-1,0,236,238,1,0,0,0,237,231,
		1,0,0,0,237,232,1,0,0,0,237,233,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,
		0,239,240,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,242,229,1,0,0,0,242,
		243,1,0,0,0,243,252,1,0,0,0,244,245,5,87,0,0,245,253,5,18,0,0,246,253,
		5,17,0,0,247,248,5,18,0,0,248,253,6,4,-1,0,249,253,5,19,0,0,250,251,5,
		20,0,0,251,253,6,4,-1,0,252,244,1,0,0,0,252,246,1,0,0,0,252,247,1,0,0,
		0,252,249,1,0,0,0,252,250,1,0,0,0,253,254,1,0,0,0,254,255,5,119,0,0,255,
		276,6,4,-1,0,256,258,4,4,3,1,257,259,3,38,19,0,258,257,1,0,0,0,258,259,
		1,0,0,0,259,263,1,0,0,0,260,262,5,118,0,0,261,260,1,0,0,0,262,265,1,0,
		0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,266,
		268,3,18,9,0,267,266,1,0,0,0,267,268,1,0,0,0,268,272,1,0,0,0,269,271,5,
		118,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,
		0,273,277,1,0,0,0,274,272,1,0,0,0,275,277,1,0,0,0,276,256,1,0,0,0,276,
		275,1,0,0,0,277,279,1,0,0,0,278,280,3,16,8,0,279,278,1,0,0,0,279,280,1,
		0,0,0,280,284,1,0,0,0,281,283,5,118,0,0,282,281,1,0,0,0,283,286,1,0,0,
		0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,
		288,3,14,7,0,288,9,1,0,0,0,289,295,3,20,10,0,290,295,3,22,11,0,291,295,
		3,26,13,0,292,295,3,28,14,0,293,295,3,8,4,0,294,289,1,0,0,0,294,290,1,
		0,0,0,294,291,1,0,0,0,294,292,1,0,0,0,294,293,1,0,0,0,295,11,1,0,0,0,296,
		301,5,119,0,0,297,298,5,3,0,0,298,299,3,114,57,0,299,300,5,4,0,0,300,302,
		1,0,0,0,301,297,1,0,0,0,301,302,1,0,0,0,302,13,1,0,0,0,303,307,5,7,0,0,
		304,306,5,118,0,0,305,304,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,
		308,1,0,0,0,308,341,1,0,0,0,309,307,1,0,0,0,310,327,4,7,4,1,311,315,3,
		12,6,0,312,314,5,118,0,0,313,312,1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,
		0,315,316,1,0,0,0,316,318,1,0,0,0,317,315,1,0,0,0,318,322,5,86,0,0,319,
		321,5,118,0,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,
		1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,325,311,1,0,0,0,326,329,1,0,0,
		0,327,325,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,330,
		334,3,12,6,0,331,333,5,118,0,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,
		1,0,0,0,334,335,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,337,339,5,86,0,
		0,338,337,1,0,0,0,338,339,1,0,0,0,339,342,1,0,0,0,340,342,1,0,0,0,341,
		310,1,0,0,0,341,340,1,0,0,0,342,350,1,0,0,0,343,344,3,10,5,0,344,345,7,
		0,0,0,345,349,1,0,0,0,346,349,5,118,0,0,347,349,5,84,0,0,348,343,1,0,0,
		0,348,346,1,0,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,
		351,1,0,0,0,351,360,1,0,0,0,352,350,1,0,0,0,353,357,3,10,5,0,354,356,7,
		0,0,0,355,354,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,
		358,361,1,0,0,0,359,357,1,0,0,0,360,353,1,0,0,0,360,361,1,0,0,0,361,362,
		1,0,0,0,362,363,5,8,0,0,363,15,1,0,0,0,364,368,5,24,0,0,365,367,5,118,
		0,0,366,365,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,
		371,1,0,0,0,370,368,1,0,0,0,371,382,3,102,51,0,372,376,5,86,0,0,373,375,
		5,118,0,0,374,373,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,
		0,0,377,379,1,0,0,0,378,376,1,0,0,0,379,381,3,102,51,0,380,372,1,0,0,0,
		381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,17,1,0,0,0,384,382,
		1,0,0,0,385,389,5,23,0,0,386,388,5,118,0,0,387,386,1,0,0,0,388,391,1,0,
		0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,389,1,0,0,0,392,
		404,3,102,51,0,393,397,5,86,0,0,394,396,5,118,0,0,395,394,1,0,0,0,396,
		399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,397,1,
		0,0,0,400,401,4,9,5,1,401,403,3,102,51,0,402,393,1,0,0,0,403,406,1,0,0,
		0,404,402,1,0,0,0,404,405,1,0,0,0,405,19,1,0,0,0,406,404,1,0,0,0,407,408,
		3,112,56,0,408,409,4,10,6,1,409,410,6,10,-1,0,410,416,1,0,0,0,411,416,
		3,32,16,0,412,413,5,25,0,0,413,414,4,10,7,1,414,416,6,10,-1,0,415,407,
		1,0,0,0,415,411,1,0,0,0,415,412,1,0,0,0,416,428,1,0,0,0,417,418,3,112,
		56,0,418,419,4,10,8,1,419,420,6,10,-1,0,420,427,1,0,0,0,421,427,3,32,16,
		0,422,423,5,25,0,0,423,424,4,10,9,1,424,427,6,10,-1,0,425,427,5,118,0,
		0,426,417,1,0,0,0,426,421,1,0,0,0,426,422,1,0,0,0,426,425,1,0,0,0,427,
		430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,435,1,0,0,0,430,428,1,
		0,0,0,431,432,3,38,19,0,432,433,3,102,51,0,433,436,1,0,0,0,434,436,3,30,
		15,0,435,431,1,0,0,0,435,434,1,0,0,0,435,436,1,0,0,0,436,439,1,0,0,0,437,
		439,3,102,51,0,438,415,1,0,0,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,
		1,0,0,0,440,441,7,1,0,0,441,445,5,3,0,0,442,444,5,118,0,0,443,442,1,0,
		0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,0,447,
		445,1,0,0,0,448,452,3,44,22,0,449,451,5,118,0,0,450,449,1,0,0,0,451,454,
		1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,455,1,0,0,0,454,452,1,0,0,
		0,455,457,5,4,0,0,456,458,3,42,21,0,457,456,1,0,0,0,457,458,1,0,0,0,458,
		462,1,0,0,0,459,460,5,40,0,0,460,463,3,84,42,0,461,463,3,62,31,0,462,459,
		1,0,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,21,1,0,0,0,464,465,3,112,56,
		0,465,466,4,11,10,1,466,467,6,11,-1,0,467,473,1,0,0,0,468,473,3,32,16,
		0,469,470,5,25,0,0,470,471,4,11,11,1,471,473,6,11,-1,0,472,464,1,0,0,0,
		472,468,1,0,0,0,472,469,1,0,0,0,473,485,1,0,0,0,474,475,3,112,56,0,475,
		476,4,11,12,1,476,477,6,11,-1,0,477,484,1,0,0,0,478,484,3,32,16,0,479,
		480,5,25,0,0,480,481,4,11,13,1,481,484,6,11,-1,0,482,484,5,118,0,0,483,
		474,1,0,0,0,483,478,1,0,0,0,483,479,1,0,0,0,483,482,1,0,0,0,484,487,1,
		0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,
		488,490,3,102,51,0,489,488,1,0,0,0,489,490,1,0,0,0,490,493,1,0,0,0,491,
		493,3,102,51,0,492,472,1,0,0,0,492,491,1,0,0,0,493,494,1,0,0,0,494,505,
		3,50,25,0,495,499,5,86,0,0,496,498,5,118,0,0,497,496,1,0,0,0,498,501,1,
		0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,499,1,0,0,0,
		502,504,3,50,25,0,503,495,1,0,0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,
		506,1,0,0,0,506,23,1,0,0,0,507,505,1,0,0,0,508,527,3,22,11,0,509,513,3,
		32,16,0,510,512,5,118,0,0,511,510,1,0,0,0,512,515,1,0,0,0,513,511,1,0,
		0,0,513,514,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,516,509,1,0,0,0,517,
		520,1,0,0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,522,1,0,0,0,520,518,1,
		0,0,0,521,523,5,110,0,0,522,521,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,
		0,524,525,5,25,0,0,525,527,3,52,26,0,526,508,1,0,0,0,526,518,1,0,0,0,527,
		25,1,0,0,0,528,529,3,62,31,0,529,27,1,0,0,0,530,531,5,109,0,0,531,532,
		3,62,31,0,532,29,1,0,0,0,533,536,3,102,51,0,534,536,5,25,0,0,535,533,1,
		0,0,0,535,534,1,0,0,0,536,31,1,0,0,0,537,538,5,87,0,0,538,552,3,102,51,
		0,539,549,5,3,0,0,540,545,3,34,17,0,541,542,5,86,0,0,542,544,3,34,17,0,
		543,541,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,550,
		1,0,0,0,547,545,1,0,0,0,548,550,3,36,18,0,549,540,1,0,0,0,549,548,1,0,
		0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,553,5,4,0,0,552,539,1,0,0,0,552,
		553,1,0,0,0,553,33,1,0,0,0,554,555,5,119,0,0,555,559,5,88,0,0,556,558,
		5,118,0,0,557,556,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,
		0,0,560,562,1,0,0,0,561,559,1,0,0,0,562,563,3,36,18,0,563,35,1,0,0,0,564,
		567,3,84,42,0,565,567,3,32,16,0,566,564,1,0,0,0,566,565,1,0,0,0,567,37,
		1,0,0,0,568,569,5,89,0,0,569,574,3,40,20,0,570,571,5,86,0,0,571,573,3,
		40,20,0,572,570,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,
		0,575,577,1,0,0,0,576,574,1,0,0,0,577,578,5,90,0,0,578,39,1,0,0,0,579,
		589,3,102,51,0,580,581,5,23,0,0,581,586,3,102,51,0,582,583,5,100,0,0,583,
		585,3,102,51,0,584,582,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,587,
		1,0,0,0,587,590,1,0,0,0,588,586,1,0,0,0,589,580,1,0,0,0,589,590,1,0,0,
		0,590,41,1,0,0,0,591,592,5,48,0,0,592,597,3,100,50,0,593,594,5,86,0,0,
		594,596,3,100,50,0,595,593,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,
		598,1,0,0,0,598,43,1,0,0,0,599,597,1,0,0,0,600,601,3,46,23,0,601,605,5,
		86,0,0,602,604,5,118,0,0,603,602,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,
		0,605,606,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,608,600,1,0,0,0,609,
		612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,610,1,
		0,0,0,613,614,6,22,-1,0,614,615,3,46,23,0,615,616,6,22,-1,0,616,619,1,
		0,0,0,617,619,1,0,0,0,618,610,1,0,0,0,618,617,1,0,0,0,619,45,1,0,0,0,620,
		622,3,32,16,0,621,620,1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,624,
		1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,626,628,5,110,0,0,627,626,1,0,
		0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,631,3,30,15,0,630,629,1,0,0,0,
		630,631,1,0,0,0,631,632,1,0,0,0,632,641,5,119,0,0,633,637,5,88,0,0,634,
		636,5,118,0,0,635,634,1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,0,637,638,
		1,0,0,0,638,640,1,0,0,0,639,637,1,0,0,0,640,642,3,86,43,0,641,633,1,0,
		0,0,641,642,1,0,0,0,642,47,1,0,0,0,643,645,7,0,0,0,644,643,1,0,0,0,645,
		646,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,656,1,0,0,0,648,650,3,
		60,30,0,649,651,7,0,0,0,650,649,1,0,0,0,651,652,1,0,0,0,652,650,1,0,0,
		0,652,653,1,0,0,0,653,655,1,0,0,0,654,648,1,0,0,0,655,658,1,0,0,0,656,
		654,1,0,0,0,656,657,1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,0,659,661,3,
		60,30,0,660,659,1,0,0,0,660,661,1,0,0,0,661,665,1,0,0,0,662,664,7,0,0,
		0,663,662,1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,
		687,1,0,0,0,667,665,1,0,0,0,668,677,3,60,30,0,669,671,7,0,0,0,670,669,
		1,0,0,0,671,672,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,674,1,0,0,
		0,674,676,3,60,30,0,675,670,1,0,0,0,676,679,1,0,0,0,677,675,1,0,0,0,677,
		678,1,0,0,0,678,683,1,0,0,0,679,677,1,0,0,0,680,682,7,0,0,0,681,680,1,
		0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,687,1,0,0,0,
		685,683,1,0,0,0,686,644,1,0,0,0,686,668,1,0,0,0,687,49,1,0,0,0,688,697,
		5,119,0,0,689,693,5,88,0,0,690,692,5,118,0,0,691,690,1,0,0,0,692,695,1,
		0,0,0,693,691,1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,0,695,693,1,0,0,0,
		696,698,3,86,43,0,697,689,1,0,0,0,697,698,1,0,0,0,698,51,1,0,0,0,699,700,
		5,3,0,0,700,705,3,54,27,0,701,702,5,86,0,0,702,704,3,54,27,0,703,701,1,
		0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,708,1,0,0,0,
		707,705,1,0,0,0,708,717,5,4,0,0,709,713,5,88,0,0,710,712,5,118,0,0,711,
		710,1,0,0,0,712,715,1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,716,1,
		0,0,0,715,713,1,0,0,0,716,718,3,86,43,0,717,709,1,0,0,0,717,718,1,0,0,
		0,718,53,1,0,0,0,719,721,3,102,51,0,720,719,1,0,0,0,720,721,1,0,0,0,721,
		722,1,0,0,0,722,723,5,119,0,0,723,55,1,0,0,0,724,731,5,29,0,0,725,728,
		3,100,50,0,726,727,5,89,0,0,727,729,5,90,0,0,728,726,1,0,0,0,728,729,1,
		0,0,0,729,732,1,0,0,0,730,732,3,102,51,0,731,725,1,0,0,0,731,730,1,0,0,
		0,732,733,1,0,0,0,733,737,5,3,0,0,734,736,5,118,0,0,735,734,1,0,0,0,736,
		739,1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,741,1,0,0,0,739,737,1,
		0,0,0,740,742,3,114,57,0,741,740,1,0,0,0,741,742,1,0,0,0,742,746,1,0,0,
		0,743,745,5,118,0,0,744,743,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,
		747,1,0,0,0,747,749,1,0,0,0,748,746,1,0,0,0,749,750,5,4,0,0,750,752,1,
		0,0,0,751,753,3,14,7,0,752,751,1,0,0,0,752,753,1,0,0,0,753,57,1,0,0,0,
		754,755,5,29,0,0,755,760,3,100,50,0,756,757,5,5,0,0,757,758,3,86,43,0,
		758,759,5,6,0,0,759,761,1,0,0,0,760,756,1,0,0,0,761,762,1,0,0,0,762,760,
		1,0,0,0,762,763,1,0,0,0,763,59,1,0,0,0,764,950,3,24,12,0,765,950,3,58,
		29,0,766,950,3,56,28,0,767,768,5,33,0,0,768,771,5,3,0,0,769,772,3,24,12,
		0,770,772,3,86,43,0,771,769,1,0,0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,
		773,1,0,0,0,773,775,5,84,0,0,774,776,3,86,43,0,775,774,1,0,0,0,775,776,
		1,0,0,0,776,777,1,0,0,0,777,779,5,84,0,0,778,780,3,86,43,0,779,778,1,0,
		0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,785,5,4,0,0,782,784,5,118,0,0,
		783,782,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,788,
		1,0,0,0,787,785,1,0,0,0,788,950,3,64,32,0,789,790,5,33,0,0,790,792,5,3,
		0,0,791,793,3,30,15,0,792,791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,
		794,795,5,119,0,0,795,796,5,32,0,0,796,797,3,86,43,0,797,801,5,4,0,0,798,
		800,5,118,0,0,799,798,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,801,802,
		1,0,0,0,802,804,1,0,0,0,803,801,1,0,0,0,804,805,3,64,32,0,805,950,1,0,
		0,0,806,807,5,33,0,0,807,808,5,3,0,0,808,809,3,30,15,0,809,810,5,119,0,
		0,810,811,5,91,0,0,811,812,3,86,43,0,812,816,5,4,0,0,813,815,5,118,0,0,
		814,813,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,819,
		1,0,0,0,818,816,1,0,0,0,819,820,3,64,32,0,820,950,1,0,0,0,821,822,5,34,
		0,0,822,823,5,3,0,0,823,824,3,86,43,0,824,828,5,4,0,0,825,827,5,118,0,
		0,826,825,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,
		831,1,0,0,0,830,828,1,0,0,0,831,835,3,64,32,0,832,834,5,118,0,0,833,832,
		1,0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,846,1,0,0,
		0,837,835,1,0,0,0,838,842,5,35,0,0,839,841,5,118,0,0,840,839,1,0,0,0,841,
		844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,845,1,0,0,0,844,842,1,
		0,0,0,845,847,3,64,32,0,846,838,1,0,0,0,846,847,1,0,0,0,847,950,1,0,0,
		0,848,849,5,37,0,0,849,850,5,3,0,0,850,851,3,86,43,0,851,855,5,4,0,0,852,
		854,5,118,0,0,853,852,1,0,0,0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,
		1,0,0,0,856,858,1,0,0,0,857,855,1,0,0,0,858,859,3,64,32,0,859,950,1,0,
		0,0,860,861,5,38,0,0,861,862,5,3,0,0,862,863,3,86,43,0,863,867,5,4,0,0,
		864,866,5,118,0,0,865,864,1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,0,867,
		868,1,0,0,0,868,870,1,0,0,0,869,867,1,0,0,0,870,875,5,7,0,0,871,874,3,
		72,36,0,872,874,5,118,0,0,873,871,1,0,0,0,873,872,1,0,0,0,874,877,1,0,
		0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,889,1,0,0,0,877,875,1,0,0,0,878,
		879,5,40,0,0,879,885,5,91,0,0,880,881,3,60,30,0,881,882,7,0,0,0,882,886,
		1,0,0,0,883,886,5,84,0,0,884,886,5,118,0,0,885,880,1,0,0,0,885,883,1,0,
		0,0,885,884,1,0,0,0,886,887,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,
		890,1,0,0,0,889,878,1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,892,5,
		8,0,0,892,950,1,0,0,0,893,903,3,66,33,0,894,896,3,68,34,0,895,894,1,0,
		0,0,896,897,1,0,0,0,897,895,1,0,0,0,897,898,1,0,0,0,898,900,1,0,0,0,899,
		901,3,70,35,0,900,899,1,0,0,0,900,901,1,0,0,0,901,904,1,0,0,0,902,904,
		3,70,35,0,903,895,1,0,0,0,903,902,1,0,0,0,904,950,1,0,0,0,905,907,7,2,
		0,0,906,908,5,119,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,950,1,0,0,0,
		909,911,5,43,0,0,910,912,3,86,43,0,911,910,1,0,0,0,911,912,1,0,0,0,912,
		950,1,0,0,0,913,914,5,47,0,0,914,950,3,86,43,0,915,916,5,49,0,0,916,925,
		3,86,43,0,917,921,7,3,0,0,918,920,5,118,0,0,919,918,1,0,0,0,920,923,1,
		0,0,0,921,919,1,0,0,0,921,922,1,0,0,0,922,924,1,0,0,0,923,921,1,0,0,0,
		924,926,3,86,43,0,925,917,1,0,0,0,925,926,1,0,0,0,926,950,1,0,0,0,927,
		928,5,114,0,0,928,929,5,3,0,0,929,930,3,86,43,0,930,934,5,4,0,0,931,933,
		5,118,0,0,932,931,1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,934,935,1,0,
		0,0,935,937,1,0,0,0,936,934,1,0,0,0,937,938,3,64,32,0,938,950,1,0,0,0,
		939,940,5,119,0,0,940,944,5,91,0,0,941,943,5,118,0,0,942,941,1,0,0,0,943,
		946,1,0,0,0,944,942,1,0,0,0,944,945,1,0,0,0,945,947,1,0,0,0,946,944,1,
		0,0,0,947,950,3,64,32,0,948,950,3,86,43,0,949,764,1,0,0,0,949,765,1,0,
		0,0,949,766,1,0,0,0,949,767,1,0,0,0,949,789,1,0,0,0,949,806,1,0,0,0,949,
		821,1,0,0,0,949,848,1,0,0,0,949,860,1,0,0,0,949,893,1,0,0,0,949,905,1,
		0,0,0,949,909,1,0,0,0,949,913,1,0,0,0,949,915,1,0,0,0,949,927,1,0,0,0,
		949,939,1,0,0,0,949,948,1,0,0,0,950,61,1,0,0,0,951,953,5,7,0,0,952,954,
		3,48,24,0,953,952,1,0,0,0,953,954,1,0,0,0,954,955,1,0,0,0,955,956,5,8,
		0,0,956,63,1,0,0,0,957,960,3,62,31,0,958,960,3,60,30,0,959,957,1,0,0,0,
		959,958,1,0,0,0,960,65,1,0,0,0,961,965,5,44,0,0,962,964,5,118,0,0,963,
		962,1,0,0,0,964,967,1,0,0,0,965,963,1,0,0,0,965,966,1,0,0,0,966,968,1,
		0,0,0,967,965,1,0,0,0,968,972,3,62,31,0,969,971,5,118,0,0,970,969,1,0,
		0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,67,1,0,0,0,974,
		972,1,0,0,0,975,979,5,45,0,0,976,978,5,118,0,0,977,976,1,0,0,0,978,981,
		1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,982,1,0,0,0,981,979,1,0,0,
		0,982,994,5,3,0,0,983,988,3,100,50,0,984,985,5,92,0,0,985,987,3,100,50,
		0,986,984,1,0,0,0,987,990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,989,
		991,1,0,0,0,990,988,1,0,0,0,991,992,5,119,0,0,992,995,1,0,0,0,993,995,
		5,119,0,0,994,983,1,0,0,0,994,993,1,0,0,0,995,996,1,0,0,0,996,1000,5,4,
		0,0,997,999,5,118,0,0,998,997,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,
		0,1000,1001,1,0,0,0,1001,1003,1,0,0,0,1002,1000,1,0,0,0,1003,1007,3,62,
		31,0,1004,1006,5,118,0,0,1005,1004,1,0,0,0,1006,1009,1,0,0,0,1007,1005,
		1,0,0,0,1007,1008,1,0,0,0,1008,69,1,0,0,0,1009,1007,1,0,0,0,1010,1014,
		5,46,0,0,1011,1013,5,118,0,0,1012,1011,1,0,0,0,1013,1016,1,0,0,0,1014,
		1012,1,0,0,0,1014,1015,1,0,0,0,1015,1017,1,0,0,0,1016,1014,1,0,0,0,1017,
		1018,3,62,31,0,1018,71,1,0,0,0,1019,1020,5,39,0,0,1020,1021,3,86,43,0,
		1021,1029,5,91,0,0,1022,1023,3,60,30,0,1023,1024,7,0,0,0,1024,1028,1,0,
		0,0,1025,1028,5,84,0,0,1026,1028,5,118,0,0,1027,1022,1,0,0,0,1027,1025,
		1,0,0,0,1027,1026,1,0,0,0,1028,1031,1,0,0,0,1029,1027,1,0,0,0,1029,1030,
		1,0,0,0,1030,73,1,0,0,0,1031,1029,1,0,0,0,1032,1033,5,119,0,0,1033,1035,
		5,85,0,0,1034,1032,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,1036,1037,
		1,0,0,0,1037,1039,1,0,0,0,1038,1036,1,0,0,0,1039,1040,5,119,0,0,1040,75,
		1,0,0,0,1041,1045,5,119,0,0,1042,1044,5,13,0,0,1043,1042,1,0,0,0,1044,
		1047,1,0,0,0,1045,1043,1,0,0,0,1045,1046,1,0,0,0,1046,77,1,0,0,0,1047,
		1045,1,0,0,0,1048,1052,5,7,0,0,1049,1051,5,118,0,0,1050,1049,1,0,0,0,1051,
		1054,1,0,0,0,1052,1050,1,0,0,0,1052,1053,1,0,0,0,1053,1069,1,0,0,0,1054,
		1052,1,0,0,0,1055,1059,3,44,22,0,1056,1058,5,118,0,0,1057,1056,1,0,0,0,
		1058,1061,1,0,0,0,1059,1057,1,0,0,0,1059,1060,1,0,0,0,1060,1062,1,0,0,
		0,1061,1059,1,0,0,0,1062,1066,5,63,0,0,1063,1065,5,118,0,0,1064,1063,1,
		0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,1070,
		1,0,0,0,1068,1066,1,0,0,0,1069,1055,1,0,0,0,1069,1070,1,0,0,0,1070,1072,
		1,0,0,0,1071,1073,3,48,24,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,
		1,0,0,0,1074,1075,5,8,0,0,1075,79,1,0,0,0,1076,1084,3,76,38,0,1077,1079,
		5,7,0,0,1078,1080,3,86,43,0,1079,1078,1,0,0,0,1079,1080,1,0,0,0,1080,1081,
		1,0,0,0,1081,1084,5,8,0,0,1082,1084,3,78,39,0,1083,1076,1,0,0,0,1083,1077,
		1,0,0,0,1083,1082,1,0,0,0,1084,81,1,0,0,0,1085,1086,5,10,0,0,1086,1091,
		3,80,40,0,1087,1088,5,12,0,0,1088,1090,3,80,40,0,1089,1087,1,0,0,0,1090,
		1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,1094,1,0,0,0,1093,
		1091,1,0,0,0,1094,1095,5,11,0,0,1095,83,1,0,0,0,1096,1105,5,5,0,0,1097,
		1102,3,84,42,0,1098,1099,5,86,0,0,1099,1101,3,84,42,0,1100,1098,1,0,0,
		0,1101,1104,1,0,0,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,1106,1,0,
		0,0,1104,1102,1,0,0,0,1105,1097,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,
		0,0,0,1107,1118,5,6,0,0,1108,1118,3,90,45,0,1109,1118,3,74,37,0,1110,1118,
		3,102,51,0,1111,1118,5,9,0,0,1112,1118,5,15,0,0,1113,1118,5,16,0,0,1114,
		1118,5,26,0,0,1115,1118,7,4,0,0,1116,1118,3,78,39,0,1117,1096,1,0,0,0,
		1117,1108,1,0,0,0,1117,1109,1,0,0,0,1117,1110,1,0,0,0,1117,1111,1,0,0,
		0,1117,1112,1,0,0,0,1117,1113,1,0,0,0,1117,1114,1,0,0,0,1117,1115,1,0,
		0,0,1117,1116,1,0,0,0,1118,85,1,0,0,0,1119,1120,6,43,-1,0,1120,1178,3,
		88,44,0,1121,1178,5,31,0,0,1122,1178,5,30,0,0,1123,1124,7,5,0,0,1124,1126,
		5,3,0,0,1125,1127,3,114,57,0,1126,1125,1,0,0,0,1126,1127,1,0,0,0,1127,
		1128,1,0,0,0,1128,1178,5,4,0,0,1129,1130,5,95,0,0,1130,1178,3,86,43,29,
		1131,1135,3,96,48,0,1132,1134,3,96,48,0,1133,1132,1,0,0,0,1134,1137,1,
		0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,1141,1,0,0,0,1137,1135,
		1,0,0,0,1138,1142,5,119,0,0,1139,1142,5,9,0,0,1140,1142,3,82,41,0,1141,
		1138,1,0,0,0,1141,1139,1,0,0,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,
		1178,1,0,0,0,1143,1178,3,98,49,0,1144,1145,5,3,0,0,1145,1146,3,102,51,
		0,1146,1147,5,4,0,0,1147,1148,3,86,43,23,1148,1178,1,0,0,0,1149,1150,5,
		3,0,0,1150,1151,3,86,43,0,1151,1152,5,4,0,0,1152,1178,1,0,0,0,1153,1154,
		7,6,0,0,1154,1178,3,86,43,21,1155,1156,7,7,0,0,1156,1178,3,86,43,19,1157,
		1158,7,8,0,0,1158,1178,3,86,43,18,1159,1160,5,3,0,0,1160,1165,5,119,0,
		0,1161,1162,5,86,0,0,1162,1164,5,119,0,0,1163,1161,1,0,0,0,1164,1167,1,
		0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,1168,1,0,0,0,1167,1165,
		1,0,0,0,1168,1169,5,4,0,0,1169,1173,5,88,0,0,1170,1172,5,118,0,0,1171,
		1170,1,0,0,0,1172,1175,1,0,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,
		1176,1,0,0,0,1175,1173,1,0,0,0,1176,1178,3,86,43,1,1177,1119,1,0,0,0,1177,
		1121,1,0,0,0,1177,1122,1,0,0,0,1177,1123,1,0,0,0,1177,1129,1,0,0,0,1177,
		1131,1,0,0,0,1177,1143,1,0,0,0,1177,1144,1,0,0,0,1177,1149,1,0,0,0,1177,
		1153,1,0,0,0,1177,1155,1,0,0,0,1177,1157,1,0,0,0,1177,1159,1,0,0,0,1178,
		1438,1,0,0,0,1179,1180,10,20,0,0,1180,1184,5,66,0,0,1181,1183,5,118,0,
		0,1182,1181,1,0,0,0,1183,1186,1,0,0,0,1184,1182,1,0,0,0,1184,1185,1,0,
		0,0,1185,1187,1,0,0,0,1186,1184,1,0,0,0,1187,1437,3,86,43,21,1188,1189,
		10,17,0,0,1189,1193,7,9,0,0,1190,1192,5,118,0,0,1191,1190,1,0,0,0,1192,
		1195,1,0,0,0,1193,1191,1,0,0,0,1193,1194,1,0,0,0,1194,1196,1,0,0,0,1195,
		1193,1,0,0,0,1196,1437,3,86,43,18,1197,1198,10,16,0,0,1198,1202,7,7,0,
		0,1199,1201,5,118,0,0,1200,1199,1,0,0,0,1201,1204,1,0,0,0,1202,1200,1,
		0,0,0,1202,1203,1,0,0,0,1203,1205,1,0,0,0,1204,1202,1,0,0,0,1205,1437,
		3,86,43,17,1206,1207,10,15,0,0,1207,1211,7,10,0,0,1208,1210,5,118,0,0,
		1209,1208,1,0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,1211,1212,1,0,0,
		0,1212,1214,1,0,0,0,1213,1211,1,0,0,0,1214,1437,3,86,43,16,1215,1222,10,
		14,0,0,1216,1223,5,67,0,0,1217,1218,5,90,0,0,1218,1223,5,90,0,0,1219,1220,
		5,90,0,0,1220,1221,5,90,0,0,1221,1223,5,90,0,0,1222,1216,1,0,0,0,1222,
		1217,1,0,0,0,1222,1219,1,0,0,0,1223,1227,1,0,0,0,1224,1226,5,118,0,0,1225,
		1224,1,0,0,0,1226,1229,1,0,0,0,1227,1225,1,0,0,0,1227,1228,1,0,0,0,1228,
		1230,1,0,0,0,1229,1227,1,0,0,0,1230,1437,3,86,43,15,1231,1232,10,13,0,
		0,1232,1236,5,32,0,0,1233,1235,5,118,0,0,1234,1233,1,0,0,0,1235,1238,1,
		0,0,0,1236,1234,1,0,0,0,1236,1237,1,0,0,0,1237,1239,1,0,0,0,1238,1236,
		1,0,0,0,1239,1437,3,86,43,14,1240,1241,10,11,0,0,1241,1245,7,11,0,0,1242,
		1244,5,118,0,0,1243,1242,1,0,0,0,1244,1247,1,0,0,0,1245,1243,1,0,0,0,1245,
		1246,1,0,0,0,1246,1248,1,0,0,0,1247,1245,1,0,0,0,1248,1437,3,86,43,12,
		1249,1250,10,10,0,0,1250,1254,7,12,0,0,1251,1253,5,118,0,0,1252,1251,1,
		0,0,0,1253,1256,1,0,0,0,1254,1252,1,0,0,0,1254,1255,1,0,0,0,1255,1257,
		1,0,0,0,1256,1254,1,0,0,0,1257,1437,3,86,43,11,1258,1259,10,9,0,0,1259,
		1263,7,13,0,0,1260,1262,5,118,0,0,1261,1260,1,0,0,0,1262,1265,1,0,0,0,
		1263,1261,1,0,0,0,1263,1264,1,0,0,0,1264,1266,1,0,0,0,1265,1263,1,0,0,
		0,1266,1437,3,86,43,10,1267,1268,10,8,0,0,1268,1272,5,100,0,0,1269,1271,
		5,118,0,0,1270,1269,1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1272,1273,
		1,0,0,0,1273,1275,1,0,0,0,1274,1272,1,0,0,0,1275,1437,3,86,43,9,1276,1277,
		10,7,0,0,1277,1281,5,101,0,0,1278,1280,5,118,0,0,1279,1278,1,0,0,0,1280,
		1283,1,0,0,0,1281,1279,1,0,0,0,1281,1282,1,0,0,0,1282,1284,1,0,0,0,1283,
		1281,1,0,0,0,1284,1437,3,86,43,8,1285,1286,10,6,0,0,1286,1290,5,92,0,0,
		1287,1289,5,118,0,0,1288,1287,1,0,0,0,1289,1292,1,0,0,0,1290,1288,1,0,
		0,0,1290,1291,1,0,0,0,1291,1293,1,0,0,0,1292,1290,1,0,0,0,1293,1437,3,
		86,43,7,1294,1298,10,5,0,0,1295,1297,5,118,0,0,1296,1295,1,0,0,0,1297,
		1300,1,0,0,0,1298,1296,1,0,0,0,1298,1299,1,0,0,0,1299,1301,1,0,0,0,1300,
		1298,1,0,0,0,1301,1305,5,74,0,0,1302,1304,5,118,0,0,1303,1302,1,0,0,0,
		1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,1308,1,0,0,
		0,1307,1305,1,0,0,0,1308,1437,3,86,43,6,1309,1313,10,4,0,0,1310,1312,5,
		118,0,0,1311,1310,1,0,0,0,1312,1315,1,0,0,0,1313,1311,1,0,0,0,1313,1314,
		1,0,0,0,1314,1316,1,0,0,0,1315,1313,1,0,0,0,1316,1320,5,75,0,0,1317,1319,
		5,118,0,0,1318,1317,1,0,0,0,1319,1322,1,0,0,0,1320,1318,1,0,0,0,1320,1321,
		1,0,0,0,1321,1323,1,0,0,0,1322,1320,1,0,0,0,1323,1437,3,86,43,5,1324,1328,
		10,3,0,0,1325,1327,5,118,0,0,1326,1325,1,0,0,0,1327,1330,1,0,0,0,1328,
		1326,1,0,0,0,1328,1329,1,0,0,0,1329,1348,1,0,0,0,1330,1328,1,0,0,0,1331,
		1335,5,102,0,0,1332,1334,5,118,0,0,1333,1332,1,0,0,0,1334,1337,1,0,0,0,
		1335,1333,1,0,0,0,1335,1336,1,0,0,0,1336,1338,1,0,0,0,1337,1335,1,0,0,
		0,1338,1342,3,86,43,0,1339,1341,5,118,0,0,1340,1339,1,0,0,0,1341,1344,
		1,0,0,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,0,1344,1342,
		1,0,0,0,1345,1346,5,91,0,0,1346,1349,1,0,0,0,1347,1349,5,56,0,0,1348,1331,
		1,0,0,0,1348,1347,1,0,0,0,1349,1353,1,0,0,0,1350,1352,5,118,0,0,1351,1350,
		1,0,0,0,1352,1355,1,0,0,0,1353,1351,1,0,0,0,1353,1354,1,0,0,0,1354,1356,
		1,0,0,0,1355,1353,1,0,0,0,1356,1437,3,86,43,3,1357,1358,10,2,0,0,1358,
		1362,7,14,0,0,1359,1361,5,118,0,0,1360,1359,1,0,0,0,1361,1364,1,0,0,0,
		1362,1360,1,0,0,0,1362,1363,1,0,0,0,1363,1365,1,0,0,0,1364,1362,1,0,0,
		0,1365,1437,3,86,43,2,1366,1370,10,30,0,0,1367,1369,5,118,0,0,1368,1367,
		1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,1,0,0,0,1371,1373,
		1,0,0,0,1372,1370,1,0,0,0,1373,1381,7,15,0,0,1374,1382,3,118,59,0,1375,
		1382,5,9,0,0,1376,1382,3,82,41,0,1377,1378,5,3,0,0,1378,1379,3,86,43,0,
		1379,1380,5,4,0,0,1380,1382,1,0,0,0,1381,1374,1,0,0,0,1381,1375,1,0,0,
		0,1381,1376,1,0,0,0,1381,1377,1,0,0,0,1382,1437,1,0,0,0,1383,1384,10,28,
		0,0,1384,1437,7,8,0,0,1385,1386,10,27,0,0,1386,1395,5,5,0,0,1387,1392,
		3,86,43,0,1388,1389,5,86,0,0,1389,1391,3,86,43,0,1390,1388,1,0,0,0,1391,
		1394,1,0,0,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1396,1,0,0,0,1394,
		1392,1,0,0,0,1395,1387,1,0,0,0,1395,1396,1,0,0,0,1396,1397,1,0,0,0,1397,
		1437,5,6,0,0,1398,1402,10,26,0,0,1399,1401,5,118,0,0,1400,1399,1,0,0,0,
		1401,1404,1,0,0,0,1402,1400,1,0,0,0,1402,1403,1,0,0,0,1403,1405,1,0,0,
		0,1404,1402,1,0,0,0,1405,1409,7,16,0,0,1406,1408,5,118,0,0,1407,1406,1,
		0,0,0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,1409,1410,1,0,0,0,1410,1413,
		1,0,0,0,1411,1409,1,0,0,0,1412,1414,3,38,19,0,1413,1412,1,0,0,0,1413,1414,
		1,0,0,0,1414,1415,1,0,0,0,1415,1419,3,94,47,0,1416,1418,3,96,48,0,1417,
		1416,1,0,0,0,1418,1421,1,0,0,0,1419,1417,1,0,0,0,1419,1420,1,0,0,0,1420,
		1425,1,0,0,0,1421,1419,1,0,0,0,1422,1426,5,119,0,0,1423,1426,5,9,0,0,1424,
		1426,3,82,41,0,1425,1422,1,0,0,0,1425,1423,1,0,0,0,1425,1424,1,0,0,0,1425,
		1426,1,0,0,0,1426,1437,1,0,0,0,1427,1428,10,12,0,0,1428,1432,7,17,0,0,
		1429,1431,5,118,0,0,1430,1429,1,0,0,0,1431,1434,1,0,0,0,1432,1430,1,0,
		0,0,1432,1433,1,0,0,0,1433,1435,1,0,0,0,1434,1432,1,0,0,0,1435,1437,3,
		102,51,0,1436,1179,1,0,0,0,1436,1188,1,0,0,0,1436,1197,1,0,0,0,1436,1206,
		1,0,0,0,1436,1215,1,0,0,0,1436,1231,1,0,0,0,1436,1240,1,0,0,0,1436,1249,
		1,0,0,0,1436,1258,1,0,0,0,1436,1267,1,0,0,0,1436,1276,1,0,0,0,1436,1285,
		1,0,0,0,1436,1294,1,0,0,0,1436,1309,1,0,0,0,1436,1324,1,0,0,0,1436,1357,
		1,0,0,0,1436,1366,1,0,0,0,1436,1383,1,0,0,0,1436,1385,1,0,0,0,1436,1398,
		1,0,0,0,1436,1427,1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1438,1439,
		1,0,0,0,1439,87,1,0,0,0,1440,1438,1,0,0,0,1441,1550,5,9,0,0,1442,1550,
		3,82,41,0,1443,1550,5,15,0,0,1444,1550,5,16,0,0,1445,1550,5,26,0,0,1446,
		1550,7,4,0,0,1447,1550,5,119,0,0,1448,1550,3,90,45,0,1449,1550,3,78,39,
		0,1450,1454,5,5,0,0,1451,1453,5,118,0,0,1452,1451,1,0,0,0,1453,1456,1,
		0,0,0,1454,1452,1,0,0,0,1454,1455,1,0,0,0,1455,1486,1,0,0,0,1456,1454,
		1,0,0,0,1457,1480,3,86,43,0,1458,1460,5,118,0,0,1459,1458,1,0,0,0,1460,
		1463,1,0,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,0,1462,1464,1,0,0,0,1463,
		1461,1,0,0,0,1464,1468,5,86,0,0,1465,1467,5,118,0,0,1466,1465,1,0,0,0,
		1467,1470,1,0,0,0,1468,1466,1,0,0,0,1468,1469,1,0,0,0,1469,1471,1,0,0,
		0,1470,1468,1,0,0,0,1471,1475,3,86,43,0,1472,1474,5,118,0,0,1473,1472,
		1,0,0,0,1474,1477,1,0,0,0,1475,1473,1,0,0,0,1475,1476,1,0,0,0,1476,1479,
		1,0,0,0,1477,1475,1,0,0,0,1478,1461,1,0,0,0,1479,1482,1,0,0,0,1480,1478,
		1,0,0,0,1480,1481,1,0,0,0,1481,1484,1,0,0,0,1482,1480,1,0,0,0,1483,1485,
		5,86,0,0,1484,1483,1,0,0,0,1484,1485,1,0,0,0,1485,1487,1,0,0,0,1486,1457,
		1,0,0,0,1486,1487,1,0,0,0,1487,1491,1,0,0,0,1488,1490,5,118,0,0,1489,1488,
		1,0,0,0,1490,1493,1,0,0,0,1491,1489,1,0,0,0,1491,1492,1,0,0,0,1492,1494,
		1,0,0,0,1493,1491,1,0,0,0,1494,1550,5,6,0,0,1495,1499,5,5,0,0,1496,1498,
		5,118,0,0,1497,1496,1,0,0,0,1498,1501,1,0,0,0,1499,1497,1,0,0,0,1499,1500,
		1,0,0,0,1500,1538,1,0,0,0,1501,1499,1,0,0,0,1502,1506,5,91,0,0,1503,1505,
		5,118,0,0,1504,1503,1,0,0,0,1505,1508,1,0,0,0,1506,1504,1,0,0,0,1506,1507,
		1,0,0,0,1507,1539,1,0,0,0,1508,1506,1,0,0,0,1509,1532,3,108,54,0,1510,
		1512,5,118,0,0,1511,1510,1,0,0,0,1512,1515,1,0,0,0,1513,1511,1,0,0,0,1513,
		1514,1,0,0,0,1514,1516,1,0,0,0,1515,1513,1,0,0,0,1516,1520,5,86,0,0,1517,
		1519,5,118,0,0,1518,1517,1,0,0,0,1519,1522,1,0,0,0,1520,1518,1,0,0,0,1520,
		1521,1,0,0,0,1521,1523,1,0,0,0,1522,1520,1,0,0,0,1523,1527,3,108,54,0,
		1524,1526,5,118,0,0,1525,1524,1,0,0,0,1526,1529,1,0,0,0,1527,1525,1,0,
		0,0,1527,1528,1,0,0,0,1528,1531,1,0,0,0,1529,1527,1,0,0,0,1530,1513,1,
		0,0,0,1531,1534,1,0,0,0,1532,1530,1,0,0,0,1532,1533,1,0,0,0,1533,1536,
		1,0,0,0,1534,1532,1,0,0,0,1535,1537,5,86,0,0,1536,1535,1,0,0,0,1536,1537,
		1,0,0,0,1537,1539,1,0,0,0,1538,1502,1,0,0,0,1538,1509,1,0,0,0,1539,1543,
		1,0,0,0,1540,1542,5,118,0,0,1541,1540,1,0,0,0,1542,1545,1,0,0,0,1543,1541,
		1,0,0,0,1543,1544,1,0,0,0,1544,1546,1,0,0,0,1545,1543,1,0,0,0,1546,1550,
		5,6,0,0,1547,1550,3,58,29,0,1548,1550,3,56,28,0,1549,1441,1,0,0,0,1549,
		1442,1,0,0,0,1549,1443,1,0,0,0,1549,1444,1,0,0,0,1549,1445,1,0,0,0,1549,
		1446,1,0,0,0,1549,1447,1,0,0,0,1549,1448,1,0,0,0,1549,1449,1,0,0,0,1549,
		1450,1,0,0,0,1549,1495,1,0,0,0,1549,1547,1,0,0,0,1549,1548,1,0,0,0,1550,
		89,1,0,0,0,1551,1554,3,100,50,0,1552,1553,5,85,0,0,1553,1555,5,17,0,0,
		1554,1552,1,0,0,0,1554,1555,1,0,0,0,1555,91,1,0,0,0,1556,1560,5,3,0,0,
		1557,1559,5,118,0,0,1558,1557,1,0,0,0,1559,1562,1,0,0,0,1560,1558,1,0,
		0,0,1560,1561,1,0,0,0,1561,1564,1,0,0,0,1562,1560,1,0,0,0,1563,1565,3,
		114,57,0,1564,1563,1,0,0,0,1564,1565,1,0,0,0,1565,1569,1,0,0,0,1566,1568,
		5,118,0,0,1567,1566,1,0,0,0,1568,1571,1,0,0,0,1569,1567,1,0,0,0,1569,1570,
		1,0,0,0,1570,1572,1,0,0,0,1571,1569,1,0,0,0,1572,1576,5,4,0,0,1573,1575,
		3,78,39,0,1574,1573,1,0,0,0,1575,1578,1,0,0,0,1576,1574,1,0,0,0,1576,1577,
		1,0,0,0,1577,93,1,0,0,0,1578,1576,1,0,0,0,1579,1587,3,118,59,0,1580,1587,
		5,9,0,0,1581,1587,3,82,41,0,1582,1583,5,3,0,0,1583,1584,3,86,43,0,1584,
		1585,5,4,0,0,1585,1587,1,0,0,0,1586,1579,1,0,0,0,1586,1580,1,0,0,0,1586,
		1581,1,0,0,0,1586,1582,1,0,0,0,1587,1589,1,0,0,0,1588,1590,3,92,46,0,1589,
		1588,1,0,0,0,1590,1591,1,0,0,0,1591,1589,1,0,0,0,1591,1592,1,0,0,0,1592,
		1605,1,0,0,0,1593,1601,4,47,35,0,1594,1602,3,118,59,0,1595,1602,5,9,0,
		0,1596,1602,3,82,41,0,1597,1598,5,3,0,0,1598,1599,3,86,43,0,1599,1600,
		5,4,0,0,1600,1602,1,0,0,0,1601,1594,1,0,0,0,1601,1595,1,0,0,0,1601,1596,
		1,0,0,0,1601,1597,1,0,0,0,1602,1603,1,0,0,0,1603,1605,3,114,57,0,1604,
		1586,1,0,0,0,1604,1593,1,0,0,0,1605,95,1,0,0,0,1606,1610,5,119,0,0,1607,
		1610,5,9,0,0,1608,1610,3,82,41,0,1609,1606,1,0,0,0,1609,1607,1,0,0,0,1609,
		1608,1,0,0,0,1610,1612,1,0,0,0,1611,1613,3,92,46,0,1612,1611,1,0,0,0,1613,
		1614,1,0,0,0,1614,1612,1,0,0,0,1614,1615,1,0,0,0,1615,1624,1,0,0,0,1616,
		1620,4,48,36,0,1617,1621,5,119,0,0,1618,1621,5,9,0,0,1619,1621,3,82,41,
		0,1620,1617,1,0,0,0,1620,1618,1,0,0,0,1620,1619,1,0,0,0,1621,1622,1,0,
		0,0,1622,1624,3,114,57,0,1623,1609,1,0,0,0,1623,1616,1,0,0,0,1624,97,1,
		0,0,0,1625,1627,3,88,44,0,1626,1628,3,92,46,0,1627,1626,1,0,0,0,1628,1629,
		1,0,0,0,1629,1627,1,0,0,0,1629,1630,1,0,0,0,1630,1645,1,0,0,0,1631,1632,
		4,49,37,0,1632,1633,3,78,39,0,1633,1634,3,114,57,0,1634,1645,1,0,0,0,1635,
		1636,4,49,38,0,1636,1637,5,3,0,0,1637,1638,3,86,43,0,1638,1640,5,4,0,0,
		1639,1641,3,92,46,0,1640,1639,1,0,0,0,1641,1642,1,0,0,0,1642,1640,1,0,
		0,0,1642,1643,1,0,0,0,1643,1645,1,0,0,0,1644,1625,1,0,0,0,1644,1631,1,
		0,0,0,1644,1635,1,0,0,0,1645,99,1,0,0,0,1646,1649,4,50,39,0,1647,1650,
		5,106,0,0,1648,1650,3,74,37,0,1649,1647,1,0,0,0,1649,1648,1,0,0,0,1650,
		101,1,0,0,0,1651,1653,3,100,50,0,1652,1654,3,104,52,0,1653,1652,1,0,0,
		0,1653,1654,1,0,0,0,1654,1659,1,0,0,0,1655,1656,5,5,0,0,1656,1658,5,6,
		0,0,1657,1655,1,0,0,0,1658,1661,1,0,0,0,1659,1657,1,0,0,0,1659,1660,1,
		0,0,0,1660,1664,1,0,0,0,1661,1659,1,0,0,0,1662,1663,5,103,0,0,1663,1665,
		4,51,40,0,1664,1662,1,0,0,0,1664,1665,1,0,0,0,1665,103,1,0,0,0,1666,1667,
		5,89,0,0,1667,1672,3,106,53,0,1668,1669,5,86,0,0,1669,1671,3,106,53,0,
		1670,1668,1,0,0,0,1671,1674,1,0,0,0,1672,1670,1,0,0,0,1672,1673,1,0,0,
		0,1673,1675,1,0,0,0,1674,1672,1,0,0,0,1675,1676,5,90,0,0,1676,105,1,0,
		0,0,1677,1686,3,102,51,0,1678,1683,5,102,0,0,1679,1680,5,23,0,0,1680,1684,
		3,102,51,0,1681,1682,5,30,0,0,1682,1684,3,102,51,0,1683,1679,1,0,0,0,1683,
		1681,1,0,0,0,1683,1684,1,0,0,0,1684,1686,1,0,0,0,1685,1677,1,0,0,0,1685,
		1678,1,0,0,0,1686,107,1,0,0,0,1687,1688,5,9,0,0,1688,1689,5,91,0,0,1689,
		1714,3,86,43,0,1690,1691,3,82,41,0,1691,1692,5,91,0,0,1692,1693,3,86,43,
		0,1693,1714,1,0,0,0,1694,1695,3,118,59,0,1695,1696,5,91,0,0,1696,1697,
		3,86,43,0,1697,1714,1,0,0,0,1698,1699,5,3,0,0,1699,1700,3,86,43,0,1700,
		1701,5,4,0,0,1701,1702,5,91,0,0,1702,1703,3,86,43,0,1703,1714,1,0,0,0,
		1704,1705,5,95,0,0,1705,1706,5,91,0,0,1706,1714,3,86,43,0,1707,1708,5,
		15,0,0,1708,1709,5,91,0,0,1709,1714,3,86,43,0,1710,1711,5,16,0,0,1711,
		1712,5,91,0,0,1712,1714,3,86,43,0,1713,1687,1,0,0,0,1713,1690,1,0,0,0,
		1713,1694,1,0,0,0,1713,1698,1,0,0,0,1713,1704,1,0,0,0,1713,1707,1,0,0,
		0,1713,1710,1,0,0,0,1714,109,1,0,0,0,1715,1720,5,107,0,0,1716,1720,5,109,
		0,0,1717,1720,7,18,0,0,1718,1720,5,115,0,0,1719,1715,1,0,0,0,1719,1716,
		1,0,0,0,1719,1717,1,0,0,0,1719,1718,1,0,0,0,1720,111,1,0,0,0,1721,1729,
		5,107,0,0,1722,1729,5,109,0,0,1723,1729,7,18,0,0,1724,1729,5,112,0,0,1725,
		1729,5,114,0,0,1726,1729,5,111,0,0,1727,1729,5,113,0,0,1728,1721,1,0,0,
		0,1728,1722,1,0,0,0,1728,1723,1,0,0,0,1728,1724,1,0,0,0,1728,1725,1,0,
		0,0,1728,1726,1,0,0,0,1728,1727,1,0,0,0,1729,113,1,0,0,0,1730,1732,3,78,
		39,0,1731,1730,1,0,0,0,1732,1733,1,0,0,0,1733,1731,1,0,0,0,1733,1734,1,
		0,0,0,1734,1756,1,0,0,0,1735,1752,3,116,58,0,1736,1738,5,118,0,0,1737,
		1736,1,0,0,0,1738,1741,1,0,0,0,1739,1737,1,0,0,0,1739,1740,1,0,0,0,1740,
		1742,1,0,0,0,1741,1739,1,0,0,0,1742,1746,5,86,0,0,1743,1745,5,118,0,0,
		1744,1743,1,0,0,0,1745,1748,1,0,0,0,1746,1744,1,0,0,0,1746,1747,1,0,0,
		0,1747,1749,1,0,0,0,1748,1746,1,0,0,0,1749,1751,3,116,58,0,1750,1739,1,
		0,0,0,1751,1754,1,0,0,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,1756,
		1,0,0,0,1754,1752,1,0,0,0,1755,1731,1,0,0,0,1755,1735,1,0,0,0,1756,115,
		1,0,0,0,1757,1760,3,108,54,0,1758,1760,3,86,43,0,1759,1757,1,0,0,0,1759,
		1758,1,0,0,0,1760,117,1,0,0,0,1761,1764,5,119,0,0,1762,1764,3,120,60,0,
		1763,1761,1,0,0,0,1763,1762,1,0,0,0,1764,119,1,0,0,0,1765,1766,7,19,0,
		0,1766,121,1,0,0,0,257,123,128,132,137,148,150,156,160,165,173,178,180,
		183,191,197,199,202,206,213,218,222,229,237,239,242,252,258,263,267,272,
		276,279,284,294,301,307,315,322,327,334,338,341,348,350,357,360,368,376,
		382,389,397,404,415,426,428,435,438,445,452,457,462,472,483,485,489,492,
		499,505,513,518,522,526,535,545,549,552,559,566,574,586,589,597,605,610,
		618,623,627,630,637,641,646,652,656,660,665,672,677,683,686,693,697,705,
		713,717,720,728,731,737,741,746,752,762,771,775,779,785,792,801,816,828,
		835,842,846,855,867,873,875,885,887,889,897,900,903,907,911,921,925,934,
		944,949,953,959,965,972,979,988,994,1000,1007,1014,1027,1029,1036,1045,
		1052,1059,1066,1069,1072,1079,1083,1091,1102,1105,1117,1126,1135,1141,
		1165,1173,1177,1184,1193,1202,1211,1222,1227,1236,1245,1254,1263,1272,
		1281,1290,1298,1305,1313,1320,1328,1335,1342,1348,1353,1362,1370,1381,
		1392,1395,1402,1409,1413,1419,1425,1432,1436,1438,1454,1461,1468,1475,
		1480,1484,1486,1491,1499,1506,1513,1520,1527,1532,1536,1538,1543,1549,
		1554,1560,1564,1569,1576,1586,1591,1601,1604,1609,1614,1620,1623,1629,
		1642,1644,1649,1653,1659,1664,1672,1683,1685,1713,1719,1728,1733,1739,
		1746,1752,1755,1759,1763
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
