//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GroovyParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using TYTCapstone;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

namespace TYTCapstone;

/// <summary>
/// This class provides an empty implementation of <see cref="IGroovyParserVisitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class GroovyParserBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IGroovyParserVisitor<Result>
{
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.compilationUnit"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitCompilationUnit([NotNull] GroovyParser.CompilationUnitContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.scriptPart"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitScriptPart([NotNull] GroovyParser.ScriptPartContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.packageDefinition"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitPackageDefinition([NotNull] GroovyParser.PackageDefinitionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.importStatement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitImportStatement([NotNull] GroovyParser.ImportStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classDeclaration"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClassDeclaration([NotNull] GroovyParser.ClassDeclarationContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classMember"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClassMember([NotNull] GroovyParser.ClassMemberContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.enumConstant"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitEnumConstant([NotNull] GroovyParser.EnumConstantContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classBody"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClassBody([NotNull] GroovyParser.ClassBodyContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.implementsClause"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitImplementsClause([NotNull] GroovyParser.ImplementsClauseContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.extendsClause"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitExtendsClause([NotNull] GroovyParser.ExtendsClauseContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.methodDeclaration"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitMethodDeclaration([NotNull] GroovyParser.MethodDeclarationContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.fieldDeclaration"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitFieldDeclaration([NotNull] GroovyParser.FieldDeclarationContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.declarationRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitDeclarationRule([NotNull] GroovyParser.DeclarationRuleContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.objectInitializer"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitObjectInitializer([NotNull] GroovyParser.ObjectInitializerContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classInitializer"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClassInitializer([NotNull] GroovyParser.ClassInitializerContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.typeDeclaration"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTypeDeclaration([NotNull] GroovyParser.TypeDeclarationContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.annotationClause"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationClause([NotNull] GroovyParser.AnnotationClauseContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.annotationElementPair"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationElementPair([NotNull] GroovyParser.AnnotationElementPairContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.annotationElement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationElement([NotNull] GroovyParser.AnnotationElementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.genericDeclarationList"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitGenericDeclarationList([NotNull] GroovyParser.GenericDeclarationListContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.genericsDeclarationElement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitGenericsDeclarationElement([NotNull] GroovyParser.GenericsDeclarationElementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.throwsClause"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitThrowsClause([NotNull] GroovyParser.ThrowsClauseContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.argumentDeclarationList"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitArgumentDeclarationList([NotNull] GroovyParser.ArgumentDeclarationListContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.argumentDeclaration"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitArgumentDeclaration([NotNull] GroovyParser.ArgumentDeclarationContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.blockStatement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitBlockStatement([NotNull] GroovyParser.BlockStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.singleDeclaration"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitSingleDeclaration([NotNull] GroovyParser.SingleDeclarationContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.tupleDeclaration"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTupleDeclaration([NotNull] GroovyParser.TupleDeclarationContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.tupleVariableDeclaration"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTupleVariableDeclaration([NotNull] GroovyParser.TupleVariableDeclarationContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.newInstanceRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNewInstanceRule([NotNull] GroovyParser.NewInstanceRuleContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.newArrayRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNewArrayRule([NotNull] GroovyParser.NewArrayRuleContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>declarationStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitDeclarationStatement([NotNull] GroovyParser.DeclarationStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>newArrayStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNewArrayStatement([NotNull] GroovyParser.NewArrayStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>newInstanceStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNewInstanceStatement([NotNull] GroovyParser.NewInstanceStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>classicForStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClassicForStatement([NotNull] GroovyParser.ClassicForStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>forInStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitForInStatement([NotNull] GroovyParser.ForInStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>forColonStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitForColonStatement([NotNull] GroovyParser.ForColonStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>ifStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitIfStatement([NotNull] GroovyParser.IfStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>whileStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitWhileStatement([NotNull] GroovyParser.WhileStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>switchStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitSwitchStatement([NotNull] GroovyParser.SwitchStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>tryCatchFinallyStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTryCatchFinallyStatement([NotNull] GroovyParser.TryCatchFinallyStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>controlStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitControlStatement([NotNull] GroovyParser.ControlStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>returnStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitReturnStatement([NotNull] GroovyParser.ReturnStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>throwStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitThrowStatement([NotNull] GroovyParser.ThrowStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>assertStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAssertStatement([NotNull] GroovyParser.AssertStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>synchronizedStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitSynchronizedStatement([NotNull] GroovyParser.SynchronizedStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>labeledStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitLabeledStatement([NotNull] GroovyParser.LabeledStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>expressionStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitExpressionStatement([NotNull] GroovyParser.ExpressionStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.blockStatementWithCurve"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitBlockStatementWithCurve([NotNull] GroovyParser.BlockStatementWithCurveContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.statementBlock"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitStatementBlock([NotNull] GroovyParser.StatementBlockContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.tryBlock"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTryBlock([NotNull] GroovyParser.TryBlockContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.catchBlock"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitCatchBlock([NotNull] GroovyParser.CatchBlockContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.finallyBlock"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitFinallyBlock([NotNull] GroovyParser.FinallyBlockContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.caseStatement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitCaseStatement([NotNull] GroovyParser.CaseStatementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.pathExpression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitPathExpression([NotNull] GroovyParser.PathExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.gstringPathExpression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitGstringPathExpression([NotNull] GroovyParser.GstringPathExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.closureExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClosureExpressionRule([NotNull] GroovyParser.ClosureExpressionRuleContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.gstringExpressionBody"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitGstringExpressionBody([NotNull] GroovyParser.GstringExpressionBodyContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.gstring"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitGstring([NotNull] GroovyParser.GstringContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamArrayExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationParamArrayExpression([NotNull] GroovyParser.AnnotationParamArrayExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamClassConstantExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationParamClassConstantExpression([NotNull] GroovyParser.AnnotationParamClassConstantExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamPathExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationParamPathExpression([NotNull] GroovyParser.AnnotationParamPathExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamClassExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationParamClassExpression([NotNull] GroovyParser.AnnotationParamClassExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamStringExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationParamStringExpression([NotNull] GroovyParser.AnnotationParamStringExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamDecimalExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationParamDecimalExpression([NotNull] GroovyParser.AnnotationParamDecimalExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamIntegerExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationParamIntegerExpression([NotNull] GroovyParser.AnnotationParamIntegerExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamNullExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationParamNullExpression([NotNull] GroovyParser.AnnotationParamNullExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamBoolExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationParamBoolExpression([NotNull] GroovyParser.AnnotationParamBoolExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamClosureExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAnnotationParamClosureExpression([NotNull] GroovyParser.AnnotationParamClosureExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>cmdExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitCmdExpression([NotNull] GroovyParser.CmdExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>spreadExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitSpreadExpression([NotNull] GroovyParser.SpreadExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>parenthesisExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitParenthesisExpression([NotNull] GroovyParser.ParenthesisExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>assignmentExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAssignmentExpression([NotNull] GroovyParser.AssignmentExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>superExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitSuperExpression([NotNull] GroovyParser.SuperExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>constructorCallExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitConstructorCallExpression([NotNull] GroovyParser.ConstructorCallExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>binaryExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitBinaryExpression([NotNull] GroovyParser.BinaryExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>castExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitCastExpression([NotNull] GroovyParser.CastExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>callExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitCallExpression([NotNull] GroovyParser.CallExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>prefixExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitPrefixExpression([NotNull] GroovyParser.PrefixExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>fieldAccessExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitFieldAccessExpression([NotNull] GroovyParser.FieldAccessExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>atomExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitAtomExpression([NotNull] GroovyParser.AtomExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>thisExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitThisExpression([NotNull] GroovyParser.ThisExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>indexExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitIndexExpression([NotNull] GroovyParser.IndexExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>unaryExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitUnaryExpression([NotNull] GroovyParser.UnaryExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>ternaryExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitTernaryExpression([NotNull] GroovyParser.TernaryExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>postfixExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitPostfixExpression([NotNull] GroovyParser.PostfixExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>constantExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitConstantExpression([NotNull] GroovyParser.ConstantExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>gstringExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitGstringExpression([NotNull] GroovyParser.GstringExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>constantDecimalExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitConstantDecimalExpression([NotNull] GroovyParser.ConstantDecimalExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>constantIntegerExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitConstantIntegerExpression([NotNull] GroovyParser.ConstantIntegerExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>nullExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNullExpression([NotNull] GroovyParser.NullExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>boolExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitBoolExpression([NotNull] GroovyParser.BoolExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>variableExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitVariableExpression([NotNull] GroovyParser.VariableExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>classConstantExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClassConstantExpression([NotNull] GroovyParser.ClassConstantExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>closureExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClosureExpression([NotNull] GroovyParser.ClosureExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>listConstructor</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitListConstructor([NotNull] GroovyParser.ListConstructorContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>mapConstructor</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitMapConstructor([NotNull] GroovyParser.MapConstructorContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>newArrayExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNewArrayExpression([NotNull] GroovyParser.NewArrayExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>newInstanceExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNewInstanceExpression([NotNull] GroovyParser.NewInstanceExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classConstantRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClassConstantRule([NotNull] GroovyParser.ClassConstantRuleContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.argumentListRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitArgumentListRule([NotNull] GroovyParser.ArgumentListRuleContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.callExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitCallExpressionRule([NotNull] GroovyParser.CallExpressionRuleContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.nonKwCallExpressionRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitNonKwCallExpressionRule([NotNull] GroovyParser.NonKwCallExpressionRuleContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.callRule"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitCallRule([NotNull] GroovyParser.CallRuleContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classNameExpression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClassNameExpression([NotNull] GroovyParser.ClassNameExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.genericClassNameExpression"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitGenericClassNameExpression([NotNull] GroovyParser.GenericClassNameExpressionContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.genericList"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitGenericList([NotNull] GroovyParser.GenericListContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>genericsConcreteElement</c>
    /// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitGenericsConcreteElement([NotNull] GroovyParser.GenericsConcreteElementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by the <c>genericsWildcardElement</c>
    /// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitGenericsWildcardElement([NotNull] GroovyParser.GenericsWildcardElementContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.mapEntry"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitMapEntry([NotNull] GroovyParser.MapEntryContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classModifier"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitClassModifier([NotNull] GroovyParser.ClassModifierContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.memberModifier"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitMemberModifier([NotNull] GroovyParser.MemberModifierContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.argumentList"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitArgumentList([NotNull] GroovyParser.ArgumentListContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.argument"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitArgument([NotNull] GroovyParser.ArgumentContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.selectorName"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitSelectorName([NotNull] GroovyParser.SelectorNameContext context) { return VisitChildren(context); }
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.kwSelectorName"/>.
    /// <para>
    /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
    /// on <paramref name="context"/>.
    /// </para>
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    public virtual Result VisitKwSelectorName([NotNull] GroovyParser.KwSelectorNameContext context) { return VisitChildren(context); }
}
