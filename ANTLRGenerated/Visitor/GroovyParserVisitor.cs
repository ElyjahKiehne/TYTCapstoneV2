//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GroovyParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using TYTCapstone;
using IToken = Antlr4.Runtime.IToken;

namespace TYTCapstone;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="GroovyParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IGroovyParserVisitor<Result> : IParseTreeVisitor<Result>
{
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.compilationUnit"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitCompilationUnit([NotNull] GroovyParser.CompilationUnitContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.scriptPart"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitScriptPart([NotNull] GroovyParser.ScriptPartContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.packageDefinition"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitPackageDefinition([NotNull] GroovyParser.PackageDefinitionContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.importStatement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitImportStatement([NotNull] GroovyParser.ImportStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classDeclaration"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClassDeclaration([NotNull] GroovyParser.ClassDeclarationContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classMember"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClassMember([NotNull] GroovyParser.ClassMemberContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.enumConstant"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitEnumConstant([NotNull] GroovyParser.EnumConstantContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classBody"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClassBody([NotNull] GroovyParser.ClassBodyContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.implementsClause"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitImplementsClause([NotNull] GroovyParser.ImplementsClauseContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.extendsClause"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitExtendsClause([NotNull] GroovyParser.ExtendsClauseContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.methodDeclaration"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitMethodDeclaration([NotNull] GroovyParser.MethodDeclarationContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.fieldDeclaration"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitFieldDeclaration([NotNull] GroovyParser.FieldDeclarationContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.declarationRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitDeclarationRule([NotNull] GroovyParser.DeclarationRuleContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.objectInitializer"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitObjectInitializer([NotNull] GroovyParser.ObjectInitializerContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classInitializer"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClassInitializer([NotNull] GroovyParser.ClassInitializerContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.typeDeclaration"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitTypeDeclaration([NotNull] GroovyParser.TypeDeclarationContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.annotationClause"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationClause([NotNull] GroovyParser.AnnotationClauseContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.annotationElementPair"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationElementPair([NotNull] GroovyParser.AnnotationElementPairContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.annotationElement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationElement([NotNull] GroovyParser.AnnotationElementContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.genericDeclarationList"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitGenericDeclarationList([NotNull] GroovyParser.GenericDeclarationListContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.genericsDeclarationElement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitGenericsDeclarationElement([NotNull] GroovyParser.GenericsDeclarationElementContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.throwsClause"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitThrowsClause([NotNull] GroovyParser.ThrowsClauseContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.argumentDeclarationList"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitArgumentDeclarationList([NotNull] GroovyParser.ArgumentDeclarationListContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.argumentDeclaration"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitArgumentDeclaration([NotNull] GroovyParser.ArgumentDeclarationContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.blockStatement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitBlockStatement([NotNull] GroovyParser.BlockStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.singleDeclaration"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitSingleDeclaration([NotNull] GroovyParser.SingleDeclarationContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.tupleDeclaration"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitTupleDeclaration([NotNull] GroovyParser.TupleDeclarationContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.tupleVariableDeclaration"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitTupleVariableDeclaration([NotNull] GroovyParser.TupleVariableDeclarationContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.newInstanceRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitNewInstanceRule([NotNull] GroovyParser.NewInstanceRuleContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.newArrayRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitNewArrayRule([NotNull] GroovyParser.NewArrayRuleContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>declarationStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitDeclarationStatement([NotNull] GroovyParser.DeclarationStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>newArrayStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitNewArrayStatement([NotNull] GroovyParser.NewArrayStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>newInstanceStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitNewInstanceStatement([NotNull] GroovyParser.NewInstanceStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>classicForStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClassicForStatement([NotNull] GroovyParser.ClassicForStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>forInStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitForInStatement([NotNull] GroovyParser.ForInStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>forColonStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitForColonStatement([NotNull] GroovyParser.ForColonStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>ifStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitIfStatement([NotNull] GroovyParser.IfStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>whileStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitWhileStatement([NotNull] GroovyParser.WhileStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>switchStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitSwitchStatement([NotNull] GroovyParser.SwitchStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>tryCatchFinallyStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitTryCatchFinallyStatement([NotNull] GroovyParser.TryCatchFinallyStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>controlStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitControlStatement([NotNull] GroovyParser.ControlStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>returnStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitReturnStatement([NotNull] GroovyParser.ReturnStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>throwStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitThrowStatement([NotNull] GroovyParser.ThrowStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>assertStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAssertStatement([NotNull] GroovyParser.AssertStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>synchronizedStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitSynchronizedStatement([NotNull] GroovyParser.SynchronizedStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>labeledStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitLabeledStatement([NotNull] GroovyParser.LabeledStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>expressionStatement</c>
    /// labeled alternative in <see cref="GroovyParser.statement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitExpressionStatement([NotNull] GroovyParser.ExpressionStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.blockStatementWithCurve"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitBlockStatementWithCurve([NotNull] GroovyParser.BlockStatementWithCurveContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.statementBlock"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitStatementBlock([NotNull] GroovyParser.StatementBlockContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.tryBlock"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitTryBlock([NotNull] GroovyParser.TryBlockContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.catchBlock"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitCatchBlock([NotNull] GroovyParser.CatchBlockContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.finallyBlock"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitFinallyBlock([NotNull] GroovyParser.FinallyBlockContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.caseStatement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitCaseStatement([NotNull] GroovyParser.CaseStatementContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.pathExpression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitPathExpression([NotNull] GroovyParser.PathExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.gstringPathExpression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitGstringPathExpression([NotNull] GroovyParser.GstringPathExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.closureExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClosureExpressionRule([NotNull] GroovyParser.ClosureExpressionRuleContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.gstringExpressionBody"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitGstringExpressionBody([NotNull] GroovyParser.GstringExpressionBodyContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.gstring"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitGstring([NotNull] GroovyParser.GstringContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamArrayExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationParamArrayExpression([NotNull] GroovyParser.AnnotationParamArrayExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamClassConstantExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationParamClassConstantExpression([NotNull] GroovyParser.AnnotationParamClassConstantExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamPathExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationParamPathExpression([NotNull] GroovyParser.AnnotationParamPathExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamClassExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationParamClassExpression([NotNull] GroovyParser.AnnotationParamClassExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamStringExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationParamStringExpression([NotNull] GroovyParser.AnnotationParamStringExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamDecimalExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationParamDecimalExpression([NotNull] GroovyParser.AnnotationParamDecimalExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamIntegerExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationParamIntegerExpression([NotNull] GroovyParser.AnnotationParamIntegerExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamNullExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationParamNullExpression([NotNull] GroovyParser.AnnotationParamNullExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamBoolExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationParamBoolExpression([NotNull] GroovyParser.AnnotationParamBoolExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>annotationParamClosureExpression</c>
    /// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAnnotationParamClosureExpression([NotNull] GroovyParser.AnnotationParamClosureExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>cmdExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitCmdExpression([NotNull] GroovyParser.CmdExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>spreadExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitSpreadExpression([NotNull] GroovyParser.SpreadExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>parenthesisExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitParenthesisExpression([NotNull] GroovyParser.ParenthesisExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>assignmentExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAssignmentExpression([NotNull] GroovyParser.AssignmentExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>superExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitSuperExpression([NotNull] GroovyParser.SuperExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>constructorCallExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitConstructorCallExpression([NotNull] GroovyParser.ConstructorCallExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>binaryExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitBinaryExpression([NotNull] GroovyParser.BinaryExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>castExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitCastExpression([NotNull] GroovyParser.CastExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>callExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitCallExpression([NotNull] GroovyParser.CallExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>prefixExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitPrefixExpression([NotNull] GroovyParser.PrefixExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>fieldAccessExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitFieldAccessExpression([NotNull] GroovyParser.FieldAccessExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>atomExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitAtomExpression([NotNull] GroovyParser.AtomExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>thisExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitThisExpression([NotNull] GroovyParser.ThisExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>indexExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitIndexExpression([NotNull] GroovyParser.IndexExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>unaryExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitUnaryExpression([NotNull] GroovyParser.UnaryExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>ternaryExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitTernaryExpression([NotNull] GroovyParser.TernaryExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>postfixExpression</c>
    /// labeled alternative in <see cref="GroovyParser.expression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitPostfixExpression([NotNull] GroovyParser.PostfixExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>constantExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitConstantExpression([NotNull] GroovyParser.ConstantExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>gstringExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitGstringExpression([NotNull] GroovyParser.GstringExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>constantDecimalExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitConstantDecimalExpression([NotNull] GroovyParser.ConstantDecimalExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>constantIntegerExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitConstantIntegerExpression([NotNull] GroovyParser.ConstantIntegerExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>nullExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitNullExpression([NotNull] GroovyParser.NullExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>boolExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitBoolExpression([NotNull] GroovyParser.BoolExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>variableExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitVariableExpression([NotNull] GroovyParser.VariableExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>classConstantExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClassConstantExpression([NotNull] GroovyParser.ClassConstantExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>closureExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClosureExpression([NotNull] GroovyParser.ClosureExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>listConstructor</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitListConstructor([NotNull] GroovyParser.ListConstructorContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>mapConstructor</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitMapConstructor([NotNull] GroovyParser.MapConstructorContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>newArrayExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitNewArrayExpression([NotNull] GroovyParser.NewArrayExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>newInstanceExpression</c>
    /// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitNewInstanceExpression([NotNull] GroovyParser.NewInstanceExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classConstantRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClassConstantRule([NotNull] GroovyParser.ClassConstantRuleContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.argumentListRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitArgumentListRule([NotNull] GroovyParser.ArgumentListRuleContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.callExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitCallExpressionRule([NotNull] GroovyParser.CallExpressionRuleContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.nonKwCallExpressionRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitNonKwCallExpressionRule([NotNull] GroovyParser.NonKwCallExpressionRuleContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.callRule"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitCallRule([NotNull] GroovyParser.CallRuleContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classNameExpression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClassNameExpression([NotNull] GroovyParser.ClassNameExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.genericClassNameExpression"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitGenericClassNameExpression([NotNull] GroovyParser.GenericClassNameExpressionContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.genericList"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitGenericList([NotNull] GroovyParser.GenericListContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>genericsConcreteElement</c>
    /// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitGenericsConcreteElement([NotNull] GroovyParser.GenericsConcreteElementContext context);
    /// <summary>
    /// Visit a parse tree produced by the <c>genericsWildcardElement</c>
    /// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitGenericsWildcardElement([NotNull] GroovyParser.GenericsWildcardElementContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.mapEntry"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitMapEntry([NotNull] GroovyParser.MapEntryContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.classModifier"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitClassModifier([NotNull] GroovyParser.ClassModifierContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.memberModifier"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitMemberModifier([NotNull] GroovyParser.MemberModifierContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.argumentList"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitArgumentList([NotNull] GroovyParser.ArgumentListContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.argument"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitArgument([NotNull] GroovyParser.ArgumentContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.selectorName"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitSelectorName([NotNull] GroovyParser.SelectorNameContext context);
    /// <summary>
    /// Visit a parse tree produced by <see cref="GroovyParser.kwSelectorName"/>.
    /// </summary>
    /// <param name="context">The parse tree.</param>
    /// <return>The visitor result.</return>
    Result VisitKwSelectorName([NotNull] GroovyParser.KwSelectorNameContext context);
}
