//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GroovyParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

namespace TYTCapstone;

/// <summary>
/// This class provides an empty implementation of <see cref="IGroovyParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
public partial class GroovyParserBaseListener : IGroovyParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.compilationUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompilationUnit([NotNull] GroovyParser.CompilationUnitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.compilationUnit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompilationUnit([NotNull] GroovyParser.CompilationUnitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.scriptPart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScriptPart([NotNull] GroovyParser.ScriptPartContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.scriptPart"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScriptPart([NotNull] GroovyParser.ScriptPartContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.packageDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPackageDefinition([NotNull] GroovyParser.PackageDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.packageDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPackageDefinition([NotNull] GroovyParser.PackageDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.importStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportStatement([NotNull] GroovyParser.ImportStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.importStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportStatement([NotNull] GroovyParser.ImportStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassDeclaration([NotNull] GroovyParser.ClassDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassDeclaration([NotNull] GroovyParser.ClassDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassMember([NotNull] GroovyParser.ClassMemberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassMember([NotNull] GroovyParser.ClassMemberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.enumConstant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumConstant([NotNull] GroovyParser.EnumConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.enumConstant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumConstant([NotNull] GroovyParser.EnumConstantContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassBody([NotNull] GroovyParser.ClassBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassBody([NotNull] GroovyParser.ClassBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.implementsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImplementsClause([NotNull] GroovyParser.ImplementsClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.implementsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImplementsClause([NotNull] GroovyParser.ImplementsClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.extendsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExtendsClause([NotNull] GroovyParser.ExtendsClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.extendsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExtendsClause([NotNull] GroovyParser.ExtendsClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.methodDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodDeclaration([NotNull] GroovyParser.MethodDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.methodDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodDeclaration([NotNull] GroovyParser.MethodDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.fieldDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFieldDeclaration([NotNull] GroovyParser.FieldDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.fieldDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFieldDeclaration([NotNull] GroovyParser.FieldDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.declarationRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclarationRule([NotNull] GroovyParser.DeclarationRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.declarationRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclarationRule([NotNull] GroovyParser.DeclarationRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.objectInitializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectInitializer([NotNull] GroovyParser.ObjectInitializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.objectInitializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectInitializer([NotNull] GroovyParser.ObjectInitializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classInitializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassInitializer([NotNull] GroovyParser.ClassInitializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classInitializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassInitializer([NotNull] GroovyParser.ClassInitializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.typeDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeDeclaration([NotNull] GroovyParser.TypeDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.typeDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeDeclaration([NotNull] GroovyParser.TypeDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.annotationClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationClause([NotNull] GroovyParser.AnnotationClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.annotationClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationClause([NotNull] GroovyParser.AnnotationClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.annotationElementPair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationElementPair([NotNull] GroovyParser.AnnotationElementPairContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.annotationElementPair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationElementPair([NotNull] GroovyParser.AnnotationElementPairContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.annotationElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationElement([NotNull] GroovyParser.AnnotationElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.annotationElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationElement([NotNull] GroovyParser.AnnotationElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.genericDeclarationList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGenericDeclarationList([NotNull] GroovyParser.GenericDeclarationListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.genericDeclarationList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGenericDeclarationList([NotNull] GroovyParser.GenericDeclarationListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.genericsDeclarationElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGenericsDeclarationElement([NotNull] GroovyParser.GenericsDeclarationElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.genericsDeclarationElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGenericsDeclarationElement([NotNull] GroovyParser.GenericsDeclarationElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.throwsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThrowsClause([NotNull] GroovyParser.ThrowsClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.throwsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThrowsClause([NotNull] GroovyParser.ThrowsClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.argumentDeclarationList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentDeclarationList([NotNull] GroovyParser.ArgumentDeclarationListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.argumentDeclarationList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentDeclarationList([NotNull] GroovyParser.ArgumentDeclarationListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.argumentDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentDeclaration([NotNull] GroovyParser.ArgumentDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.argumentDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentDeclaration([NotNull] GroovyParser.ArgumentDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.blockStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStatement([NotNull] GroovyParser.BlockStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.blockStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStatement([NotNull] GroovyParser.BlockStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.singleDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSingleDeclaration([NotNull] GroovyParser.SingleDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.singleDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSingleDeclaration([NotNull] GroovyParser.SingleDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.tupleDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleDeclaration([NotNull] GroovyParser.TupleDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.tupleDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleDeclaration([NotNull] GroovyParser.TupleDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.tupleVariableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleVariableDeclaration([NotNull] GroovyParser.TupleVariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.tupleVariableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleVariableDeclaration([NotNull] GroovyParser.TupleVariableDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.newInstanceRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewInstanceRule([NotNull] GroovyParser.NewInstanceRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.newInstanceRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewInstanceRule([NotNull] GroovyParser.NewInstanceRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.newArrayRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewArrayRule([NotNull] GroovyParser.NewArrayRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.newArrayRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewArrayRule([NotNull] GroovyParser.NewArrayRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>declarationStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclarationStatement([NotNull] GroovyParser.DeclarationStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>declarationStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclarationStatement([NotNull] GroovyParser.DeclarationStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>newArrayStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewArrayStatement([NotNull] GroovyParser.NewArrayStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>newArrayStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewArrayStatement([NotNull] GroovyParser.NewArrayStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>newInstanceStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewInstanceStatement([NotNull] GroovyParser.NewInstanceStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>newInstanceStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewInstanceStatement([NotNull] GroovyParser.NewInstanceStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>classicForStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassicForStatement([NotNull] GroovyParser.ClassicForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>classicForStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassicForStatement([NotNull] GroovyParser.ClassicForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>forInStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForInStatement([NotNull] GroovyParser.ForInStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>forInStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForInStatement([NotNull] GroovyParser.ForInStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>forColonStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForColonStatement([NotNull] GroovyParser.ForColonStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>forColonStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForColonStatement([NotNull] GroovyParser.ForColonStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] GroovyParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] GroovyParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] GroovyParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] GroovyParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>switchStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchStatement([NotNull] GroovyParser.SwitchStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>switchStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchStatement([NotNull] GroovyParser.SwitchStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>tryCatchFinallyStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTryCatchFinallyStatement([NotNull] GroovyParser.TryCatchFinallyStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>tryCatchFinallyStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTryCatchFinallyStatement([NotNull] GroovyParser.TryCatchFinallyStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>controlStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterControlStatement([NotNull] GroovyParser.ControlStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>controlStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitControlStatement([NotNull] GroovyParser.ControlStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] GroovyParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] GroovyParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>throwStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThrowStatement([NotNull] GroovyParser.ThrowStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>throwStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThrowStatement([NotNull] GroovyParser.ThrowStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assertStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssertStatement([NotNull] GroovyParser.AssertStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assertStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssertStatement([NotNull] GroovyParser.AssertStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>synchronizedStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSynchronizedStatement([NotNull] GroovyParser.SynchronizedStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>synchronizedStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSynchronizedStatement([NotNull] GroovyParser.SynchronizedStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>labeledStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLabeledStatement([NotNull] GroovyParser.LabeledStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>labeledStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLabeledStatement([NotNull] GroovyParser.LabeledStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStatement([NotNull] GroovyParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStatement([NotNull] GroovyParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.blockStatementWithCurve"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStatementWithCurve([NotNull] GroovyParser.BlockStatementWithCurveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.blockStatementWithCurve"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStatementWithCurve([NotNull] GroovyParser.BlockStatementWithCurveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.statementBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementBlock([NotNull] GroovyParser.StatementBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.statementBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementBlock([NotNull] GroovyParser.StatementBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.tryBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTryBlock([NotNull] GroovyParser.TryBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.tryBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTryBlock([NotNull] GroovyParser.TryBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.catchBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCatchBlock([NotNull] GroovyParser.CatchBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.catchBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCatchBlock([NotNull] GroovyParser.CatchBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.finallyBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFinallyBlock([NotNull] GroovyParser.FinallyBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.finallyBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFinallyBlock([NotNull] GroovyParser.FinallyBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.caseStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseStatement([NotNull] GroovyParser.CaseStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.caseStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseStatement([NotNull] GroovyParser.CaseStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.pathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPathExpression([NotNull] GroovyParser.PathExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.pathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPathExpression([NotNull] GroovyParser.PathExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.gstringPathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGstringPathExpression([NotNull] GroovyParser.GstringPathExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.gstringPathExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGstringPathExpression([NotNull] GroovyParser.GstringPathExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.closureExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClosureExpressionRule([NotNull] GroovyParser.ClosureExpressionRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.closureExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClosureExpressionRule([NotNull] GroovyParser.ClosureExpressionRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.gstringExpressionBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGstringExpressionBody([NotNull] GroovyParser.GstringExpressionBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.gstringExpressionBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGstringExpressionBody([NotNull] GroovyParser.GstringExpressionBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.gstring"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGstring([NotNull] GroovyParser.GstringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.gstring"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGstring([NotNull] GroovyParser.GstringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamArrayExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationParamArrayExpression([NotNull] GroovyParser.AnnotationParamArrayExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamArrayExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationParamArrayExpression([NotNull] GroovyParser.AnnotationParamArrayExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamClassConstantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationParamClassConstantExpression([NotNull] GroovyParser.AnnotationParamClassConstantExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamClassConstantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationParamClassConstantExpression([NotNull] GroovyParser.AnnotationParamClassConstantExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamPathExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationParamPathExpression([NotNull] GroovyParser.AnnotationParamPathExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamPathExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationParamPathExpression([NotNull] GroovyParser.AnnotationParamPathExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamClassExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationParamClassExpression([NotNull] GroovyParser.AnnotationParamClassExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamClassExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationParamClassExpression([NotNull] GroovyParser.AnnotationParamClassExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamStringExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationParamStringExpression([NotNull] GroovyParser.AnnotationParamStringExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamStringExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationParamStringExpression([NotNull] GroovyParser.AnnotationParamStringExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamDecimalExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationParamDecimalExpression([NotNull] GroovyParser.AnnotationParamDecimalExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamDecimalExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationParamDecimalExpression([NotNull] GroovyParser.AnnotationParamDecimalExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamIntegerExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationParamIntegerExpression([NotNull] GroovyParser.AnnotationParamIntegerExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamIntegerExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationParamIntegerExpression([NotNull] GroovyParser.AnnotationParamIntegerExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamNullExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationParamNullExpression([NotNull] GroovyParser.AnnotationParamNullExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamNullExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationParamNullExpression([NotNull] GroovyParser.AnnotationParamNullExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamBoolExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationParamBoolExpression([NotNull] GroovyParser.AnnotationParamBoolExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamBoolExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationParamBoolExpression([NotNull] GroovyParser.AnnotationParamBoolExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamClosureExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnnotationParamClosureExpression([NotNull] GroovyParser.AnnotationParamClosureExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamClosureExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnnotationParamClosureExpression([NotNull] GroovyParser.AnnotationParamClosureExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>cmdExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCmdExpression([NotNull] GroovyParser.CmdExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>cmdExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCmdExpression([NotNull] GroovyParser.CmdExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>spreadExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSpreadExpression([NotNull] GroovyParser.SpreadExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>spreadExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSpreadExpression([NotNull] GroovyParser.SpreadExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesisExpression([NotNull] GroovyParser.ParenthesisExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesisExpression([NotNull] GroovyParser.ParenthesisExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignmentExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentExpression([NotNull] GroovyParser.AssignmentExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignmentExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentExpression([NotNull] GroovyParser.AssignmentExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>superExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSuperExpression([NotNull] GroovyParser.SuperExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>superExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSuperExpression([NotNull] GroovyParser.SuperExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>constructorCallExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstructorCallExpression([NotNull] GroovyParser.ConstructorCallExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>constructorCallExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstructorCallExpression([NotNull] GroovyParser.ConstructorCallExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryExpression([NotNull] GroovyParser.BinaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryExpression([NotNull] GroovyParser.BinaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>castExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCastExpression([NotNull] GroovyParser.CastExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>castExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCastExpression([NotNull] GroovyParser.CastExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>callExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCallExpression([NotNull] GroovyParser.CallExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>callExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCallExpression([NotNull] GroovyParser.CallExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>prefixExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrefixExpression([NotNull] GroovyParser.PrefixExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>prefixExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrefixExpression([NotNull] GroovyParser.PrefixExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>fieldAccessExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFieldAccessExpression([NotNull] GroovyParser.FieldAccessExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>fieldAccessExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFieldAccessExpression([NotNull] GroovyParser.FieldAccessExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>atomExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtomExpression([NotNull] GroovyParser.AtomExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>atomExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtomExpression([NotNull] GroovyParser.AtomExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>thisExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThisExpression([NotNull] GroovyParser.ThisExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>thisExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThisExpression([NotNull] GroovyParser.ThisExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>indexExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndexExpression([NotNull] GroovyParser.IndexExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>indexExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndexExpression([NotNull] GroovyParser.IndexExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryExpression([NotNull] GroovyParser.UnaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryExpression([NotNull] GroovyParser.UnaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ternaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTernaryExpression([NotNull] GroovyParser.TernaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ternaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTernaryExpression([NotNull] GroovyParser.TernaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>postfixExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostfixExpression([NotNull] GroovyParser.PostfixExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>postfixExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostfixExpression([NotNull] GroovyParser.PostfixExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstantExpression([NotNull] GroovyParser.ConstantExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstantExpression([NotNull] GroovyParser.ConstantExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>gstringExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGstringExpression([NotNull] GroovyParser.GstringExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>gstringExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGstringExpression([NotNull] GroovyParser.GstringExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>constantDecimalExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstantDecimalExpression([NotNull] GroovyParser.ConstantDecimalExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>constantDecimalExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstantDecimalExpression([NotNull] GroovyParser.ConstantDecimalExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>constantIntegerExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstantIntegerExpression([NotNull] GroovyParser.ConstantIntegerExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>constantIntegerExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstantIntegerExpression([NotNull] GroovyParser.ConstantIntegerExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNullExpression([NotNull] GroovyParser.NullExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNullExpression([NotNull] GroovyParser.NullExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolExpression([NotNull] GroovyParser.BoolExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolExpression([NotNull] GroovyParser.BoolExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>variableExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableExpression([NotNull] GroovyParser.VariableExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>variableExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableExpression([NotNull] GroovyParser.VariableExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>classConstantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassConstantExpression([NotNull] GroovyParser.ClassConstantExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>classConstantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassConstantExpression([NotNull] GroovyParser.ClassConstantExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>closureExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClosureExpression([NotNull] GroovyParser.ClosureExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>closureExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClosureExpression([NotNull] GroovyParser.ClosureExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>listConstructor</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterListConstructor([NotNull] GroovyParser.ListConstructorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>listConstructor</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitListConstructor([NotNull] GroovyParser.ListConstructorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>mapConstructor</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMapConstructor([NotNull] GroovyParser.MapConstructorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>mapConstructor</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMapConstructor([NotNull] GroovyParser.MapConstructorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>newArrayExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewArrayExpression([NotNull] GroovyParser.NewArrayExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>newArrayExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewArrayExpression([NotNull] GroovyParser.NewArrayExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>newInstanceExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewInstanceExpression([NotNull] GroovyParser.NewInstanceExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>newInstanceExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewInstanceExpression([NotNull] GroovyParser.NewInstanceExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classConstantRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassConstantRule([NotNull] GroovyParser.ClassConstantRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classConstantRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassConstantRule([NotNull] GroovyParser.ClassConstantRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.argumentListRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentListRule([NotNull] GroovyParser.ArgumentListRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.argumentListRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentListRule([NotNull] GroovyParser.ArgumentListRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.callExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCallExpressionRule([NotNull] GroovyParser.CallExpressionRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.callExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCallExpressionRule([NotNull] GroovyParser.CallExpressionRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.nonKwCallExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNonKwCallExpressionRule([NotNull] GroovyParser.NonKwCallExpressionRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.nonKwCallExpressionRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNonKwCallExpressionRule([NotNull] GroovyParser.NonKwCallExpressionRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.callRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCallRule([NotNull] GroovyParser.CallRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.callRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCallRule([NotNull] GroovyParser.CallRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classNameExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassNameExpression([NotNull] GroovyParser.ClassNameExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classNameExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassNameExpression([NotNull] GroovyParser.ClassNameExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.genericClassNameExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGenericClassNameExpression([NotNull] GroovyParser.GenericClassNameExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.genericClassNameExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGenericClassNameExpression([NotNull] GroovyParser.GenericClassNameExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.genericList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGenericList([NotNull] GroovyParser.GenericListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.genericList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGenericList([NotNull] GroovyParser.GenericListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>genericsConcreteElement</c>
	/// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGenericsConcreteElement([NotNull] GroovyParser.GenericsConcreteElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>genericsConcreteElement</c>
	/// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGenericsConcreteElement([NotNull] GroovyParser.GenericsConcreteElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>genericsWildcardElement</c>
	/// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGenericsWildcardElement([NotNull] GroovyParser.GenericsWildcardElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>genericsWildcardElement</c>
	/// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGenericsWildcardElement([NotNull] GroovyParser.GenericsWildcardElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.mapEntry"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMapEntry([NotNull] GroovyParser.MapEntryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.mapEntry"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMapEntry([NotNull] GroovyParser.MapEntryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classModifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassModifier([NotNull] GroovyParser.ClassModifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classModifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassModifier([NotNull] GroovyParser.ClassModifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.memberModifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberModifier([NotNull] GroovyParser.MemberModifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.memberModifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberModifier([NotNull] GroovyParser.MemberModifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentList([NotNull] GroovyParser.ArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentList([NotNull] GroovyParser.ArgumentListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument([NotNull] GroovyParser.ArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument([NotNull] GroovyParser.ArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.selectorName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSelectorName([NotNull] GroovyParser.SelectorNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.selectorName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSelectorName([NotNull] GroovyParser.SelectorNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.kwSelectorName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKwSelectorName([NotNull] GroovyParser.KwSelectorNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.kwSelectorName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKwSelectorName([NotNull] GroovyParser.KwSelectorNameContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
