//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GroovyParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

namespace TYTCapstone;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="GroovyParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
public interface IGroovyParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.compilationUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompilationUnit([NotNull] GroovyParser.CompilationUnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.compilationUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompilationUnit([NotNull] GroovyParser.CompilationUnitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.scriptPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScriptPart([NotNull] GroovyParser.ScriptPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.scriptPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScriptPart([NotNull] GroovyParser.ScriptPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.packageDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPackageDefinition([NotNull] GroovyParser.PackageDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.packageDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPackageDefinition([NotNull] GroovyParser.PackageDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportStatement([NotNull] GroovyParser.ImportStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportStatement([NotNull] GroovyParser.ImportStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDeclaration([NotNull] GroovyParser.ClassDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDeclaration([NotNull] GroovyParser.ClassDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassMember([NotNull] GroovyParser.ClassMemberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassMember([NotNull] GroovyParser.ClassMemberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.enumConstant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumConstant([NotNull] GroovyParser.EnumConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.enumConstant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumConstant([NotNull] GroovyParser.EnumConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassBody([NotNull] GroovyParser.ClassBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassBody([NotNull] GroovyParser.ClassBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.implementsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplementsClause([NotNull] GroovyParser.ImplementsClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.implementsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplementsClause([NotNull] GroovyParser.ImplementsClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.extendsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExtendsClause([NotNull] GroovyParser.ExtendsClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.extendsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExtendsClause([NotNull] GroovyParser.ExtendsClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.methodDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDeclaration([NotNull] GroovyParser.MethodDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.methodDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDeclaration([NotNull] GroovyParser.MethodDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.fieldDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldDeclaration([NotNull] GroovyParser.FieldDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.fieldDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldDeclaration([NotNull] GroovyParser.FieldDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.declarationRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationRule([NotNull] GroovyParser.DeclarationRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.declarationRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationRule([NotNull] GroovyParser.DeclarationRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.objectInitializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectInitializer([NotNull] GroovyParser.ObjectInitializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.objectInitializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectInitializer([NotNull] GroovyParser.ObjectInitializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classInitializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassInitializer([NotNull] GroovyParser.ClassInitializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classInitializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassInitializer([NotNull] GroovyParser.ClassInitializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.typeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDeclaration([NotNull] GroovyParser.TypeDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.typeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDeclaration([NotNull] GroovyParser.TypeDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.annotationClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationClause([NotNull] GroovyParser.AnnotationClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.annotationClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationClause([NotNull] GroovyParser.AnnotationClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.annotationElementPair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationElementPair([NotNull] GroovyParser.AnnotationElementPairContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.annotationElementPair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationElementPair([NotNull] GroovyParser.AnnotationElementPairContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.annotationElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationElement([NotNull] GroovyParser.AnnotationElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.annotationElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationElement([NotNull] GroovyParser.AnnotationElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.genericDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericDeclarationList([NotNull] GroovyParser.GenericDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.genericDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericDeclarationList([NotNull] GroovyParser.GenericDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.genericsDeclarationElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericsDeclarationElement([NotNull] GroovyParser.GenericsDeclarationElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.genericsDeclarationElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericsDeclarationElement([NotNull] GroovyParser.GenericsDeclarationElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.throwsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrowsClause([NotNull] GroovyParser.ThrowsClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.throwsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrowsClause([NotNull] GroovyParser.ThrowsClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.argumentDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentDeclarationList([NotNull] GroovyParser.ArgumentDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.argumentDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentDeclarationList([NotNull] GroovyParser.ArgumentDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.argumentDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentDeclaration([NotNull] GroovyParser.ArgumentDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.argumentDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentDeclaration([NotNull] GroovyParser.ArgumentDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.blockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStatement([NotNull] GroovyParser.BlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.blockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStatement([NotNull] GroovyParser.BlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.singleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleDeclaration([NotNull] GroovyParser.SingleDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.singleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleDeclaration([NotNull] GroovyParser.SingleDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.tupleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleDeclaration([NotNull] GroovyParser.TupleDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.tupleDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleDeclaration([NotNull] GroovyParser.TupleDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.tupleVariableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleVariableDeclaration([NotNull] GroovyParser.TupleVariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.tupleVariableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleVariableDeclaration([NotNull] GroovyParser.TupleVariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.newInstanceRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewInstanceRule([NotNull] GroovyParser.NewInstanceRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.newInstanceRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewInstanceRule([NotNull] GroovyParser.NewInstanceRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.newArrayRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewArrayRule([NotNull] GroovyParser.NewArrayRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.newArrayRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewArrayRule([NotNull] GroovyParser.NewArrayRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>declarationStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationStatement([NotNull] GroovyParser.DeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>declarationStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationStatement([NotNull] GroovyParser.DeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>newArrayStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewArrayStatement([NotNull] GroovyParser.NewArrayStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>newArrayStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewArrayStatement([NotNull] GroovyParser.NewArrayStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>newInstanceStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewInstanceStatement([NotNull] GroovyParser.NewInstanceStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>newInstanceStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewInstanceStatement([NotNull] GroovyParser.NewInstanceStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>classicForStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassicForStatement([NotNull] GroovyParser.ClassicForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>classicForStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassicForStatement([NotNull] GroovyParser.ClassicForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>forInStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForInStatement([NotNull] GroovyParser.ForInStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>forInStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForInStatement([NotNull] GroovyParser.ForInStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>forColonStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForColonStatement([NotNull] GroovyParser.ForColonStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>forColonStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForColonStatement([NotNull] GroovyParser.ForColonStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] GroovyParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] GroovyParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] GroovyParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] GroovyParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>switchStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] GroovyParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>switchStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] GroovyParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>tryCatchFinallyStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryCatchFinallyStatement([NotNull] GroovyParser.TryCatchFinallyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>tryCatchFinallyStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryCatchFinallyStatement([NotNull] GroovyParser.TryCatchFinallyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>controlStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterControlStatement([NotNull] GroovyParser.ControlStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>controlStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitControlStatement([NotNull] GroovyParser.ControlStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] GroovyParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] GroovyParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>throwStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrowStatement([NotNull] GroovyParser.ThrowStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>throwStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrowStatement([NotNull] GroovyParser.ThrowStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assertStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssertStatement([NotNull] GroovyParser.AssertStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assertStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssertStatement([NotNull] GroovyParser.AssertStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>synchronizedStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSynchronizedStatement([NotNull] GroovyParser.SynchronizedStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>synchronizedStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSynchronizedStatement([NotNull] GroovyParser.SynchronizedStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>labeledStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabeledStatement([NotNull] GroovyParser.LabeledStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>labeledStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabeledStatement([NotNull] GroovyParser.LabeledStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] GroovyParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="GroovyParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] GroovyParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.blockStatementWithCurve"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStatementWithCurve([NotNull] GroovyParser.BlockStatementWithCurveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.blockStatementWithCurve"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStatementWithCurve([NotNull] GroovyParser.BlockStatementWithCurveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.statementBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementBlock([NotNull] GroovyParser.StatementBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.statementBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementBlock([NotNull] GroovyParser.StatementBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.tryBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryBlock([NotNull] GroovyParser.TryBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.tryBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryBlock([NotNull] GroovyParser.TryBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.catchBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchBlock([NotNull] GroovyParser.CatchBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.catchBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchBlock([NotNull] GroovyParser.CatchBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.finallyBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFinallyBlock([NotNull] GroovyParser.FinallyBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.finallyBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFinallyBlock([NotNull] GroovyParser.FinallyBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.caseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseStatement([NotNull] GroovyParser.CaseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.caseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseStatement([NotNull] GroovyParser.CaseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.pathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPathExpression([NotNull] GroovyParser.PathExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.pathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPathExpression([NotNull] GroovyParser.PathExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.gstringPathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGstringPathExpression([NotNull] GroovyParser.GstringPathExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.gstringPathExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGstringPathExpression([NotNull] GroovyParser.GstringPathExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.closureExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureExpressionRule([NotNull] GroovyParser.ClosureExpressionRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.closureExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureExpressionRule([NotNull] GroovyParser.ClosureExpressionRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.gstringExpressionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGstringExpressionBody([NotNull] GroovyParser.GstringExpressionBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.gstringExpressionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGstringExpressionBody([NotNull] GroovyParser.GstringExpressionBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.gstring"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGstring([NotNull] GroovyParser.GstringContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.gstring"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGstring([NotNull] GroovyParser.GstringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamArrayExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationParamArrayExpression([NotNull] GroovyParser.AnnotationParamArrayExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamArrayExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationParamArrayExpression([NotNull] GroovyParser.AnnotationParamArrayExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamClassConstantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationParamClassConstantExpression([NotNull] GroovyParser.AnnotationParamClassConstantExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamClassConstantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationParamClassConstantExpression([NotNull] GroovyParser.AnnotationParamClassConstantExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamPathExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationParamPathExpression([NotNull] GroovyParser.AnnotationParamPathExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamPathExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationParamPathExpression([NotNull] GroovyParser.AnnotationParamPathExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamClassExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationParamClassExpression([NotNull] GroovyParser.AnnotationParamClassExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamClassExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationParamClassExpression([NotNull] GroovyParser.AnnotationParamClassExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamStringExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationParamStringExpression([NotNull] GroovyParser.AnnotationParamStringExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamStringExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationParamStringExpression([NotNull] GroovyParser.AnnotationParamStringExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamDecimalExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationParamDecimalExpression([NotNull] GroovyParser.AnnotationParamDecimalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamDecimalExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationParamDecimalExpression([NotNull] GroovyParser.AnnotationParamDecimalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamIntegerExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationParamIntegerExpression([NotNull] GroovyParser.AnnotationParamIntegerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamIntegerExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationParamIntegerExpression([NotNull] GroovyParser.AnnotationParamIntegerExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamNullExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationParamNullExpression([NotNull] GroovyParser.AnnotationParamNullExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamNullExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationParamNullExpression([NotNull] GroovyParser.AnnotationParamNullExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamBoolExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationParamBoolExpression([NotNull] GroovyParser.AnnotationParamBoolExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamBoolExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationParamBoolExpression([NotNull] GroovyParser.AnnotationParamBoolExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>annotationParamClosureExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnnotationParamClosureExpression([NotNull] GroovyParser.AnnotationParamClosureExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>annotationParamClosureExpression</c>
	/// labeled alternative in <see cref="GroovyParser.annotationParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnnotationParamClosureExpression([NotNull] GroovyParser.AnnotationParamClosureExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>cmdExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCmdExpression([NotNull] GroovyParser.CmdExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>cmdExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCmdExpression([NotNull] GroovyParser.CmdExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>spreadExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSpreadExpression([NotNull] GroovyParser.SpreadExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>spreadExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSpreadExpression([NotNull] GroovyParser.SpreadExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpression([NotNull] GroovyParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpression([NotNull] GroovyParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignmentExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpression([NotNull] GroovyParser.AssignmentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignmentExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpression([NotNull] GroovyParser.AssignmentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>superExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSuperExpression([NotNull] GroovyParser.SuperExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>superExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSuperExpression([NotNull] GroovyParser.SuperExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>constructorCallExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorCallExpression([NotNull] GroovyParser.ConstructorCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constructorCallExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorCallExpression([NotNull] GroovyParser.ConstructorCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryExpression([NotNull] GroovyParser.BinaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryExpression([NotNull] GroovyParser.BinaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>castExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastExpression([NotNull] GroovyParser.CastExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>castExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastExpression([NotNull] GroovyParser.CastExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>callExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallExpression([NotNull] GroovyParser.CallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>callExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallExpression([NotNull] GroovyParser.CallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>prefixExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrefixExpression([NotNull] GroovyParser.PrefixExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>prefixExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrefixExpression([NotNull] GroovyParser.PrefixExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>fieldAccessExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldAccessExpression([NotNull] GroovyParser.FieldAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>fieldAccessExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldAccessExpression([NotNull] GroovyParser.FieldAccessExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atomExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomExpression([NotNull] GroovyParser.AtomExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atomExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomExpression([NotNull] GroovyParser.AtomExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>thisExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisExpression([NotNull] GroovyParser.ThisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>thisExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisExpression([NotNull] GroovyParser.ThisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>indexExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexExpression([NotNull] GroovyParser.IndexExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>indexExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexExpression([NotNull] GroovyParser.IndexExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpression([NotNull] GroovyParser.UnaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpression([NotNull] GroovyParser.UnaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ternaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] GroovyParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ternaryExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] GroovyParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>postfixExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostfixExpression([NotNull] GroovyParser.PostfixExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>postfixExpression</c>
	/// labeled alternative in <see cref="GroovyParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostfixExpression([NotNull] GroovyParser.PostfixExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantExpression([NotNull] GroovyParser.ConstantExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantExpression([NotNull] GroovyParser.ConstantExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>gstringExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGstringExpression([NotNull] GroovyParser.GstringExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>gstringExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGstringExpression([NotNull] GroovyParser.GstringExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>constantDecimalExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantDecimalExpression([NotNull] GroovyParser.ConstantDecimalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constantDecimalExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantDecimalExpression([NotNull] GroovyParser.ConstantDecimalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>constantIntegerExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantIntegerExpression([NotNull] GroovyParser.ConstantIntegerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constantIntegerExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantIntegerExpression([NotNull] GroovyParser.ConstantIntegerExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullExpression([NotNull] GroovyParser.NullExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullExpression([NotNull] GroovyParser.NullExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolExpression([NotNull] GroovyParser.BoolExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolExpression([NotNull] GroovyParser.BoolExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>variableExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableExpression([NotNull] GroovyParser.VariableExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variableExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableExpression([NotNull] GroovyParser.VariableExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>classConstantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassConstantExpression([NotNull] GroovyParser.ClassConstantExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>classConstantExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassConstantExpression([NotNull] GroovyParser.ClassConstantExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>closureExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClosureExpression([NotNull] GroovyParser.ClosureExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>closureExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClosureExpression([NotNull] GroovyParser.ClosureExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>listConstructor</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListConstructor([NotNull] GroovyParser.ListConstructorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>listConstructor</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListConstructor([NotNull] GroovyParser.ListConstructorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mapConstructor</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapConstructor([NotNull] GroovyParser.MapConstructorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mapConstructor</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapConstructor([NotNull] GroovyParser.MapConstructorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>newArrayExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewArrayExpression([NotNull] GroovyParser.NewArrayExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>newArrayExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewArrayExpression([NotNull] GroovyParser.NewArrayExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>newInstanceExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewInstanceExpression([NotNull] GroovyParser.NewInstanceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>newInstanceExpression</c>
	/// labeled alternative in <see cref="GroovyParser.atomExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewInstanceExpression([NotNull] GroovyParser.NewInstanceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classConstantRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassConstantRule([NotNull] GroovyParser.ClassConstantRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classConstantRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassConstantRule([NotNull] GroovyParser.ClassConstantRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.argumentListRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentListRule([NotNull] GroovyParser.ArgumentListRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.argumentListRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentListRule([NotNull] GroovyParser.ArgumentListRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.callExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallExpressionRule([NotNull] GroovyParser.CallExpressionRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.callExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallExpressionRule([NotNull] GroovyParser.CallExpressionRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.nonKwCallExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNonKwCallExpressionRule([NotNull] GroovyParser.NonKwCallExpressionRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.nonKwCallExpressionRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNonKwCallExpressionRule([NotNull] GroovyParser.NonKwCallExpressionRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.callRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallRule([NotNull] GroovyParser.CallRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.callRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallRule([NotNull] GroovyParser.CallRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classNameExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassNameExpression([NotNull] GroovyParser.ClassNameExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classNameExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassNameExpression([NotNull] GroovyParser.ClassNameExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.genericClassNameExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericClassNameExpression([NotNull] GroovyParser.GenericClassNameExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.genericClassNameExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericClassNameExpression([NotNull] GroovyParser.GenericClassNameExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.genericList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericList([NotNull] GroovyParser.GenericListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.genericList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericList([NotNull] GroovyParser.GenericListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>genericsConcreteElement</c>
	/// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericsConcreteElement([NotNull] GroovyParser.GenericsConcreteElementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>genericsConcreteElement</c>
	/// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericsConcreteElement([NotNull] GroovyParser.GenericsConcreteElementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>genericsWildcardElement</c>
	/// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericsWildcardElement([NotNull] GroovyParser.GenericsWildcardElementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>genericsWildcardElement</c>
	/// labeled alternative in <see cref="GroovyParser.genericListElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericsWildcardElement([NotNull] GroovyParser.GenericsWildcardElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.mapEntry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMapEntry([NotNull] GroovyParser.MapEntryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.mapEntry"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMapEntry([NotNull] GroovyParser.MapEntryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.classModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassModifier([NotNull] GroovyParser.ClassModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.classModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassModifier([NotNull] GroovyParser.ClassModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.memberModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberModifier([NotNull] GroovyParser.MemberModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.memberModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberModifier([NotNull] GroovyParser.MemberModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] GroovyParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] GroovyParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument([NotNull] GroovyParser.ArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument([NotNull] GroovyParser.ArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.selectorName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectorName([NotNull] GroovyParser.SelectorNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.selectorName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectorName([NotNull] GroovyParser.SelectorNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GroovyParser.kwSelectorName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKwSelectorName([NotNull] GroovyParser.KwSelectorNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GroovyParser.kwSelectorName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKwSelectorName([NotNull] GroovyParser.KwSelectorNameContext context);
}
